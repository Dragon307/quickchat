// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: friend_service.proto

#include "friend_service.pb.h"
#include "friend_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace srv {

static const char* FriendService_method_names[] = {
  "/srv.FriendService/ListUserFriends",
  "/srv.FriendService/CreateFriend",
  "/srv.FriendService/DeleteFriend",
  "/srv.FriendService/ChangeFriendStatus",
};

std::unique_ptr< FriendService::Stub> FriendService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FriendService::Stub> stub(new FriendService::Stub(channel));
  return stub;
}

FriendService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListUserFriends_(FriendService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateFriend_(FriendService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFriend_(FriendService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeFriendStatus_(FriendService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FriendService::Stub::ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::srv::ListUserFriendsReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListUserFriends_, context, request, response);
}

void FriendService::Stub::experimental_async::ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUserFriends_, context, request, response, std::move(f));
}

void FriendService::Stub::experimental_async::ListUserFriends(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserFriendsReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUserFriends_, context, request, response, std::move(f));
}

void FriendService::Stub::experimental_async::ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListUserFriends_, context, request, response, reactor);
}

void FriendService::Stub::experimental_async::ListUserFriends(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserFriendsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListUserFriends_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srv::ListUserFriendsReponse>* FriendService::Stub::AsyncListUserFriendsRaw(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::ListUserFriendsReponse>::Create(channel_.get(), cq, rpcmethod_ListUserFriends_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::srv::ListUserFriendsReponse>* FriendService::Stub::PrepareAsyncListUserFriendsRaw(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::ListUserFriendsReponse>::Create(channel_.get(), cq, rpcmethod_ListUserFriends_, context, request, false);
}

::grpc::Status FriendService::Stub::CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::srv::BaseReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateFriend_, context, request, response);
}

void FriendService::Stub::experimental_async::CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateFriend_, context, request, response, std::move(f));
}

void FriendService::Stub::experimental_async::CreateFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateFriend_, context, request, response, std::move(f));
}

void FriendService::Stub::experimental_async::CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateFriend_, context, request, response, reactor);
}

void FriendService::Stub::experimental_async::CreateFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateFriend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* FriendService::Stub::AsyncCreateFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::BaseReponse>::Create(channel_.get(), cq, rpcmethod_CreateFriend_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* FriendService::Stub::PrepareAsyncCreateFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::BaseReponse>::Create(channel_.get(), cq, rpcmethod_CreateFriend_, context, request, false);
}

::grpc::Status FriendService::Stub::DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::srv::BaseReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteFriend_, context, request, response);
}

void FriendService::Stub::experimental_async::DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteFriend_, context, request, response, std::move(f));
}

void FriendService::Stub::experimental_async::DeleteFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteFriend_, context, request, response, std::move(f));
}

void FriendService::Stub::experimental_async::DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteFriend_, context, request, response, reactor);
}

void FriendService::Stub::experimental_async::DeleteFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteFriend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* FriendService::Stub::AsyncDeleteFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::BaseReponse>::Create(channel_.get(), cq, rpcmethod_DeleteFriend_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* FriendService::Stub::PrepareAsyncDeleteFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::BaseReponse>::Create(channel_.get(), cq, rpcmethod_DeleteFriend_, context, request, false);
}

::grpc::Status FriendService::Stub::ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::srv::BaseReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeFriendStatus_, context, request, response);
}

void FriendService::Stub::experimental_async::ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeFriendStatus_, context, request, response, std::move(f));
}

void FriendService::Stub::experimental_async::ChangeFriendStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeFriendStatus_, context, request, response, std::move(f));
}

void FriendService::Stub::experimental_async::ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChangeFriendStatus_, context, request, response, reactor);
}

void FriendService::Stub::experimental_async::ChangeFriendStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChangeFriendStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* FriendService::Stub::AsyncChangeFriendStatusRaw(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::BaseReponse>::Create(channel_.get(), cq, rpcmethod_ChangeFriendStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* FriendService::Stub::PrepareAsyncChangeFriendStatusRaw(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::BaseReponse>::Create(channel_.get(), cq, rpcmethod_ChangeFriendStatus_, context, request, false);
}

FriendService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FriendService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FriendService::Service, ::srv::ListUserFriendsRequest, ::srv::ListUserFriendsReponse>(
          [](FriendService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::ListUserFriendsRequest* req,
             ::srv::ListUserFriendsReponse* resp) {
               return service->ListUserFriends(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FriendService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FriendService::Service, ::srv::BaseRequest, ::srv::BaseReponse>(
          [](FriendService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::BaseRequest* req,
             ::srv::BaseReponse* resp) {
               return service->CreateFriend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FriendService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FriendService::Service, ::srv::BaseRequest, ::srv::BaseReponse>(
          [](FriendService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::BaseRequest* req,
             ::srv::BaseReponse* resp) {
               return service->DeleteFriend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FriendService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FriendService::Service, ::srv::ChangeFriendStatusRequest, ::srv::BaseReponse>(
          [](FriendService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::ChangeFriendStatusRequest* req,
             ::srv::BaseReponse* resp) {
               return service->ChangeFriendStatus(ctx, req, resp);
             }, this)));
}

FriendService::Service::~Service() {
}

::grpc::Status FriendService::Service::ListUserFriends(::grpc::ServerContext* context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FriendService::Service::CreateFriend(::grpc::ServerContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FriendService::Service::DeleteFriend(::grpc::ServerContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FriendService::Service::ChangeFriendStatus(::grpc::ServerContext* context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace srv

