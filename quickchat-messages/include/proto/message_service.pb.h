// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fservice_2eproto;
namespace srv {
class GetLastMessageReponse;
class GetLastMessageReponseDefaultTypeInternal;
extern GetLastMessageReponseDefaultTypeInternal _GetLastMessageReponse_default_instance_;
class GetLastMessageRequest;
class GetLastMessageRequestDefaultTypeInternal;
extern GetLastMessageRequestDefaultTypeInternal _GetLastMessageRequest_default_instance_;
class GetMessageReponse;
class GetMessageReponseDefaultTypeInternal;
extern GetMessageReponseDefaultTypeInternal _GetMessageReponse_default_instance_;
class GetMessageRequest;
class GetMessageRequestDefaultTypeInternal;
extern GetMessageRequestDefaultTypeInternal _GetMessageRequest_default_instance_;
class GetMessagesReponse;
class GetMessagesReponseDefaultTypeInternal;
extern GetMessagesReponseDefaultTypeInternal _GetMessagesReponse_default_instance_;
class GetMessagesRequest;
class GetMessagesRequestDefaultTypeInternal;
extern GetMessagesRequestDefaultTypeInternal _GetMessagesRequest_default_instance_;
}  // namespace srv
PROTOBUF_NAMESPACE_OPEN
template<> ::srv::GetLastMessageReponse* Arena::CreateMaybeMessage<::srv::GetLastMessageReponse>(Arena*);
template<> ::srv::GetLastMessageRequest* Arena::CreateMaybeMessage<::srv::GetLastMessageRequest>(Arena*);
template<> ::srv::GetMessageReponse* Arena::CreateMaybeMessage<::srv::GetMessageReponse>(Arena*);
template<> ::srv::GetMessageRequest* Arena::CreateMaybeMessage<::srv::GetMessageRequest>(Arena*);
template<> ::srv::GetMessagesReponse* Arena::CreateMaybeMessage<::srv::GetMessagesReponse>(Arena*);
template<> ::srv::GetMessagesRequest* Arena::CreateMaybeMessage<::srv::GetMessagesRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace srv {

// ===================================================================

class GetMessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.GetMessageRequest) */ {
 public:
  inline GetMessageRequest() : GetMessageRequest(nullptr) {};
  virtual ~GetMessageRequest();

  GetMessageRequest(const GetMessageRequest& from);
  GetMessageRequest(GetMessageRequest&& from) noexcept
    : GetMessageRequest() {
    *this = ::std::move(from);
  }

  inline GetMessageRequest& operator=(const GetMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessageRequest& operator=(GetMessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessageRequest* internal_default_instance() {
    return reinterpret_cast<const GetMessageRequest*>(
               &_GetMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetMessageRequest& a, GetMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMessageRequest* New() const final {
    return CreateMaybeMessage<GetMessageRequest>(nullptr);
  }

  GetMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMessageRequest& from);
  void MergeFrom(const GetMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.GetMessageRequest";
  }
  protected:
  explicit GetMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5fservice_2eproto);
    return ::descriptor_table_message_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kMessageIdFieldNumber = 2,
  };
  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 2;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.GetMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMessageReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.GetMessageReponse) */ {
 public:
  inline GetMessageReponse() : GetMessageReponse(nullptr) {};
  virtual ~GetMessageReponse();

  GetMessageReponse(const GetMessageReponse& from);
  GetMessageReponse(GetMessageReponse&& from) noexcept
    : GetMessageReponse() {
    *this = ::std::move(from);
  }

  inline GetMessageReponse& operator=(const GetMessageReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessageReponse& operator=(GetMessageReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMessageReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessageReponse* internal_default_instance() {
    return reinterpret_cast<const GetMessageReponse*>(
               &_GetMessageReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetMessageReponse& a, GetMessageReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessageReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessageReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMessageReponse* New() const final {
    return CreateMaybeMessage<GetMessageReponse>(nullptr);
  }

  GetMessageReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMessageReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMessageReponse& from);
  void MergeFrom(const GetMessageReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.GetMessageReponse";
  }
  protected:
  explicit GetMessageReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5fservice_2eproto);
    return ::descriptor_table_message_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // .msg.Message message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::msg::Message& message() const;
  ::msg::Message* release_message();
  ::msg::Message* mutable_message();
  void set_allocated_message(::msg::Message* message);
  private:
  const ::msg::Message& _internal_message() const;
  ::msg::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::msg::Message* message);
  ::msg::Message* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:srv.GetMessageReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::Message* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMessagesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.GetMessagesRequest) */ {
 public:
  inline GetMessagesRequest() : GetMessagesRequest(nullptr) {};
  virtual ~GetMessagesRequest();

  GetMessagesRequest(const GetMessagesRequest& from);
  GetMessagesRequest(GetMessagesRequest&& from) noexcept
    : GetMessagesRequest() {
    *this = ::std::move(from);
  }

  inline GetMessagesRequest& operator=(const GetMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessagesRequest& operator=(GetMessagesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMessagesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const GetMessagesRequest*>(
               &_GetMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetMessagesRequest& a, GetMessagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessagesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMessagesRequest* New() const final {
    return CreateMaybeMessage<GetMessagesRequest>(nullptr);
  }

  GetMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMessagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMessagesRequest& from);
  void MergeFrom(const GetMessagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.GetMessagesRequest";
  }
  protected:
  explicit GetMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5fservice_2eproto);
    return ::descriptor_table_message_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kMessageIdFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 2;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.GetMessagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMessagesReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.GetMessagesReponse) */ {
 public:
  inline GetMessagesReponse() : GetMessagesReponse(nullptr) {};
  virtual ~GetMessagesReponse();

  GetMessagesReponse(const GetMessagesReponse& from);
  GetMessagesReponse(GetMessagesReponse&& from) noexcept
    : GetMessagesReponse() {
    *this = ::std::move(from);
  }

  inline GetMessagesReponse& operator=(const GetMessagesReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessagesReponse& operator=(GetMessagesReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMessagesReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessagesReponse* internal_default_instance() {
    return reinterpret_cast<const GetMessagesReponse*>(
               &_GetMessagesReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetMessagesReponse& a, GetMessagesReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessagesReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessagesReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMessagesReponse* New() const final {
    return CreateMaybeMessage<GetMessagesReponse>(nullptr);
  }

  GetMessagesReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMessagesReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMessagesReponse& from);
  void MergeFrom(const GetMessagesReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessagesReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.GetMessagesReponse";
  }
  protected:
  explicit GetMessagesReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5fservice_2eproto);
    return ::descriptor_table_message_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .msg.Message messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::msg::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message >*
      mutable_messages();
  private:
  const ::msg::Message& _internal_messages(int index) const;
  ::msg::Message* _internal_add_messages();
  public:
  const ::msg::Message& messages(int index) const;
  ::msg::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message >&
      messages() const;

  // @@protoc_insertion_point(class_scope:srv.GetMessagesReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLastMessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.GetLastMessageRequest) */ {
 public:
  inline GetLastMessageRequest() : GetLastMessageRequest(nullptr) {};
  virtual ~GetLastMessageRequest();

  GetLastMessageRequest(const GetLastMessageRequest& from);
  GetLastMessageRequest(GetLastMessageRequest&& from) noexcept
    : GetLastMessageRequest() {
    *this = ::std::move(from);
  }

  inline GetLastMessageRequest& operator=(const GetLastMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastMessageRequest& operator=(GetLastMessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLastMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastMessageRequest* internal_default_instance() {
    return reinterpret_cast<const GetLastMessageRequest*>(
               &_GetLastMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetLastMessageRequest& a, GetLastMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastMessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastMessageRequest* New() const final {
    return CreateMaybeMessage<GetLastMessageRequest>(nullptr);
  }

  GetLastMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLastMessageRequest& from);
  void MergeFrom(const GetLastMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLastMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.GetLastMessageRequest";
  }
  protected:
  explicit GetLastMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5fservice_2eproto);
    return ::descriptor_table_message_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.GetLastMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLastMessageReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.GetLastMessageReponse) */ {
 public:
  inline GetLastMessageReponse() : GetLastMessageReponse(nullptr) {};
  virtual ~GetLastMessageReponse();

  GetLastMessageReponse(const GetLastMessageReponse& from);
  GetLastMessageReponse(GetLastMessageReponse&& from) noexcept
    : GetLastMessageReponse() {
    *this = ::std::move(from);
  }

  inline GetLastMessageReponse& operator=(const GetLastMessageReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastMessageReponse& operator=(GetLastMessageReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLastMessageReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastMessageReponse* internal_default_instance() {
    return reinterpret_cast<const GetLastMessageReponse*>(
               &_GetLastMessageReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetLastMessageReponse& a, GetLastMessageReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastMessageReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastMessageReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastMessageReponse* New() const final {
    return CreateMaybeMessage<GetLastMessageReponse>(nullptr);
  }

  GetLastMessageReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastMessageReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLastMessageReponse& from);
  void MergeFrom(const GetLastMessageReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLastMessageReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.GetLastMessageReponse";
  }
  protected:
  explicit GetLastMessageReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_5fservice_2eproto);
    return ::descriptor_table_message_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // .msg.Message message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::msg::Message& message() const;
  ::msg::Message* release_message();
  ::msg::Message* mutable_message();
  void set_allocated_message(::msg::Message* message);
  private:
  const ::msg::Message& _internal_message() const;
  ::msg::Message* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::msg::Message* message);
  ::msg::Message* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:srv.GetLastMessageReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::Message* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetMessageRequest

// uint64 channel_id = 1;
inline void GetMessageRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessageRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessageRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:srv.GetMessageRequest.channel_id)
  return _internal_channel_id();
}
inline void GetMessageRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void GetMessageRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:srv.GetMessageRequest.channel_id)
}

// uint64 message_id = 2;
inline void GetMessageRequest::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessageRequest::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessageRequest::message_id() const {
  // @@protoc_insertion_point(field_get:srv.GetMessageRequest.message_id)
  return _internal_message_id();
}
inline void GetMessageRequest::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void GetMessageRequest::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:srv.GetMessageRequest.message_id)
}

// -------------------------------------------------------------------

// GetMessageReponse

// .msg.Message message = 1;
inline bool GetMessageReponse::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool GetMessageReponse::has_message() const {
  return _internal_has_message();
}
inline const ::msg::Message& GetMessageReponse::_internal_message() const {
  const ::msg::Message* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Message*>(
      &::msg::_Message_default_instance_);
}
inline const ::msg::Message& GetMessageReponse::message() const {
  // @@protoc_insertion_point(field_get:srv.GetMessageReponse.message)
  return _internal_message();
}
inline void GetMessageReponse::unsafe_arena_set_allocated_message(
    ::msg::Message* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.GetMessageReponse.message)
}
inline ::msg::Message* GetMessageReponse::release_message() {
  auto temp = unsafe_arena_release_message();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Message* GetMessageReponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:srv.GetMessageReponse.message)
  
  ::msg::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::msg::Message* GetMessageReponse::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Message>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::msg::Message* GetMessageReponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:srv.GetMessageReponse.message)
  return _internal_mutable_message();
}
inline void GetMessageReponse::set_allocated_message(::msg::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:srv.GetMessageReponse.message)
}

// -------------------------------------------------------------------

// GetMessagesRequest

// uint64 channel_id = 1;
inline void GetMessagesRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessagesRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessagesRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:srv.GetMessagesRequest.channel_id)
  return _internal_channel_id();
}
inline void GetMessagesRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void GetMessagesRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:srv.GetMessagesRequest.channel_id)
}

// uint64 message_id = 2;
inline void GetMessagesRequest::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessagesRequest::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetMessagesRequest::message_id() const {
  // @@protoc_insertion_point(field_get:srv.GetMessagesRequest.message_id)
  return _internal_message_id();
}
inline void GetMessagesRequest::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void GetMessagesRequest::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:srv.GetMessagesRequest.message_id)
}

// int32 count = 3;
inline void GetMessagesRequest::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMessagesRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMessagesRequest::count() const {
  // @@protoc_insertion_point(field_get:srv.GetMessagesRequest.count)
  return _internal_count();
}
inline void GetMessagesRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void GetMessagesRequest::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:srv.GetMessagesRequest.count)
}

// -------------------------------------------------------------------

// GetMessagesReponse

// repeated .msg.Message messages = 1;
inline int GetMessagesReponse::_internal_messages_size() const {
  return messages_.size();
}
inline int GetMessagesReponse::messages_size() const {
  return _internal_messages_size();
}
inline ::msg::Message* GetMessagesReponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:srv.GetMessagesReponse.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message >*
GetMessagesReponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:srv.GetMessagesReponse.messages)
  return &messages_;
}
inline const ::msg::Message& GetMessagesReponse::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::msg::Message& GetMessagesReponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:srv.GetMessagesReponse.messages)
  return _internal_messages(index);
}
inline ::msg::Message* GetMessagesReponse::_internal_add_messages() {
  return messages_.Add();
}
inline ::msg::Message* GetMessagesReponse::add_messages() {
  // @@protoc_insertion_point(field_add:srv.GetMessagesReponse.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message >&
GetMessagesReponse::messages() const {
  // @@protoc_insertion_point(field_list:srv.GetMessagesReponse.messages)
  return messages_;
}

// -------------------------------------------------------------------

// GetLastMessageRequest

// uint64 channel_id = 1;
inline void GetLastMessageRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetLastMessageRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetLastMessageRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:srv.GetLastMessageRequest.channel_id)
  return _internal_channel_id();
}
inline void GetLastMessageRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void GetLastMessageRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:srv.GetLastMessageRequest.channel_id)
}

// -------------------------------------------------------------------

// GetLastMessageReponse

// .msg.Message message = 1;
inline bool GetLastMessageReponse::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool GetLastMessageReponse::has_message() const {
  return _internal_has_message();
}
inline const ::msg::Message& GetLastMessageReponse::_internal_message() const {
  const ::msg::Message* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Message*>(
      &::msg::_Message_default_instance_);
}
inline const ::msg::Message& GetLastMessageReponse::message() const {
  // @@protoc_insertion_point(field_get:srv.GetLastMessageReponse.message)
  return _internal_message();
}
inline void GetLastMessageReponse::unsafe_arena_set_allocated_message(
    ::msg::Message* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.GetLastMessageReponse.message)
}
inline ::msg::Message* GetLastMessageReponse::release_message() {
  auto temp = unsafe_arena_release_message();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Message* GetLastMessageReponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:srv.GetLastMessageReponse.message)
  
  ::msg::Message* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::msg::Message* GetLastMessageReponse::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Message>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::msg::Message* GetLastMessageReponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:srv.GetLastMessageReponse.message)
  return _internal_mutable_message();
}
inline void GetLastMessageReponse::set_allocated_message(::msg::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:srv.GetLastMessageReponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5fservice_2eproto
