// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message_service.proto
#ifndef GRPC_message_5fservice_2eproto__INCLUDED
#define GRPC_message_5fservice_2eproto__INCLUDED

#include "message_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace srv {

class MessageService final {
 public:
  static constexpr char const* service_full_name() {
    return "srv.MessageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest& request, ::srv::GetMessageReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessageReponse>> AsyncGetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessageReponse>>(AsyncGetMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessageReponse>> PrepareAsyncGetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessageReponse>>(PrepareAsyncGetMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::srv::GetMessagesReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessagesReponse>> AsyncGetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessagesReponse>>(AsyncGetMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessagesReponse>> PrepareAsyncGetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessagesReponse>>(PrepareAsyncGetMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::srv::GetLastMessageReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetLastMessageReponse>> AsyncGetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetLastMessageReponse>>(AsyncGetLastMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetLastMessageReponse>> PrepareAsyncGetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetLastMessageReponse>>(PrepareAsyncGetLastMessageRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest* request, ::srv::GetMessageReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessageReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest* request, ::srv::GetMessageReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest* request, ::srv::GetMessageReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessageReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessageReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMessages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessagesReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMessages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessagesReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMessages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessagesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLastMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetLastMessageReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLastMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetLastMessageReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLastMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetLastMessageReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessageReponse>* AsyncGetMessageRaw(::grpc::ClientContext* context, const ::srv::GetMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessageReponse>* PrepareAsyncGetMessageRaw(::grpc::ClientContext* context, const ::srv::GetMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessagesReponse>* AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetMessagesReponse>* PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetLastMessageReponse>* AsyncGetLastMessageRaw(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::GetLastMessageReponse>* PrepareAsyncGetLastMessageRaw(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest& request, ::srv::GetMessageReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetMessageReponse>> AsyncGetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetMessageReponse>>(AsyncGetMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetMessageReponse>> PrepareAsyncGetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetMessageReponse>>(PrepareAsyncGetMessageRaw(context, request, cq));
    }
    ::grpc::Status GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::srv::GetMessagesReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetMessagesReponse>> AsyncGetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetMessagesReponse>>(AsyncGetMessagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetMessagesReponse>> PrepareAsyncGetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetMessagesReponse>>(PrepareAsyncGetMessagesRaw(context, request, cq));
    }
    ::grpc::Status GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::srv::GetLastMessageReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetLastMessageReponse>> AsyncGetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetLastMessageReponse>>(AsyncGetLastMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetLastMessageReponse>> PrepareAsyncGetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::GetLastMessageReponse>>(PrepareAsyncGetLastMessageRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest* request, ::srv::GetMessageReponse* response, std::function<void(::grpc::Status)>) override;
      void GetMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessageReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest* request, ::srv::GetMessageReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMessage(::grpc::ClientContext* context, const ::srv::GetMessageRequest* request, ::srv::GetMessageReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessageReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessageReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response, std::function<void(::grpc::Status)>) override;
      void GetMessages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessagesReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMessages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessagesReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMessages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessagesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response, std::function<void(::grpc::Status)>) override;
      void GetLastMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetLastMessageReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLastMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetLastMessageReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLastMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetLastMessageReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::srv::GetMessageReponse>* AsyncGetMessageRaw(::grpc::ClientContext* context, const ::srv::GetMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::GetMessageReponse>* PrepareAsyncGetMessageRaw(::grpc::ClientContext* context, const ::srv::GetMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::GetMessagesReponse>* AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::GetMessagesReponse>* PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::GetLastMessageReponse>* AsyncGetLastMessageRaw(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::GetLastMessageReponse>* PrepareAsyncGetLastMessageRaw(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLastMessage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetMessage(::grpc::ServerContext* context, const ::srv::GetMessageRequest* request, ::srv::GetMessageReponse* response);
    virtual ::grpc::Status GetMessages(::grpc::ServerContext* context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response);
    virtual ::grpc::Status GetLastMessage(::grpc::ServerContext* context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessage(::grpc::ServerContext* /*context*/, const ::srv::GetMessageRequest* /*request*/, ::srv::GetMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessage(::grpc::ServerContext* context, ::srv::GetMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::GetMessageReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMessages() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::srv::GetMessagesRequest* /*request*/, ::srv::GetMessagesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessages(::grpc::ServerContext* context, ::srv::GetMessagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::GetMessagesReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLastMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLastMessage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetLastMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastMessage(::grpc::ServerContext* /*context*/, const ::srv::GetLastMessageRequest* /*request*/, ::srv::GetLastMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastMessage(::grpc::ServerContext* context, ::srv::GetLastMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::GetLastMessageReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMessage<WithAsyncMethod_GetMessages<WithAsyncMethod_GetLastMessage<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::GetMessageRequest, ::srv::GetMessageReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::GetMessageRequest* request, ::srv::GetMessageReponse* response) { return this->GetMessage(context, request, response); }));}
    void SetMessageAllocatorFor_GetMessage(
        ::grpc::experimental::MessageAllocator< ::srv::GetMessageRequest, ::srv::GetMessageReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::GetMessageRequest, ::srv::GetMessageReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessage(::grpc::ServerContext* /*context*/, const ::srv::GetMessageRequest* /*request*/, ::srv::GetMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::GetMessageRequest* /*request*/, ::srv::GetMessageReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::GetMessageRequest* /*request*/, ::srv::GetMessageReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMessages() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::GetMessagesRequest, ::srv::GetMessagesReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response) { return this->GetMessages(context, request, response); }));}
    void SetMessageAllocatorFor_GetMessages(
        ::grpc::experimental::MessageAllocator< ::srv::GetMessagesRequest, ::srv::GetMessagesReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::GetMessagesRequest, ::srv::GetMessagesReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::srv::GetMessagesRequest* /*request*/, ::srv::GetMessagesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::GetMessagesRequest* /*request*/, ::srv::GetMessagesReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMessages(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::GetMessagesRequest* /*request*/, ::srv::GetMessagesReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLastMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLastMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::GetLastMessageRequest, ::srv::GetLastMessageReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response) { return this->GetLastMessage(context, request, response); }));}
    void SetMessageAllocatorFor_GetLastMessage(
        ::grpc::experimental::MessageAllocator< ::srv::GetLastMessageRequest, ::srv::GetLastMessageReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::GetLastMessageRequest, ::srv::GetLastMessageReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLastMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastMessage(::grpc::ServerContext* /*context*/, const ::srv::GetLastMessageRequest* /*request*/, ::srv::GetLastMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLastMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::GetLastMessageRequest* /*request*/, ::srv::GetLastMessageReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLastMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::GetLastMessageRequest* /*request*/, ::srv::GetLastMessageReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetMessage<ExperimentalWithCallbackMethod_GetMessages<ExperimentalWithCallbackMethod_GetLastMessage<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetMessage<ExperimentalWithCallbackMethod_GetMessages<ExperimentalWithCallbackMethod_GetLastMessage<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessage(::grpc::ServerContext* /*context*/, const ::srv::GetMessageRequest* /*request*/, ::srv::GetMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMessages() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::srv::GetMessagesRequest* /*request*/, ::srv::GetMessagesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLastMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLastMessage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetLastMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastMessage(::grpc::ServerContext* /*context*/, const ::srv::GetLastMessageRequest* /*request*/, ::srv::GetLastMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMessage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessage(::grpc::ServerContext* /*context*/, const ::srv::GetMessageRequest* /*request*/, ::srv::GetMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMessages() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::srv::GetMessagesRequest* /*request*/, ::srv::GetMessagesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLastMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLastMessage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetLastMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastMessage(::grpc::ServerContext* /*context*/, const ::srv::GetLastMessageRequest* /*request*/, ::srv::GetLastMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLastMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMessage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessage(::grpc::ServerContext* /*context*/, const ::srv::GetMessageRequest* /*request*/, ::srv::GetMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMessages() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMessages(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::srv::GetMessagesRequest* /*request*/, ::srv::GetMessagesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMessages(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLastMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLastMessage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLastMessage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLastMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLastMessage(::grpc::ServerContext* /*context*/, const ::srv::GetLastMessageRequest* /*request*/, ::srv::GetLastMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLastMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLastMessage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMessage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::GetMessageRequest, ::srv::GetMessageReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::GetMessageRequest, ::srv::GetMessageReponse>* streamer) {
                       return this->StreamedGetMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMessage(::grpc::ServerContext* /*context*/, const ::srv::GetMessageRequest* /*request*/, ::srv::GetMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::GetMessageRequest,::srv::GetMessageReponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMessages() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::GetMessagesRequest, ::srv::GetMessagesReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::GetMessagesRequest, ::srv::GetMessagesReponse>* streamer) {
                       return this->StreamedGetMessages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::srv::GetMessagesRequest* /*request*/, ::srv::GetMessagesReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMessages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::GetMessagesRequest,::srv::GetMessagesReponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLastMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLastMessage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::GetLastMessageRequest, ::srv::GetLastMessageReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::GetLastMessageRequest, ::srv::GetLastMessageReponse>* streamer) {
                       return this->StreamedGetLastMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLastMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLastMessage(::grpc::ServerContext* /*context*/, const ::srv::GetLastMessageRequest* /*request*/, ::srv::GetLastMessageReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLastMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::GetLastMessageRequest,::srv::GetLastMessageReponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMessage<WithStreamedUnaryMethod_GetMessages<WithStreamedUnaryMethod_GetLastMessage<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMessage<WithStreamedUnaryMethod_GetMessages<WithStreamedUnaryMethod_GetLastMessage<Service > > > StreamedService;
};

}  // namespace srv


#endif  // GRPC_message_5fservice_2eproto__INCLUDED
