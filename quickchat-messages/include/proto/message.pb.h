// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "chat_content.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace msg {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_Reaction;
class Message_ReactionDefaultTypeInternal;
extern Message_ReactionDefaultTypeInternal _Message_Reaction_default_instance_;
class Message_Seen;
class Message_SeenDefaultTypeInternal;
extern Message_SeenDefaultTypeInternal _Message_Seen_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::Message* Arena::CreateMaybeMessage<::msg::Message>(Arena*);
template<> ::msg::Message_Reaction* Arena::CreateMaybeMessage<::msg::Message_Reaction>(Arena*);
template<> ::msg::Message_Seen* Arena::CreateMaybeMessage<::msg::Message_Seen>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum ReactionType : int {
  UNKNOWN = 0,
  LOVE = 1,
  HAHA = 2,
  SURPRISE = 3,
  SAD = 4,
  ANGRY = 5,
  LIKE = 6,
  DISLIKE = 7,
  ReactionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReactionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReactionType_IsValid(int value);
constexpr ReactionType ReactionType_MIN = UNKNOWN;
constexpr ReactionType ReactionType_MAX = DISLIKE;
constexpr int ReactionType_ARRAYSIZE = ReactionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReactionType_descriptor();
template<typename T>
inline const std::string& ReactionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReactionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReactionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReactionType_descriptor(), enum_t_value);
}
inline bool ReactionType_Parse(
    const std::string& name, ReactionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReactionType>(
    ReactionType_descriptor(), name, value);
}
// ===================================================================

class Message_Reaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Message.Reaction) */ {
 public:
  inline Message_Reaction() : Message_Reaction(nullptr) {};
  virtual ~Message_Reaction();

  Message_Reaction(const Message_Reaction& from);
  Message_Reaction(Message_Reaction&& from) noexcept
    : Message_Reaction() {
    *this = ::std::move(from);
  }

  inline Message_Reaction& operator=(const Message_Reaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Reaction& operator=(Message_Reaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Reaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Reaction* internal_default_instance() {
    return reinterpret_cast<const Message_Reaction*>(
               &_Message_Reaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message_Reaction& a, Message_Reaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Reaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Reaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Reaction* New() const final {
    return CreateMaybeMessage<Message_Reaction>(nullptr);
  }

  Message_Reaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Reaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Reaction& from);
  void MergeFrom(const Message_Reaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Reaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Message.Reaction";
  }
  protected:
  explicit Message_Reaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .msg.ReactionType type = 2;
  void clear_type();
  ::msg::ReactionType type() const;
  void set_type(::msg::ReactionType value);
  private:
  ::msg::ReactionType _internal_type() const;
  void _internal_set_type(::msg::ReactionType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Message.Reaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Message_Seen PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Message.Seen) */ {
 public:
  inline Message_Seen() : Message_Seen(nullptr) {};
  virtual ~Message_Seen();

  Message_Seen(const Message_Seen& from);
  Message_Seen(Message_Seen&& from) noexcept
    : Message_Seen() {
    *this = ::std::move(from);
  }

  inline Message_Seen& operator=(const Message_Seen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Seen& operator=(Message_Seen&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Seen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Seen* internal_default_instance() {
    return reinterpret_cast<const Message_Seen*>(
               &_Message_Seen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_Seen& a, Message_Seen& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Seen* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Seen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Seen* New() const final {
    return CreateMaybeMessage<Message_Seen>(nullptr);
  }

  Message_Seen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Seen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Seen& from);
  void MergeFrom(const Message_Seen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Seen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Message.Seen";
  }
  protected:
  explicit Message_Seen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeenAtFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // .google.protobuf.Timestamp seen_at = 2;
  bool has_seen_at() const;
  private:
  bool _internal_has_seen_at() const;
  public:
  void clear_seen_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& seen_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_seen_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_seen_at();
  void set_allocated_seen_at(PROTOBUF_NAMESPACE_ID::Timestamp* seen_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_seen_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_seen_at();
  public:
  void unsafe_arena_set_allocated_seen_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* seen_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_seen_at();

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Message.Seen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* seen_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_Reaction Reaction;
  typedef Message_Seen Seen;

  // accessors -------------------------------------------------------

  enum : int {
    kSeensFieldNumber = 5,
    kReactionsFieldNumber = 6,
    kContentFieldNumber = 4,
    kCreateAtFieldNumber = 7,
    kChannelIdFieldNumber = 1,
    kMessageIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
  };
  // repeated .msg.Message.Seen seens = 5;
  int seens_size() const;
  private:
  int _internal_seens_size() const;
  public:
  void clear_seens();
  ::msg::Message_Seen* mutable_seens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message_Seen >*
      mutable_seens();
  private:
  const ::msg::Message_Seen& _internal_seens(int index) const;
  ::msg::Message_Seen* _internal_add_seens();
  public:
  const ::msg::Message_Seen& seens(int index) const;
  ::msg::Message_Seen* add_seens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message_Seen >&
      seens() const;

  // repeated .msg.Message.Reaction reactions = 6;
  int reactions_size() const;
  private:
  int _internal_reactions_size() const;
  public:
  void clear_reactions();
  ::msg::Message_Reaction* mutable_reactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message_Reaction >*
      mutable_reactions();
  private:
  const ::msg::Message_Reaction& _internal_reactions(int index) const;
  ::msg::Message_Reaction* _internal_add_reactions();
  public:
  const ::msg::Message_Reaction& reactions(int index) const;
  ::msg::Message_Reaction* add_reactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message_Reaction >&
      reactions() const;

  // .msg.ChatContent content = 4;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const ::msg::ChatContent& content() const;
  ::msg::ChatContent* release_content();
  ::msg::ChatContent* mutable_content();
  void set_allocated_content(::msg::ChatContent* content);
  private:
  const ::msg::ChatContent& _internal_content() const;
  ::msg::ChatContent* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      ::msg::ChatContent* content);
  ::msg::ChatContent* unsafe_arena_release_content();

  // .google.protobuf.Timestamp create_at = 7;
  bool has_create_at() const;
  private:
  bool _internal_has_create_at() const;
  public:
  void clear_create_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_at();
  void set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_at();
  public:
  void unsafe_arena_set_allocated_create_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_at();

  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 message_id = 2;
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 user_id = 3;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message_Seen > seens_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message_Reaction > reactions_;
  ::msg::ChatContent* content_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 message_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message_Reaction

// uint64 user_id = 1;
inline void Message_Reaction::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message_Reaction::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message_Reaction::user_id() const {
  // @@protoc_insertion_point(field_get:msg.Message.Reaction.user_id)
  return _internal_user_id();
}
inline void Message_Reaction::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void Message_Reaction::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:msg.Message.Reaction.user_id)
}

// .msg.ReactionType type = 2;
inline void Message_Reaction::clear_type() {
  type_ = 0;
}
inline ::msg::ReactionType Message_Reaction::_internal_type() const {
  return static_cast< ::msg::ReactionType >(type_);
}
inline ::msg::ReactionType Message_Reaction::type() const {
  // @@protoc_insertion_point(field_get:msg.Message.Reaction.type)
  return _internal_type();
}
inline void Message_Reaction::_internal_set_type(::msg::ReactionType value) {
  
  type_ = value;
}
inline void Message_Reaction::set_type(::msg::ReactionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.Message.Reaction.type)
}

// -------------------------------------------------------------------

// Message_Seen

// uint64 user_id = 1;
inline void Message_Seen::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message_Seen::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message_Seen::user_id() const {
  // @@protoc_insertion_point(field_get:msg.Message.Seen.user_id)
  return _internal_user_id();
}
inline void Message_Seen::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void Message_Seen::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:msg.Message.Seen.user_id)
}

// .google.protobuf.Timestamp seen_at = 2;
inline bool Message_Seen::_internal_has_seen_at() const {
  return this != internal_default_instance() && seen_at_ != nullptr;
}
inline bool Message_Seen::has_seen_at() const {
  return _internal_has_seen_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message_Seen::_internal_seen_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = seen_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message_Seen::seen_at() const {
  // @@protoc_insertion_point(field_get:msg.Message.Seen.seen_at)
  return _internal_seen_at();
}
inline void Message_Seen::unsafe_arena_set_allocated_seen_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* seen_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seen_at_);
  }
  seen_at_ = seen_at;
  if (seen_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Message.Seen.seen_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message_Seen::release_seen_at() {
  auto temp = unsafe_arena_release_seen_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message_Seen::unsafe_arena_release_seen_at() {
  // @@protoc_insertion_point(field_release:msg.Message.Seen.seen_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = seen_at_;
  seen_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message_Seen::_internal_mutable_seen_at() {
  
  if (seen_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    seen_at_ = p;
  }
  return seen_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message_Seen::mutable_seen_at() {
  // @@protoc_insertion_point(field_mutable:msg.Message.Seen.seen_at)
  return _internal_mutable_seen_at();
}
inline void Message_Seen::set_allocated_seen_at(PROTOBUF_NAMESPACE_ID::Timestamp* seen_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(seen_at_);
  }
  if (seen_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seen_at)->GetArena();
    if (message_arena != submessage_arena) {
      seen_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seen_at, submessage_arena);
    }
    
  } else {
    
  }
  seen_at_ = seen_at;
  // @@protoc_insertion_point(field_set_allocated:msg.Message.Seen.seen_at)
}

// -------------------------------------------------------------------

// Message

// uint64 channel_id = 1;
inline void Message::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::channel_id() const {
  // @@protoc_insertion_point(field_get:msg.Message.channel_id)
  return _internal_channel_id();
}
inline void Message::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void Message::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:msg.Message.channel_id)
}

// uint64 message_id = 2;
inline void Message::clear_message_id() {
  message_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::message_id() const {
  // @@protoc_insertion_point(field_get:msg.Message.message_id)
  return _internal_message_id();
}
inline void Message::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  message_id_ = value;
}
inline void Message::set_message_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:msg.Message.message_id)
}

// uint64 user_id = 3;
inline void Message::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::user_id() const {
  // @@protoc_insertion_point(field_get:msg.Message.user_id)
  return _internal_user_id();
}
inline void Message::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void Message::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:msg.Message.user_id)
}

// .msg.ChatContent content = 4;
inline bool Message::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool Message::has_content() const {
  return _internal_has_content();
}
inline const ::msg::ChatContent& Message::_internal_content() const {
  const ::msg::ChatContent* p = content_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::ChatContent*>(
      &::msg::_ChatContent_default_instance_);
}
inline const ::msg::ChatContent& Message::content() const {
  // @@protoc_insertion_point(field_get:msg.Message.content)
  return _internal_content();
}
inline void Message::unsafe_arena_set_allocated_content(
    ::msg::ChatContent* content) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Message.content)
}
inline ::msg::ChatContent* Message::release_content() {
  auto temp = unsafe_arena_release_content();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::ChatContent* Message::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:msg.Message.content)
  
  ::msg::ChatContent* temp = content_;
  content_ = nullptr;
  return temp;
}
inline ::msg::ChatContent* Message::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::ChatContent>(GetArena());
    content_ = p;
  }
  return content_;
}
inline ::msg::ChatContent* Message::mutable_content() {
  // @@protoc_insertion_point(field_mutable:msg.Message.content)
  return _internal_mutable_content();
}
inline void Message::set_allocated_content(::msg::ChatContent* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content)->GetArena();
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:msg.Message.content)
}

// repeated .msg.Message.Seen seens = 5;
inline int Message::_internal_seens_size() const {
  return seens_.size();
}
inline int Message::seens_size() const {
  return _internal_seens_size();
}
inline void Message::clear_seens() {
  seens_.Clear();
}
inline ::msg::Message_Seen* Message::mutable_seens(int index) {
  // @@protoc_insertion_point(field_mutable:msg.Message.seens)
  return seens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message_Seen >*
Message::mutable_seens() {
  // @@protoc_insertion_point(field_mutable_list:msg.Message.seens)
  return &seens_;
}
inline const ::msg::Message_Seen& Message::_internal_seens(int index) const {
  return seens_.Get(index);
}
inline const ::msg::Message_Seen& Message::seens(int index) const {
  // @@protoc_insertion_point(field_get:msg.Message.seens)
  return _internal_seens(index);
}
inline ::msg::Message_Seen* Message::_internal_add_seens() {
  return seens_.Add();
}
inline ::msg::Message_Seen* Message::add_seens() {
  // @@protoc_insertion_point(field_add:msg.Message.seens)
  return _internal_add_seens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message_Seen >&
Message::seens() const {
  // @@protoc_insertion_point(field_list:msg.Message.seens)
  return seens_;
}

// repeated .msg.Message.Reaction reactions = 6;
inline int Message::_internal_reactions_size() const {
  return reactions_.size();
}
inline int Message::reactions_size() const {
  return _internal_reactions_size();
}
inline void Message::clear_reactions() {
  reactions_.Clear();
}
inline ::msg::Message_Reaction* Message::mutable_reactions(int index) {
  // @@protoc_insertion_point(field_mutable:msg.Message.reactions)
  return reactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message_Reaction >*
Message::mutable_reactions() {
  // @@protoc_insertion_point(field_mutable_list:msg.Message.reactions)
  return &reactions_;
}
inline const ::msg::Message_Reaction& Message::_internal_reactions(int index) const {
  return reactions_.Get(index);
}
inline const ::msg::Message_Reaction& Message::reactions(int index) const {
  // @@protoc_insertion_point(field_get:msg.Message.reactions)
  return _internal_reactions(index);
}
inline ::msg::Message_Reaction* Message::_internal_add_reactions() {
  return reactions_.Add();
}
inline ::msg::Message_Reaction* Message::add_reactions() {
  // @@protoc_insertion_point(field_add:msg.Message.reactions)
  return _internal_add_reactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message_Reaction >&
Message::reactions() const {
  // @@protoc_insertion_point(field_list:msg.Message.reactions)
  return reactions_;
}

// .google.protobuf.Timestamp create_at = 7;
inline bool Message::_internal_has_create_at() const {
  return this != internal_default_instance() && create_at_ != nullptr;
}
inline bool Message::has_create_at() const {
  return _internal_has_create_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::_internal_create_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::create_at() const {
  // @@protoc_insertion_point(field_get:msg.Message.create_at)
  return _internal_create_at();
}
inline void Message::unsafe_arena_set_allocated_create_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  create_at_ = create_at;
  if (create_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.Message.create_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::release_create_at() {
  auto temp = unsafe_arena_release_create_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::unsafe_arena_release_create_at() {
  // @@protoc_insertion_point(field_release:msg.Message.create_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_at_;
  create_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::_internal_mutable_create_at() {
  
  if (create_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_at_ = p;
  }
  return create_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::mutable_create_at() {
  // @@protoc_insertion_point(field_mutable:msg.Message.create_at)
  return _internal_mutable_create_at();
}
inline void Message::set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  if (create_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at)->GetArena();
    if (message_arena != submessage_arena) {
      create_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_at, submessage_arena);
    }
    
  } else {
    
  }
  create_at_ = create_at;
  // @@protoc_insertion_point(field_set_allocated:msg.Message.create_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::ReactionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ReactionType>() {
  return ::msg::ReactionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
