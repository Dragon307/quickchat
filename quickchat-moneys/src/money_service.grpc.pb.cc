// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: money_service.proto

#include "money_service.pb.h"
#include "money_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace srv {

static const char* MoneyService_method_names[] = {
  "/srv.MoneyService/CreateAccount",
  "/srv.MoneyService/GetBalance",
  "/srv.MoneyService/Deposit",
  "/srv.MoneyService/WithDraw",
  "/srv.MoneyService/Transfer",
  "/srv.MoneyService/History",
};

std::unique_ptr< MoneyService::Stub> MoneyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MoneyService::Stub> stub(new MoneyService::Stub(channel));
  return stub;
}

MoneyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateAccount_(MoneyService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBalance_(MoneyService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Deposit_(MoneyService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WithDraw_(MoneyService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Transfer_(MoneyService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_History_(MoneyService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MoneyService::Stub::CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::msg::Account* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateAccount_, context, request, response);
}

void MoneyService::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, reactor);
}

void MoneyService::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::Account>* MoneyService::Stub::AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Account>::Create(channel_.get(), cq, rpcmethod_CreateAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::Account>* MoneyService::Stub::PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Account>::Create(channel_.get(), cq, rpcmethod_CreateAccount_, context, request, false);
}

::grpc::Status MoneyService::Stub::GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::msg::Account* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBalance_, context, request, response);
}

void MoneyService::Stub::experimental_async::GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::GetBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, reactor);
}

void MoneyService::Stub::experimental_async::GetBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::Account>* MoneyService::Stub::AsyncGetBalanceRaw(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Account>::Create(channel_.get(), cq, rpcmethod_GetBalance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::Account>* MoneyService::Stub::PrepareAsyncGetBalanceRaw(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Account>::Create(channel_.get(), cq, rpcmethod_GetBalance_, context, request, false);
}

::grpc::Status MoneyService::Stub::Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::msg::Account* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Deposit_, context, request, response);
}

void MoneyService::Stub::experimental_async::Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::Deposit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, reactor);
}

void MoneyService::Stub::experimental_async::Deposit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Deposit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::Account>* MoneyService::Stub::AsyncDepositRaw(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Account>::Create(channel_.get(), cq, rpcmethod_Deposit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::Account>* MoneyService::Stub::PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Account>::Create(channel_.get(), cq, rpcmethod_Deposit_, context, request, false);
}

::grpc::Status MoneyService::Stub::WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::msg::Account* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WithDraw_, context, request, response);
}

void MoneyService::Stub::experimental_async::WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WithDraw_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::WithDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WithDraw_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WithDraw_, context, request, response, reactor);
}

void MoneyService::Stub::experimental_async::WithDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WithDraw_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::Account>* MoneyService::Stub::AsyncWithDrawRaw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Account>::Create(channel_.get(), cq, rpcmethod_WithDraw_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::Account>* MoneyService::Stub::PrepareAsyncWithDrawRaw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Account>::Create(channel_.get(), cq, rpcmethod_WithDraw_, context, request, false);
}

::grpc::Status MoneyService::Stub::Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::msg::Account* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Transfer_, context, request, response);
}

void MoneyService::Stub::experimental_async::Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Transfer_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::Transfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Transfer_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Transfer_, context, request, response, reactor);
}

void MoneyService::Stub::experimental_async::Transfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Transfer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::Account>* MoneyService::Stub::AsyncTransferRaw(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Account>::Create(channel_.get(), cq, rpcmethod_Transfer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::Account>* MoneyService::Stub::PrepareAsyncTransferRaw(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Account>::Create(channel_.get(), cq, rpcmethod_Transfer_, context, request, false);
}

::grpc::Status MoneyService::Stub::History(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::srv::HistoryReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_History_, context, request, response);
}

void MoneyService::Stub::experimental_async::History(::grpc::ClientContext* context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_History_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::History(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::HistoryReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_History_, context, request, response, std::move(f));
}

void MoneyService::Stub::experimental_async::History(::grpc::ClientContext* context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_History_, context, request, response, reactor);
}

void MoneyService::Stub::experimental_async::History(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::HistoryReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_History_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srv::HistoryReponse>* MoneyService::Stub::AsyncHistoryRaw(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::HistoryReponse>::Create(channel_.get(), cq, rpcmethod_History_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::srv::HistoryReponse>* MoneyService::Stub::PrepareAsyncHistoryRaw(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::HistoryReponse>::Create(channel_.get(), cq, rpcmethod_History_, context, request, false);
}

MoneyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MoneyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MoneyService::Service, ::srv::CreateAccountRequest, ::msg::Account>(
          [](MoneyService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::CreateAccountRequest* req,
             ::msg::Account* resp) {
               return service->CreateAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MoneyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MoneyService::Service, ::srv::GetBalanceRequest, ::msg::Account>(
          [](MoneyService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::GetBalanceRequest* req,
             ::msg::Account* resp) {
               return service->GetBalance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MoneyService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MoneyService::Service, ::srv::DepositRequest, ::msg::Account>(
          [](MoneyService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::DepositRequest* req,
             ::msg::Account* resp) {
               return service->Deposit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MoneyService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MoneyService::Service, ::srv::WithDrawRequest, ::msg::Account>(
          [](MoneyService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::WithDrawRequest* req,
             ::msg::Account* resp) {
               return service->WithDraw(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MoneyService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MoneyService::Service, ::srv::TransferRequest, ::msg::Account>(
          [](MoneyService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::TransferRequest* req,
             ::msg::Account* resp) {
               return service->Transfer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MoneyService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MoneyService::Service, ::srv::HistoryRequest, ::srv::HistoryReponse>(
          [](MoneyService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::HistoryRequest* req,
             ::srv::HistoryReponse* resp) {
               return service->History(ctx, req, resp);
             }, this)));
}

MoneyService::Service::~Service() {
}

::grpc::Status MoneyService::Service::CreateAccount(::grpc::ServerContext* context, const ::srv::CreateAccountRequest* request, ::msg::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MoneyService::Service::GetBalance(::grpc::ServerContext* context, const ::srv::GetBalanceRequest* request, ::msg::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MoneyService::Service::Deposit(::grpc::ServerContext* context, const ::srv::DepositRequest* request, ::msg::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MoneyService::Service::WithDraw(::grpc::ServerContext* context, const ::srv::WithDrawRequest* request, ::msg::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MoneyService::Service::Transfer(::grpc::ServerContext* context, const ::srv::TransferRequest* request, ::msg::Account* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MoneyService::Service::History(::grpc::ServerContext* context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace srv

