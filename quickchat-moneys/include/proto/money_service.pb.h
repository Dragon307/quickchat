// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: money_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_money_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_money_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "account.pb.h"
#include "history.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_money_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_money_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_money_5fservice_2eproto;
namespace srv {
class CreateAccountRequest;
class CreateAccountRequestDefaultTypeInternal;
extern CreateAccountRequestDefaultTypeInternal _CreateAccountRequest_default_instance_;
class DepositRequest;
class DepositRequestDefaultTypeInternal;
extern DepositRequestDefaultTypeInternal _DepositRequest_default_instance_;
class GetBalanceRequest;
class GetBalanceRequestDefaultTypeInternal;
extern GetBalanceRequestDefaultTypeInternal _GetBalanceRequest_default_instance_;
class HistoryReponse;
class HistoryReponseDefaultTypeInternal;
extern HistoryReponseDefaultTypeInternal _HistoryReponse_default_instance_;
class HistoryRequest;
class HistoryRequestDefaultTypeInternal;
extern HistoryRequestDefaultTypeInternal _HistoryRequest_default_instance_;
class TransferRequest;
class TransferRequestDefaultTypeInternal;
extern TransferRequestDefaultTypeInternal _TransferRequest_default_instance_;
class WithDrawRequest;
class WithDrawRequestDefaultTypeInternal;
extern WithDrawRequestDefaultTypeInternal _WithDrawRequest_default_instance_;
}  // namespace srv
PROTOBUF_NAMESPACE_OPEN
template<> ::srv::CreateAccountRequest* Arena::CreateMaybeMessage<::srv::CreateAccountRequest>(Arena*);
template<> ::srv::DepositRequest* Arena::CreateMaybeMessage<::srv::DepositRequest>(Arena*);
template<> ::srv::GetBalanceRequest* Arena::CreateMaybeMessage<::srv::GetBalanceRequest>(Arena*);
template<> ::srv::HistoryReponse* Arena::CreateMaybeMessage<::srv::HistoryReponse>(Arena*);
template<> ::srv::HistoryRequest* Arena::CreateMaybeMessage<::srv::HistoryRequest>(Arena*);
template<> ::srv::TransferRequest* Arena::CreateMaybeMessage<::srv::TransferRequest>(Arena*);
template<> ::srv::WithDrawRequest* Arena::CreateMaybeMessage<::srv::WithDrawRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace srv {

// ===================================================================

class CreateAccountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.CreateAccountRequest) */ {
 public:
  inline CreateAccountRequest() : CreateAccountRequest(nullptr) {};
  virtual ~CreateAccountRequest();

  CreateAccountRequest(const CreateAccountRequest& from);
  CreateAccountRequest(CreateAccountRequest&& from) noexcept
    : CreateAccountRequest() {
    *this = ::std::move(from);
  }

  inline CreateAccountRequest& operator=(const CreateAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountRequest& operator=(CreateAccountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAccountRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAccountRequest*>(
               &_CreateAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateAccountRequest& a, CreateAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountRequest* New() const final {
    return CreateMaybeMessage<CreateAccountRequest>(nullptr);
  }

  CreateAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountRequest& from);
  void MergeFrom(const CreateAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.CreateAccountRequest";
  }
  protected:
  explicit CreateAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_money_5fservice_2eproto);
    return ::descriptor_table_money_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.CreateAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_money_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DepositRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.DepositRequest) */ {
 public:
  inline DepositRequest() : DepositRequest(nullptr) {};
  virtual ~DepositRequest();

  DepositRequest(const DepositRequest& from);
  DepositRequest(DepositRequest&& from) noexcept
    : DepositRequest() {
    *this = ::std::move(from);
  }

  inline DepositRequest& operator=(const DepositRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositRequest& operator=(DepositRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DepositRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DepositRequest* internal_default_instance() {
    return reinterpret_cast<const DepositRequest*>(
               &_DepositRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DepositRequest& a, DepositRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DepositRequest* New() const final {
    return CreateMaybeMessage<DepositRequest>(nullptr);
  }

  DepositRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DepositRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DepositRequest& from);
  void MergeFrom(const DepositRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.DepositRequest";
  }
  protected:
  explicit DepositRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_money_5fservice_2eproto);
    return ::descriptor_table_money_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCreateAtFieldNumber = 4,
    kUserIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp create_at = 4;
  bool has_create_at() const;
  private:
  bool _internal_has_create_at() const;
  public:
  void clear_create_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_at();
  void set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_at();
  public:
  void unsafe_arena_set_allocated_create_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_at();

  // uint64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.DepositRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_money_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WithDrawRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.WithDrawRequest) */ {
 public:
  inline WithDrawRequest() : WithDrawRequest(nullptr) {};
  virtual ~WithDrawRequest();

  WithDrawRequest(const WithDrawRequest& from);
  WithDrawRequest(WithDrawRequest&& from) noexcept
    : WithDrawRequest() {
    *this = ::std::move(from);
  }

  inline WithDrawRequest& operator=(const WithDrawRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WithDrawRequest& operator=(WithDrawRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WithDrawRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WithDrawRequest* internal_default_instance() {
    return reinterpret_cast<const WithDrawRequest*>(
               &_WithDrawRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WithDrawRequest& a, WithDrawRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WithDrawRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WithDrawRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WithDrawRequest* New() const final {
    return CreateMaybeMessage<WithDrawRequest>(nullptr);
  }

  WithDrawRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WithDrawRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WithDrawRequest& from);
  void MergeFrom(const WithDrawRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WithDrawRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.WithDrawRequest";
  }
  protected:
  explicit WithDrawRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_money_5fservice_2eproto);
    return ::descriptor_table_money_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCreateAtFieldNumber = 4,
    kUserIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp create_at = 4;
  bool has_create_at() const;
  private:
  bool _internal_has_create_at() const;
  public:
  void clear_create_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_at();
  void set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_at();
  public:
  void unsafe_arena_set_allocated_create_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_at();

  // uint64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 amount = 3;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.WithDrawRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_money_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetBalanceRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.GetBalanceRequest) */ {
 public:
  inline GetBalanceRequest() : GetBalanceRequest(nullptr) {};
  virtual ~GetBalanceRequest();

  GetBalanceRequest(const GetBalanceRequest& from);
  GetBalanceRequest(GetBalanceRequest&& from) noexcept
    : GetBalanceRequest() {
    *this = ::std::move(from);
  }

  inline GetBalanceRequest& operator=(const GetBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBalanceRequest& operator=(GetBalanceRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBalanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const GetBalanceRequest*>(
               &_GetBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetBalanceRequest& a, GetBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBalanceRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBalanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBalanceRequest* New() const final {
    return CreateMaybeMessage<GetBalanceRequest>(nullptr);
  }

  GetBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBalanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBalanceRequest& from);
  void MergeFrom(const GetBalanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBalanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.GetBalanceRequest";
  }
  protected:
  explicit GetBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_money_5fservice_2eproto);
    return ::descriptor_table_money_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateAtFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // .google.protobuf.Timestamp create_at = 2;
  bool has_create_at() const;
  private:
  bool _internal_has_create_at() const;
  public:
  void clear_create_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_at();
  void set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_at();
  public:
  void unsafe_arena_set_allocated_create_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_at();

  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.GetBalanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_money_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TransferRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.TransferRequest) */ {
 public:
  inline TransferRequest() : TransferRequest(nullptr) {};
  virtual ~TransferRequest();

  TransferRequest(const TransferRequest& from);
  TransferRequest(TransferRequest&& from) noexcept
    : TransferRequest() {
    *this = ::std::move(from);
  }

  inline TransferRequest& operator=(const TransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferRequest& operator=(TransferRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferRequest* internal_default_instance() {
    return reinterpret_cast<const TransferRequest*>(
               &_TransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransferRequest& a, TransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferRequest* New() const final {
    return CreateMaybeMessage<TransferRequest>(nullptr);
  }

  TransferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferRequest& from);
  void MergeFrom(const TransferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.TransferRequest";
  }
  protected:
  explicit TransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_money_5fservice_2eproto);
    return ::descriptor_table_money_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMessageFieldNumber = 5,
    kCreateAtFieldNumber = 6,
    kUserIdFieldNumber = 2,
    kToUserFieldNumber = 3,
    kAmountFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string message = 5;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp create_at = 6;
  bool has_create_at() const;
  private:
  bool _internal_has_create_at() const;
  public:
  void clear_create_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_at();
  void set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_at();
  public:
  void unsafe_arena_set_allocated_create_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_at();

  // uint64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 to_user = 3;
  void clear_to_user();
  ::PROTOBUF_NAMESPACE_ID::uint64 to_user() const;
  void set_to_user(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_to_user() const;
  void _internal_set_to_user(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 amount = 4;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.TransferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_at_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_user_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_money_5fservice_2eproto;
};
// -------------------------------------------------------------------

class HistoryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.HistoryRequest) */ {
 public:
  inline HistoryRequest() : HistoryRequest(nullptr) {};
  virtual ~HistoryRequest();

  HistoryRequest(const HistoryRequest& from);
  HistoryRequest(HistoryRequest&& from) noexcept
    : HistoryRequest() {
    *this = ::std::move(from);
  }

  inline HistoryRequest& operator=(const HistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryRequest& operator=(HistoryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryRequest* internal_default_instance() {
    return reinterpret_cast<const HistoryRequest*>(
               &_HistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HistoryRequest& a, HistoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryRequest* New() const final {
    return CreateMaybeMessage<HistoryRequest>(nullptr);
  }

  HistoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryRequest& from);
  void MergeFrom(const HistoryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.HistoryRequest";
  }
  protected:
  explicit HistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_money_5fservice_2eproto);
    return ::descriptor_table_money_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kLimitFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.HistoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_money_5fservice_2eproto;
};
// -------------------------------------------------------------------

class HistoryReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.HistoryReponse) */ {
 public:
  inline HistoryReponse() : HistoryReponse(nullptr) {};
  virtual ~HistoryReponse();

  HistoryReponse(const HistoryReponse& from);
  HistoryReponse(HistoryReponse&& from) noexcept
    : HistoryReponse() {
    *this = ::std::move(from);
  }

  inline HistoryReponse& operator=(const HistoryReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryReponse& operator=(HistoryReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryReponse* internal_default_instance() {
    return reinterpret_cast<const HistoryReponse*>(
               &_HistoryReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HistoryReponse& a, HistoryReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryReponse* New() const final {
    return CreateMaybeMessage<HistoryReponse>(nullptr);
  }

  HistoryReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryReponse& from);
  void MergeFrom(const HistoryReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.HistoryReponse";
  }
  protected:
  explicit HistoryReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_money_5fservice_2eproto);
    return ::descriptor_table_money_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoriesFieldNumber = 1,
  };
  // repeated .msg.History histories = 1;
  int histories_size() const;
  private:
  int _internal_histories_size() const;
  public:
  void clear_histories();
  ::msg::History* mutable_histories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::History >*
      mutable_histories();
  private:
  const ::msg::History& _internal_histories(int index) const;
  ::msg::History* _internal_add_histories();
  public:
  const ::msg::History& histories(int index) const;
  ::msg::History* add_histories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::History >&
      histories() const;

  // @@protoc_insertion_point(class_scope:srv.HistoryReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::History > histories_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_money_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateAccountRequest

// uint64 user_id = 1;
inline void CreateAccountRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateAccountRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CreateAccountRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.CreateAccountRequest.user_id)
  return _internal_user_id();
}
inline void CreateAccountRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CreateAccountRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.CreateAccountRequest.user_id)
}

// string type = 2;
inline void CreateAccountRequest::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateAccountRequest::type() const {
  // @@protoc_insertion_point(field_get:srv.CreateAccountRequest.type)
  return _internal_type();
}
inline void CreateAccountRequest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:srv.CreateAccountRequest.type)
}
inline std::string* CreateAccountRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:srv.CreateAccountRequest.type)
  return _internal_mutable_type();
}
inline const std::string& CreateAccountRequest::_internal_type() const {
  return type_.Get();
}
inline void CreateAccountRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateAccountRequest::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:srv.CreateAccountRequest.type)
}
inline void CreateAccountRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:srv.CreateAccountRequest.type)
}
inline void CreateAccountRequest::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:srv.CreateAccountRequest.type)
}
inline std::string* CreateAccountRequest::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateAccountRequest::release_type() {
  // @@protoc_insertion_point(field_release:srv.CreateAccountRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAccountRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:srv.CreateAccountRequest.type)
}
inline std::string* CreateAccountRequest::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:srv.CreateAccountRequest.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateAccountRequest::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.CreateAccountRequest.type)
}

// -------------------------------------------------------------------

// DepositRequest

// string id = 1;
inline void DepositRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DepositRequest::id() const {
  // @@protoc_insertion_point(field_get:srv.DepositRequest.id)
  return _internal_id();
}
inline void DepositRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:srv.DepositRequest.id)
}
inline std::string* DepositRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:srv.DepositRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DepositRequest::_internal_id() const {
  return id_.Get();
}
inline void DepositRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DepositRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:srv.DepositRequest.id)
}
inline void DepositRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:srv.DepositRequest.id)
}
inline void DepositRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:srv.DepositRequest.id)
}
inline std::string* DepositRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DepositRequest::release_id() {
  // @@protoc_insertion_point(field_release:srv.DepositRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DepositRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:srv.DepositRequest.id)
}
inline std::string* DepositRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:srv.DepositRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DepositRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.DepositRequest.id)
}

// uint64 user_id = 2;
inline void DepositRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepositRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepositRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.DepositRequest.user_id)
  return _internal_user_id();
}
inline void DepositRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void DepositRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.DepositRequest.user_id)
}

// uint64 amount = 3;
inline void DepositRequest::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepositRequest::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DepositRequest::amount() const {
  // @@protoc_insertion_point(field_get:srv.DepositRequest.amount)
  return _internal_amount();
}
inline void DepositRequest::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void DepositRequest::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:srv.DepositRequest.amount)
}

// .google.protobuf.Timestamp create_at = 4;
inline bool DepositRequest::_internal_has_create_at() const {
  return this != internal_default_instance() && create_at_ != nullptr;
}
inline bool DepositRequest::has_create_at() const {
  return _internal_has_create_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DepositRequest::_internal_create_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& DepositRequest::create_at() const {
  // @@protoc_insertion_point(field_get:srv.DepositRequest.create_at)
  return _internal_create_at();
}
inline void DepositRequest::unsafe_arena_set_allocated_create_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  create_at_ = create_at;
  if (create_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.DepositRequest.create_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DepositRequest::release_create_at() {
  auto temp = unsafe_arena_release_create_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DepositRequest::unsafe_arena_release_create_at() {
  // @@protoc_insertion_point(field_release:srv.DepositRequest.create_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_at_;
  create_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DepositRequest::_internal_mutable_create_at() {
  
  if (create_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_at_ = p;
  }
  return create_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* DepositRequest::mutable_create_at() {
  // @@protoc_insertion_point(field_mutable:srv.DepositRequest.create_at)
  return _internal_mutable_create_at();
}
inline void DepositRequest::set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  if (create_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at)->GetArena();
    if (message_arena != submessage_arena) {
      create_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_at, submessage_arena);
    }
    
  } else {
    
  }
  create_at_ = create_at;
  // @@protoc_insertion_point(field_set_allocated:srv.DepositRequest.create_at)
}

// -------------------------------------------------------------------

// WithDrawRequest

// string id = 1;
inline void WithDrawRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WithDrawRequest::id() const {
  // @@protoc_insertion_point(field_get:srv.WithDrawRequest.id)
  return _internal_id();
}
inline void WithDrawRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:srv.WithDrawRequest.id)
}
inline std::string* WithDrawRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:srv.WithDrawRequest.id)
  return _internal_mutable_id();
}
inline const std::string& WithDrawRequest::_internal_id() const {
  return id_.Get();
}
inline void WithDrawRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WithDrawRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:srv.WithDrawRequest.id)
}
inline void WithDrawRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:srv.WithDrawRequest.id)
}
inline void WithDrawRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:srv.WithDrawRequest.id)
}
inline std::string* WithDrawRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WithDrawRequest::release_id() {
  // @@protoc_insertion_point(field_release:srv.WithDrawRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WithDrawRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:srv.WithDrawRequest.id)
}
inline std::string* WithDrawRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:srv.WithDrawRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WithDrawRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.WithDrawRequest.id)
}

// uint64 user_id = 2;
inline void WithDrawRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WithDrawRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WithDrawRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.WithDrawRequest.user_id)
  return _internal_user_id();
}
inline void WithDrawRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void WithDrawRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.WithDrawRequest.user_id)
}

// uint64 amount = 3;
inline void WithDrawRequest::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WithDrawRequest::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WithDrawRequest::amount() const {
  // @@protoc_insertion_point(field_get:srv.WithDrawRequest.amount)
  return _internal_amount();
}
inline void WithDrawRequest::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void WithDrawRequest::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:srv.WithDrawRequest.amount)
}

// .google.protobuf.Timestamp create_at = 4;
inline bool WithDrawRequest::_internal_has_create_at() const {
  return this != internal_default_instance() && create_at_ != nullptr;
}
inline bool WithDrawRequest::has_create_at() const {
  return _internal_has_create_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WithDrawRequest::_internal_create_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WithDrawRequest::create_at() const {
  // @@protoc_insertion_point(field_get:srv.WithDrawRequest.create_at)
  return _internal_create_at();
}
inline void WithDrawRequest::unsafe_arena_set_allocated_create_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  create_at_ = create_at;
  if (create_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.WithDrawRequest.create_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WithDrawRequest::release_create_at() {
  auto temp = unsafe_arena_release_create_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WithDrawRequest::unsafe_arena_release_create_at() {
  // @@protoc_insertion_point(field_release:srv.WithDrawRequest.create_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_at_;
  create_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WithDrawRequest::_internal_mutable_create_at() {
  
  if (create_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_at_ = p;
  }
  return create_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WithDrawRequest::mutable_create_at() {
  // @@protoc_insertion_point(field_mutable:srv.WithDrawRequest.create_at)
  return _internal_mutable_create_at();
}
inline void WithDrawRequest::set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  if (create_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at)->GetArena();
    if (message_arena != submessage_arena) {
      create_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_at, submessage_arena);
    }
    
  } else {
    
  }
  create_at_ = create_at;
  // @@protoc_insertion_point(field_set_allocated:srv.WithDrawRequest.create_at)
}

// -------------------------------------------------------------------

// GetBalanceRequest

// uint64 user_id = 1;
inline void GetBalanceRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBalanceRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBalanceRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.GetBalanceRequest.user_id)
  return _internal_user_id();
}
inline void GetBalanceRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void GetBalanceRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.GetBalanceRequest.user_id)
}

// .google.protobuf.Timestamp create_at = 2;
inline bool GetBalanceRequest::_internal_has_create_at() const {
  return this != internal_default_instance() && create_at_ != nullptr;
}
inline bool GetBalanceRequest::has_create_at() const {
  return _internal_has_create_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetBalanceRequest::_internal_create_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetBalanceRequest::create_at() const {
  // @@protoc_insertion_point(field_get:srv.GetBalanceRequest.create_at)
  return _internal_create_at();
}
inline void GetBalanceRequest::unsafe_arena_set_allocated_create_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  create_at_ = create_at;
  if (create_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.GetBalanceRequest.create_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetBalanceRequest::release_create_at() {
  auto temp = unsafe_arena_release_create_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetBalanceRequest::unsafe_arena_release_create_at() {
  // @@protoc_insertion_point(field_release:srv.GetBalanceRequest.create_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_at_;
  create_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetBalanceRequest::_internal_mutable_create_at() {
  
  if (create_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_at_ = p;
  }
  return create_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetBalanceRequest::mutable_create_at() {
  // @@protoc_insertion_point(field_mutable:srv.GetBalanceRequest.create_at)
  return _internal_mutable_create_at();
}
inline void GetBalanceRequest::set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  if (create_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at)->GetArena();
    if (message_arena != submessage_arena) {
      create_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_at, submessage_arena);
    }
    
  } else {
    
  }
  create_at_ = create_at;
  // @@protoc_insertion_point(field_set_allocated:srv.GetBalanceRequest.create_at)
}

// -------------------------------------------------------------------

// TransferRequest

// string id = 1;
inline void TransferRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransferRequest::id() const {
  // @@protoc_insertion_point(field_get:srv.TransferRequest.id)
  return _internal_id();
}
inline void TransferRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:srv.TransferRequest.id)
}
inline std::string* TransferRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:srv.TransferRequest.id)
  return _internal_mutable_id();
}
inline const std::string& TransferRequest::_internal_id() const {
  return id_.Get();
}
inline void TransferRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransferRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:srv.TransferRequest.id)
}
inline void TransferRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:srv.TransferRequest.id)
}
inline void TransferRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:srv.TransferRequest.id)
}
inline std::string* TransferRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransferRequest::release_id() {
  // @@protoc_insertion_point(field_release:srv.TransferRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:srv.TransferRequest.id)
}
inline std::string* TransferRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:srv.TransferRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransferRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.TransferRequest.id)
}

// uint64 user_id = 2;
inline void TransferRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.TransferRequest.user_id)
  return _internal_user_id();
}
inline void TransferRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void TransferRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.TransferRequest.user_id)
}

// uint64 to_user = 3;
inline void TransferRequest::clear_to_user() {
  to_user_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::_internal_to_user() const {
  return to_user_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::to_user() const {
  // @@protoc_insertion_point(field_get:srv.TransferRequest.to_user)
  return _internal_to_user();
}
inline void TransferRequest::_internal_set_to_user(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_user_ = value;
}
inline void TransferRequest::set_to_user(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_to_user(value);
  // @@protoc_insertion_point(field_set:srv.TransferRequest.to_user)
}

// uint64 amount = 4;
inline void TransferRequest::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransferRequest::amount() const {
  // @@protoc_insertion_point(field_get:srv.TransferRequest.amount)
  return _internal_amount();
}
inline void TransferRequest::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void TransferRequest::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:srv.TransferRequest.amount)
}

// string message = 5;
inline void TransferRequest::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransferRequest::message() const {
  // @@protoc_insertion_point(field_get:srv.TransferRequest.message)
  return _internal_message();
}
inline void TransferRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:srv.TransferRequest.message)
}
inline std::string* TransferRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:srv.TransferRequest.message)
  return _internal_mutable_message();
}
inline const std::string& TransferRequest::_internal_message() const {
  return message_.Get();
}
inline void TransferRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransferRequest::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:srv.TransferRequest.message)
}
inline void TransferRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:srv.TransferRequest.message)
}
inline void TransferRequest::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:srv.TransferRequest.message)
}
inline std::string* TransferRequest::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransferRequest::release_message() {
  // @@protoc_insertion_point(field_release:srv.TransferRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransferRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:srv.TransferRequest.message)
}
inline std::string* TransferRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:srv.TransferRequest.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransferRequest::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.TransferRequest.message)
}

// .google.protobuf.Timestamp create_at = 6;
inline bool TransferRequest::_internal_has_create_at() const {
  return this != internal_default_instance() && create_at_ != nullptr;
}
inline bool TransferRequest::has_create_at() const {
  return _internal_has_create_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TransferRequest::_internal_create_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TransferRequest::create_at() const {
  // @@protoc_insertion_point(field_get:srv.TransferRequest.create_at)
  return _internal_create_at();
}
inline void TransferRequest::unsafe_arena_set_allocated_create_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  create_at_ = create_at;
  if (create_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.TransferRequest.create_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransferRequest::release_create_at() {
  auto temp = unsafe_arena_release_create_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransferRequest::unsafe_arena_release_create_at() {
  // @@protoc_insertion_point(field_release:srv.TransferRequest.create_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_at_;
  create_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransferRequest::_internal_mutable_create_at() {
  
  if (create_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    create_at_ = p;
  }
  return create_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransferRequest::mutable_create_at() {
  // @@protoc_insertion_point(field_mutable:srv.TransferRequest.create_at)
  return _internal_mutable_create_at();
}
inline void TransferRequest::set_allocated_create_at(PROTOBUF_NAMESPACE_ID::Timestamp* create_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at_);
  }
  if (create_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_at)->GetArena();
    if (message_arena != submessage_arena) {
      create_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_at, submessage_arena);
    }
    
  } else {
    
  }
  create_at_ = create_at;
  // @@protoc_insertion_point(field_set_allocated:srv.TransferRequest.create_at)
}

// -------------------------------------------------------------------

// HistoryRequest

// uint64 user_id = 1;
inline void HistoryRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoryRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoryRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.HistoryRequest.user_id)
  return _internal_user_id();
}
inline void HistoryRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void HistoryRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.HistoryRequest.user_id)
}

// int32 limit = 2;
inline void HistoryRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRequest::limit() const {
  // @@protoc_insertion_point(field_get:srv.HistoryRequest.limit)
  return _internal_limit();
}
inline void HistoryRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void HistoryRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:srv.HistoryRequest.limit)
}

// int32 offset = 3;
inline void HistoryRequest::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryRequest::offset() const {
  // @@protoc_insertion_point(field_get:srv.HistoryRequest.offset)
  return _internal_offset();
}
inline void HistoryRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void HistoryRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:srv.HistoryRequest.offset)
}

// -------------------------------------------------------------------

// HistoryReponse

// repeated .msg.History histories = 1;
inline int HistoryReponse::_internal_histories_size() const {
  return histories_.size();
}
inline int HistoryReponse::histories_size() const {
  return _internal_histories_size();
}
inline ::msg::History* HistoryReponse::mutable_histories(int index) {
  // @@protoc_insertion_point(field_mutable:srv.HistoryReponse.histories)
  return histories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::History >*
HistoryReponse::mutable_histories() {
  // @@protoc_insertion_point(field_mutable_list:srv.HistoryReponse.histories)
  return &histories_;
}
inline const ::msg::History& HistoryReponse::_internal_histories(int index) const {
  return histories_.Get(index);
}
inline const ::msg::History& HistoryReponse::histories(int index) const {
  // @@protoc_insertion_point(field_get:srv.HistoryReponse.histories)
  return _internal_histories(index);
}
inline ::msg::History* HistoryReponse::_internal_add_histories() {
  return histories_.Add();
}
inline ::msg::History* HistoryReponse::add_histories() {
  // @@protoc_insertion_point(field_add:srv.HistoryReponse.histories)
  return _internal_add_histories();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::History >&
HistoryReponse::histories() const {
  // @@protoc_insertion_point(field_list:srv.HistoryReponse.histories)
  return histories_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_money_5fservice_2eproto
