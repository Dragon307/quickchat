// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_channel_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_channel_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "channel.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_channel_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_channel_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_channel_5fservice_2eproto;
namespace srv {
class AddMembersChannelRequest;
class AddMembersChannelRequestDefaultTypeInternal;
extern AddMembersChannelRequestDefaultTypeInternal _AddMembersChannelRequest_default_instance_;
class CheckIsMemberAndGetChannelReponse;
class CheckIsMemberAndGetChannelReponseDefaultTypeInternal;
extern CheckIsMemberAndGetChannelReponseDefaultTypeInternal _CheckIsMemberAndGetChannelReponse_default_instance_;
class CheckIsMemberAndGetChannelRequest;
class CheckIsMemberAndGetChannelRequestDefaultTypeInternal;
extern CheckIsMemberAndGetChannelRequestDefaultTypeInternal _CheckIsMemberAndGetChannelRequest_default_instance_;
class CheckIsMemberChannelReponse;
class CheckIsMemberChannelReponseDefaultTypeInternal;
extern CheckIsMemberChannelReponseDefaultTypeInternal _CheckIsMemberChannelReponse_default_instance_;
class CheckIsMemberChannelRequest;
class CheckIsMemberChannelRequestDefaultTypeInternal;
extern CheckIsMemberChannelRequestDefaultTypeInternal _CheckIsMemberChannelRequest_default_instance_;
class CreateChannelRequest;
class CreateChannelRequestDefaultTypeInternal;
extern CreateChannelRequestDefaultTypeInternal _CreateChannelRequest_default_instance_;
class DeleteChannelRequest;
class DeleteChannelRequestDefaultTypeInternal;
extern DeleteChannelRequestDefaultTypeInternal _DeleteChannelRequest_default_instance_;
class GetChannelRequest;
class GetChannelRequestDefaultTypeInternal;
extern GetChannelRequestDefaultTypeInternal _GetChannelRequest_default_instance_;
class ListUserChannelsReponse;
class ListUserChannelsReponseDefaultTypeInternal;
extern ListUserChannelsReponseDefaultTypeInternal _ListUserChannelsReponse_default_instance_;
class ListUserChannelsRequest;
class ListUserChannelsRequestDefaultTypeInternal;
extern ListUserChannelsRequestDefaultTypeInternal _ListUserChannelsRequest_default_instance_;
class RemoveMemberChannelRequest;
class RemoveMemberChannelRequestDefaultTypeInternal;
extern RemoveMemberChannelRequestDefaultTypeInternal _RemoveMemberChannelRequest_default_instance_;
class UpdateChannelRequest;
class UpdateChannelRequestDefaultTypeInternal;
extern UpdateChannelRequestDefaultTypeInternal _UpdateChannelRequest_default_instance_;
}  // namespace srv
PROTOBUF_NAMESPACE_OPEN
template<> ::srv::AddMembersChannelRequest* Arena::CreateMaybeMessage<::srv::AddMembersChannelRequest>(Arena*);
template<> ::srv::CheckIsMemberAndGetChannelReponse* Arena::CreateMaybeMessage<::srv::CheckIsMemberAndGetChannelReponse>(Arena*);
template<> ::srv::CheckIsMemberAndGetChannelRequest* Arena::CreateMaybeMessage<::srv::CheckIsMemberAndGetChannelRequest>(Arena*);
template<> ::srv::CheckIsMemberChannelReponse* Arena::CreateMaybeMessage<::srv::CheckIsMemberChannelReponse>(Arena*);
template<> ::srv::CheckIsMemberChannelRequest* Arena::CreateMaybeMessage<::srv::CheckIsMemberChannelRequest>(Arena*);
template<> ::srv::CreateChannelRequest* Arena::CreateMaybeMessage<::srv::CreateChannelRequest>(Arena*);
template<> ::srv::DeleteChannelRequest* Arena::CreateMaybeMessage<::srv::DeleteChannelRequest>(Arena*);
template<> ::srv::GetChannelRequest* Arena::CreateMaybeMessage<::srv::GetChannelRequest>(Arena*);
template<> ::srv::ListUserChannelsReponse* Arena::CreateMaybeMessage<::srv::ListUserChannelsReponse>(Arena*);
template<> ::srv::ListUserChannelsRequest* Arena::CreateMaybeMessage<::srv::ListUserChannelsRequest>(Arena*);
template<> ::srv::RemoveMemberChannelRequest* Arena::CreateMaybeMessage<::srv::RemoveMemberChannelRequest>(Arena*);
template<> ::srv::UpdateChannelRequest* Arena::CreateMaybeMessage<::srv::UpdateChannelRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace srv {

// ===================================================================

class GetChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.GetChannelRequest) */ {
 public:
  inline GetChannelRequest() : GetChannelRequest(nullptr) {};
  virtual ~GetChannelRequest();

  GetChannelRequest(const GetChannelRequest& from);
  GetChannelRequest(GetChannelRequest&& from) noexcept
    : GetChannelRequest() {
    *this = ::std::move(from);
  }

  inline GetChannelRequest& operator=(const GetChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelRequest& operator=(GetChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetChannelRequest*>(
               &_GetChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetChannelRequest& a, GetChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelRequest* New() const final {
    return CreateMaybeMessage<GetChannelRequest>(nullptr);
  }

  GetChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChannelRequest& from);
  void MergeFrom(const GetChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.GetChannelRequest";
  }
  protected:
  explicit GetChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.GetChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.CreateChannelRequest) */ {
 public:
  inline CreateChannelRequest() : CreateChannelRequest(nullptr) {};
  virtual ~CreateChannelRequest();

  CreateChannelRequest(const CreateChannelRequest& from);
  CreateChannelRequest(CreateChannelRequest&& from) noexcept
    : CreateChannelRequest() {
    *this = ::std::move(from);
  }

  inline CreateChannelRequest& operator=(const CreateChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateChannelRequest& operator=(CreateChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateChannelRequest*>(
               &_CreateChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateChannelRequest& a, CreateChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelRequest* New() const final {
    return CreateMaybeMessage<CreateChannelRequest>(nullptr);
  }

  CreateChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateChannelRequest& from);
  void MergeFrom(const CreateChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.CreateChannelRequest";
  }
  protected:
  explicit CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // .msg.Channel channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::msg::Channel& channel() const;
  ::msg::Channel* release_channel();
  ::msg::Channel* mutable_channel();
  void set_allocated_channel(::msg::Channel* channel);
  private:
  const ::msg::Channel& _internal_channel() const;
  ::msg::Channel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::msg::Channel* channel);
  ::msg::Channel* unsafe_arena_release_channel();

  // @@protoc_insertion_point(class_scope:srv.CreateChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::Channel* channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.UpdateChannelRequest) */ {
 public:
  inline UpdateChannelRequest() : UpdateChannelRequest(nullptr) {};
  virtual ~UpdateChannelRequest();

  UpdateChannelRequest(const UpdateChannelRequest& from);
  UpdateChannelRequest(UpdateChannelRequest&& from) noexcept
    : UpdateChannelRequest() {
    *this = ::std::move(from);
  }

  inline UpdateChannelRequest& operator=(const UpdateChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateChannelRequest& operator=(UpdateChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateChannelRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateChannelRequest*>(
               &_UpdateChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateChannelRequest& a, UpdateChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateChannelRequest* New() const final {
    return CreateMaybeMessage<UpdateChannelRequest>(nullptr);
  }

  UpdateChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateChannelRequest& from);
  void MergeFrom(const UpdateChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.UpdateChannelRequest";
  }
  protected:
  explicit UpdateChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kFieldMaskFieldNumber = 2,
  };
  // .msg.Channel channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::msg::Channel& channel() const;
  ::msg::Channel* release_channel();
  ::msg::Channel* mutable_channel();
  void set_allocated_channel(::msg::Channel* channel);
  private:
  const ::msg::Channel& _internal_channel() const;
  ::msg::Channel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::msg::Channel* channel);
  ::msg::Channel* unsafe_arena_release_channel();

  // .google.protobuf.FieldMask field_mask = 2;
  bool has_field_mask() const;
  private:
  bool _internal_has_field_mask() const;
  public:
  void clear_field_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& field_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_field_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_field_mask();
  void set_allocated_field_mask(PROTOBUF_NAMESPACE_ID::FieldMask* field_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_field_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_field_mask();
  public:
  void unsafe_arena_set_allocated_field_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* field_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_field_mask();

  // @@protoc_insertion_point(class_scope:srv.UpdateChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::Channel* channel_;
  PROTOBUF_NAMESPACE_ID::FieldMask* field_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.DeleteChannelRequest) */ {
 public:
  inline DeleteChannelRequest() : DeleteChannelRequest(nullptr) {};
  virtual ~DeleteChannelRequest();

  DeleteChannelRequest(const DeleteChannelRequest& from);
  DeleteChannelRequest(DeleteChannelRequest&& from) noexcept
    : DeleteChannelRequest() {
    *this = ::std::move(from);
  }

  inline DeleteChannelRequest& operator=(const DeleteChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteChannelRequest& operator=(DeleteChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteChannelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteChannelRequest*>(
               &_DeleteChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteChannelRequest& a, DeleteChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteChannelRequest* New() const final {
    return CreateMaybeMessage<DeleteChannelRequest>(nullptr);
  }

  DeleteChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteChannelRequest& from);
  void MergeFrom(const DeleteChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.DeleteChannelRequest";
  }
  protected:
  explicit DeleteChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.DeleteChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUserChannelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.ListUserChannelsRequest) */ {
 public:
  inline ListUserChannelsRequest() : ListUserChannelsRequest(nullptr) {};
  virtual ~ListUserChannelsRequest();

  ListUserChannelsRequest(const ListUserChannelsRequest& from);
  ListUserChannelsRequest(ListUserChannelsRequest&& from) noexcept
    : ListUserChannelsRequest() {
    *this = ::std::move(from);
  }

  inline ListUserChannelsRequest& operator=(const ListUserChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserChannelsRequest& operator=(ListUserChannelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUserChannelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUserChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListUserChannelsRequest*>(
               &_ListUserChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListUserChannelsRequest& a, ListUserChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserChannelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserChannelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserChannelsRequest* New() const final {
    return CreateMaybeMessage<ListUserChannelsRequest>(nullptr);
  }

  ListUserChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserChannelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUserChannelsRequest& from);
  void MergeFrom(const ListUserChannelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserChannelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.ListUserChannelsRequest";
  }
  protected:
  explicit ListUserChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.ListUserChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUserChannelsReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.ListUserChannelsReponse) */ {
 public:
  inline ListUserChannelsReponse() : ListUserChannelsReponse(nullptr) {};
  virtual ~ListUserChannelsReponse();

  ListUserChannelsReponse(const ListUserChannelsReponse& from);
  ListUserChannelsReponse(ListUserChannelsReponse&& from) noexcept
    : ListUserChannelsReponse() {
    *this = ::std::move(from);
  }

  inline ListUserChannelsReponse& operator=(const ListUserChannelsReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUserChannelsReponse& operator=(ListUserChannelsReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUserChannelsReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUserChannelsReponse* internal_default_instance() {
    return reinterpret_cast<const ListUserChannelsReponse*>(
               &_ListUserChannelsReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListUserChannelsReponse& a, ListUserChannelsReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUserChannelsReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUserChannelsReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUserChannelsReponse* New() const final {
    return CreateMaybeMessage<ListUserChannelsReponse>(nullptr);
  }

  ListUserChannelsReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUserChannelsReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUserChannelsReponse& from);
  void MergeFrom(const ListUserChannelsReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUserChannelsReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.ListUserChannelsReponse";
  }
  protected:
  explicit ListUserChannelsReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .msg.Channel channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::msg::Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Channel >*
      mutable_channels();
  private:
  const ::msg::Channel& _internal_channels(int index) const;
  ::msg::Channel* _internal_add_channels();
  public:
  const ::msg::Channel& channels(int index) const;
  ::msg::Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Channel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:srv.ListUserChannelsReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Channel > channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CheckIsMemberChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.CheckIsMemberChannelRequest) */ {
 public:
  inline CheckIsMemberChannelRequest() : CheckIsMemberChannelRequest(nullptr) {};
  virtual ~CheckIsMemberChannelRequest();

  CheckIsMemberChannelRequest(const CheckIsMemberChannelRequest& from);
  CheckIsMemberChannelRequest(CheckIsMemberChannelRequest&& from) noexcept
    : CheckIsMemberChannelRequest() {
    *this = ::std::move(from);
  }

  inline CheckIsMemberChannelRequest& operator=(const CheckIsMemberChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckIsMemberChannelRequest& operator=(CheckIsMemberChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckIsMemberChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckIsMemberChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CheckIsMemberChannelRequest*>(
               &_CheckIsMemberChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CheckIsMemberChannelRequest& a, CheckIsMemberChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckIsMemberChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckIsMemberChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckIsMemberChannelRequest* New() const final {
    return CreateMaybeMessage<CheckIsMemberChannelRequest>(nullptr);
  }

  CheckIsMemberChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckIsMemberChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckIsMemberChannelRequest& from);
  void MergeFrom(const CheckIsMemberChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckIsMemberChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.CheckIsMemberChannelRequest";
  }
  protected:
  explicit CheckIsMemberChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // uint64 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.CheckIsMemberChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CheckIsMemberChannelReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.CheckIsMemberChannelReponse) */ {
 public:
  inline CheckIsMemberChannelReponse() : CheckIsMemberChannelReponse(nullptr) {};
  virtual ~CheckIsMemberChannelReponse();

  CheckIsMemberChannelReponse(const CheckIsMemberChannelReponse& from);
  CheckIsMemberChannelReponse(CheckIsMemberChannelReponse&& from) noexcept
    : CheckIsMemberChannelReponse() {
    *this = ::std::move(from);
  }

  inline CheckIsMemberChannelReponse& operator=(const CheckIsMemberChannelReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckIsMemberChannelReponse& operator=(CheckIsMemberChannelReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckIsMemberChannelReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckIsMemberChannelReponse* internal_default_instance() {
    return reinterpret_cast<const CheckIsMemberChannelReponse*>(
               &_CheckIsMemberChannelReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CheckIsMemberChannelReponse& a, CheckIsMemberChannelReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckIsMemberChannelReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckIsMemberChannelReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckIsMemberChannelReponse* New() const final {
    return CreateMaybeMessage<CheckIsMemberChannelReponse>(nullptr);
  }

  CheckIsMemberChannelReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckIsMemberChannelReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckIsMemberChannelReponse& from);
  void MergeFrom(const CheckIsMemberChannelReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckIsMemberChannelReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.CheckIsMemberChannelReponse";
  }
  protected:
  explicit CheckIsMemberChannelReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kIsInFieldNumber = 1,
  };
  // uint64 channel_id = 2;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 user_id = 3;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_in = 1;
  void clear_is_in();
  bool is_in() const;
  void set_is_in(bool value);
  private:
  bool _internal_is_in() const;
  void _internal_set_is_in(bool value);
  public:

  // @@protoc_insertion_point(class_scope:srv.CheckIsMemberChannelReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  bool is_in_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CheckIsMemberAndGetChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.CheckIsMemberAndGetChannelRequest) */ {
 public:
  inline CheckIsMemberAndGetChannelRequest() : CheckIsMemberAndGetChannelRequest(nullptr) {};
  virtual ~CheckIsMemberAndGetChannelRequest();

  CheckIsMemberAndGetChannelRequest(const CheckIsMemberAndGetChannelRequest& from);
  CheckIsMemberAndGetChannelRequest(CheckIsMemberAndGetChannelRequest&& from) noexcept
    : CheckIsMemberAndGetChannelRequest() {
    *this = ::std::move(from);
  }

  inline CheckIsMemberAndGetChannelRequest& operator=(const CheckIsMemberAndGetChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckIsMemberAndGetChannelRequest& operator=(CheckIsMemberAndGetChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckIsMemberAndGetChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckIsMemberAndGetChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CheckIsMemberAndGetChannelRequest*>(
               &_CheckIsMemberAndGetChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CheckIsMemberAndGetChannelRequest& a, CheckIsMemberAndGetChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckIsMemberAndGetChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckIsMemberAndGetChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckIsMemberAndGetChannelRequest* New() const final {
    return CreateMaybeMessage<CheckIsMemberAndGetChannelRequest>(nullptr);
  }

  CheckIsMemberAndGetChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckIsMemberAndGetChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckIsMemberAndGetChannelRequest& from);
  void MergeFrom(const CheckIsMemberAndGetChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckIsMemberAndGetChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.CheckIsMemberAndGetChannelRequest";
  }
  protected:
  explicit CheckIsMemberAndGetChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.CheckIsMemberAndGetChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CheckIsMemberAndGetChannelReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.CheckIsMemberAndGetChannelReponse) */ {
 public:
  inline CheckIsMemberAndGetChannelReponse() : CheckIsMemberAndGetChannelReponse(nullptr) {};
  virtual ~CheckIsMemberAndGetChannelReponse();

  CheckIsMemberAndGetChannelReponse(const CheckIsMemberAndGetChannelReponse& from);
  CheckIsMemberAndGetChannelReponse(CheckIsMemberAndGetChannelReponse&& from) noexcept
    : CheckIsMemberAndGetChannelReponse() {
    *this = ::std::move(from);
  }

  inline CheckIsMemberAndGetChannelReponse& operator=(const CheckIsMemberAndGetChannelReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckIsMemberAndGetChannelReponse& operator=(CheckIsMemberAndGetChannelReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckIsMemberAndGetChannelReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckIsMemberAndGetChannelReponse* internal_default_instance() {
    return reinterpret_cast<const CheckIsMemberAndGetChannelReponse*>(
               &_CheckIsMemberAndGetChannelReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CheckIsMemberAndGetChannelReponse& a, CheckIsMemberAndGetChannelReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckIsMemberAndGetChannelReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckIsMemberAndGetChannelReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckIsMemberAndGetChannelReponse* New() const final {
    return CreateMaybeMessage<CheckIsMemberAndGetChannelReponse>(nullptr);
  }

  CheckIsMemberAndGetChannelReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckIsMemberAndGetChannelReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckIsMemberAndGetChannelReponse& from);
  void MergeFrom(const CheckIsMemberAndGetChannelReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckIsMemberAndGetChannelReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.CheckIsMemberAndGetChannelReponse";
  }
  protected:
  explicit CheckIsMemberAndGetChannelReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 2,
    kIsInFieldNumber = 1,
  };
  // .msg.Channel channel = 2;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::msg::Channel& channel() const;
  ::msg::Channel* release_channel();
  ::msg::Channel* mutable_channel();
  void set_allocated_channel(::msg::Channel* channel);
  private:
  const ::msg::Channel& _internal_channel() const;
  ::msg::Channel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::msg::Channel* channel);
  ::msg::Channel* unsafe_arena_release_channel();

  // bool is_in = 1;
  void clear_is_in();
  bool is_in() const;
  void set_is_in(bool value);
  private:
  bool _internal_is_in() const;
  void _internal_set_is_in(bool value);
  public:

  // @@protoc_insertion_point(class_scope:srv.CheckIsMemberAndGetChannelReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::Channel* channel_;
  bool is_in_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddMembersChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.AddMembersChannelRequest) */ {
 public:
  inline AddMembersChannelRequest() : AddMembersChannelRequest(nullptr) {};
  virtual ~AddMembersChannelRequest();

  AddMembersChannelRequest(const AddMembersChannelRequest& from);
  AddMembersChannelRequest(AddMembersChannelRequest&& from) noexcept
    : AddMembersChannelRequest() {
    *this = ::std::move(from);
  }

  inline AddMembersChannelRequest& operator=(const AddMembersChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddMembersChannelRequest& operator=(AddMembersChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddMembersChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddMembersChannelRequest* internal_default_instance() {
    return reinterpret_cast<const AddMembersChannelRequest*>(
               &_AddMembersChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AddMembersChannelRequest& a, AddMembersChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddMembersChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddMembersChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddMembersChannelRequest* New() const final {
    return CreateMaybeMessage<AddMembersChannelRequest>(nullptr);
  }

  AddMembersChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddMembersChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddMembersChannelRequest& from);
  void MergeFrom(const AddMembersChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddMembersChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.AddMembersChannelRequest";
  }
  protected:
  explicit AddMembersChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kChannelIdFieldNumber = 1,
  };
  // repeated .msg.Channel.Member members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::msg::Channel_Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Channel_Member >*
      mutable_members();
  private:
  const ::msg::Channel_Member& _internal_members(int index) const;
  ::msg::Channel_Member* _internal_add_members();
  public:
  const ::msg::Channel_Member& members(int index) const;
  ::msg::Channel_Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Channel_Member >&
      members() const;

  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.AddMembersChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Channel_Member > members_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveMemberChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srv.RemoveMemberChannelRequest) */ {
 public:
  inline RemoveMemberChannelRequest() : RemoveMemberChannelRequest(nullptr) {};
  virtual ~RemoveMemberChannelRequest();

  RemoveMemberChannelRequest(const RemoveMemberChannelRequest& from);
  RemoveMemberChannelRequest(RemoveMemberChannelRequest&& from) noexcept
    : RemoveMemberChannelRequest() {
    *this = ::std::move(from);
  }

  inline RemoveMemberChannelRequest& operator=(const RemoveMemberChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveMemberChannelRequest& operator=(RemoveMemberChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveMemberChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveMemberChannelRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveMemberChannelRequest*>(
               &_RemoveMemberChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RemoveMemberChannelRequest& a, RemoveMemberChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveMemberChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveMemberChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveMemberChannelRequest* New() const final {
    return CreateMaybeMessage<RemoveMemberChannelRequest>(nullptr);
  }

  RemoveMemberChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveMemberChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveMemberChannelRequest& from);
  void MergeFrom(const RemoveMemberChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveMemberChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srv.RemoveMemberChannelRequest";
  }
  protected:
  explicit RemoveMemberChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_channel_5fservice_2eproto);
    return ::descriptor_table_channel_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // uint64 channel_id = 1;
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:srv.RemoveMemberChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetChannelRequest

// uint64 channel_id = 1;
inline void GetChannelRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetChannelRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:srv.GetChannelRequest.channel_id)
  return _internal_channel_id();
}
inline void GetChannelRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void GetChannelRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:srv.GetChannelRequest.channel_id)
}

// -------------------------------------------------------------------

// CreateChannelRequest

// .msg.Channel channel = 1;
inline bool CreateChannelRequest::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool CreateChannelRequest::has_channel() const {
  return _internal_has_channel();
}
inline const ::msg::Channel& CreateChannelRequest::_internal_channel() const {
  const ::msg::Channel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Channel*>(
      &::msg::_Channel_default_instance_);
}
inline const ::msg::Channel& CreateChannelRequest::channel() const {
  // @@protoc_insertion_point(field_get:srv.CreateChannelRequest.channel)
  return _internal_channel();
}
inline void CreateChannelRequest::unsafe_arena_set_allocated_channel(
    ::msg::Channel* channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.CreateChannelRequest.channel)
}
inline ::msg::Channel* CreateChannelRequest::release_channel() {
  auto temp = unsafe_arena_release_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Channel* CreateChannelRequest::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:srv.CreateChannelRequest.channel)
  
  ::msg::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::msg::Channel* CreateChannelRequest::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Channel>(GetArena());
    channel_ = p;
  }
  return channel_;
}
inline ::msg::Channel* CreateChannelRequest::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:srv.CreateChannelRequest.channel)
  return _internal_mutable_channel();
}
inline void CreateChannelRequest::set_allocated_channel(::msg::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel)->GetArena();
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:srv.CreateChannelRequest.channel)
}

// -------------------------------------------------------------------

// UpdateChannelRequest

// .msg.Channel channel = 1;
inline bool UpdateChannelRequest::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool UpdateChannelRequest::has_channel() const {
  return _internal_has_channel();
}
inline const ::msg::Channel& UpdateChannelRequest::_internal_channel() const {
  const ::msg::Channel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Channel*>(
      &::msg::_Channel_default_instance_);
}
inline const ::msg::Channel& UpdateChannelRequest::channel() const {
  // @@protoc_insertion_point(field_get:srv.UpdateChannelRequest.channel)
  return _internal_channel();
}
inline void UpdateChannelRequest::unsafe_arena_set_allocated_channel(
    ::msg::Channel* channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.UpdateChannelRequest.channel)
}
inline ::msg::Channel* UpdateChannelRequest::release_channel() {
  auto temp = unsafe_arena_release_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Channel* UpdateChannelRequest::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:srv.UpdateChannelRequest.channel)
  
  ::msg::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::msg::Channel* UpdateChannelRequest::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Channel>(GetArena());
    channel_ = p;
  }
  return channel_;
}
inline ::msg::Channel* UpdateChannelRequest::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:srv.UpdateChannelRequest.channel)
  return _internal_mutable_channel();
}
inline void UpdateChannelRequest::set_allocated_channel(::msg::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel)->GetArena();
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:srv.UpdateChannelRequest.channel)
}

// .google.protobuf.FieldMask field_mask = 2;
inline bool UpdateChannelRequest::_internal_has_field_mask() const {
  return this != internal_default_instance() && field_mask_ != nullptr;
}
inline bool UpdateChannelRequest::has_field_mask() const {
  return _internal_has_field_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateChannelRequest::_internal_field_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = field_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateChannelRequest::field_mask() const {
  // @@protoc_insertion_point(field_get:srv.UpdateChannelRequest.field_mask)
  return _internal_field_mask();
}
inline void UpdateChannelRequest::unsafe_arena_set_allocated_field_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* field_mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask_);
  }
  field_mask_ = field_mask;
  if (field_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.UpdateChannelRequest.field_mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateChannelRequest::release_field_mask() {
  auto temp = unsafe_arena_release_field_mask();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateChannelRequest::unsafe_arena_release_field_mask() {
  // @@protoc_insertion_point(field_release:srv.UpdateChannelRequest.field_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = field_mask_;
  field_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateChannelRequest::_internal_mutable_field_mask() {
  
  if (field_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    field_mask_ = p;
  }
  return field_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateChannelRequest::mutable_field_mask() {
  // @@protoc_insertion_point(field_mutable:srv.UpdateChannelRequest.field_mask)
  return _internal_mutable_field_mask();
}
inline void UpdateChannelRequest::set_allocated_field_mask(PROTOBUF_NAMESPACE_ID::FieldMask* field_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask_);
  }
  if (field_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_mask)->GetArena();
    if (message_arena != submessage_arena) {
      field_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field_mask, submessage_arena);
    }
    
  } else {
    
  }
  field_mask_ = field_mask;
  // @@protoc_insertion_point(field_set_allocated:srv.UpdateChannelRequest.field_mask)
}

// -------------------------------------------------------------------

// DeleteChannelRequest

// uint64 channel_id = 1;
inline void DeleteChannelRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteChannelRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:srv.DeleteChannelRequest.channel_id)
  return _internal_channel_id();
}
inline void DeleteChannelRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void DeleteChannelRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:srv.DeleteChannelRequest.channel_id)
}

// -------------------------------------------------------------------

// ListUserChannelsRequest

// uint64 user_id = 1;
inline void ListUserChannelsRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListUserChannelsRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListUserChannelsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.ListUserChannelsRequest.user_id)
  return _internal_user_id();
}
inline void ListUserChannelsRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void ListUserChannelsRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.ListUserChannelsRequest.user_id)
}

// -------------------------------------------------------------------

// ListUserChannelsReponse

// repeated .msg.Channel channels = 1;
inline int ListUserChannelsReponse::_internal_channels_size() const {
  return channels_.size();
}
inline int ListUserChannelsReponse::channels_size() const {
  return _internal_channels_size();
}
inline ::msg::Channel* ListUserChannelsReponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:srv.ListUserChannelsReponse.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Channel >*
ListUserChannelsReponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:srv.ListUserChannelsReponse.channels)
  return &channels_;
}
inline const ::msg::Channel& ListUserChannelsReponse::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::msg::Channel& ListUserChannelsReponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:srv.ListUserChannelsReponse.channels)
  return _internal_channels(index);
}
inline ::msg::Channel* ListUserChannelsReponse::_internal_add_channels() {
  return channels_.Add();
}
inline ::msg::Channel* ListUserChannelsReponse::add_channels() {
  // @@protoc_insertion_point(field_add:srv.ListUserChannelsReponse.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Channel >&
ListUserChannelsReponse::channels() const {
  // @@protoc_insertion_point(field_list:srv.ListUserChannelsReponse.channels)
  return channels_;
}

// -------------------------------------------------------------------

// CheckIsMemberChannelRequest

// uint64 user_id = 1;
inline void CheckIsMemberChannelRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberChannelRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberChannelRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.CheckIsMemberChannelRequest.user_id)
  return _internal_user_id();
}
inline void CheckIsMemberChannelRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CheckIsMemberChannelRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.CheckIsMemberChannelRequest.user_id)
}

// uint64 channel_id = 2;
inline void CheckIsMemberChannelRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberChannelRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:srv.CheckIsMemberChannelRequest.channel_id)
  return _internal_channel_id();
}
inline void CheckIsMemberChannelRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void CheckIsMemberChannelRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:srv.CheckIsMemberChannelRequest.channel_id)
}

// -------------------------------------------------------------------

// CheckIsMemberChannelReponse

// bool is_in = 1;
inline void CheckIsMemberChannelReponse::clear_is_in() {
  is_in_ = false;
}
inline bool CheckIsMemberChannelReponse::_internal_is_in() const {
  return is_in_;
}
inline bool CheckIsMemberChannelReponse::is_in() const {
  // @@protoc_insertion_point(field_get:srv.CheckIsMemberChannelReponse.is_in)
  return _internal_is_in();
}
inline void CheckIsMemberChannelReponse::_internal_set_is_in(bool value) {
  
  is_in_ = value;
}
inline void CheckIsMemberChannelReponse::set_is_in(bool value) {
  _internal_set_is_in(value);
  // @@protoc_insertion_point(field_set:srv.CheckIsMemberChannelReponse.is_in)
}

// uint64 channel_id = 2;
inline void CheckIsMemberChannelReponse::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberChannelReponse::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberChannelReponse::channel_id() const {
  // @@protoc_insertion_point(field_get:srv.CheckIsMemberChannelReponse.channel_id)
  return _internal_channel_id();
}
inline void CheckIsMemberChannelReponse::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void CheckIsMemberChannelReponse::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:srv.CheckIsMemberChannelReponse.channel_id)
}

// uint64 user_id = 3;
inline void CheckIsMemberChannelReponse::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberChannelReponse::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberChannelReponse::user_id() const {
  // @@protoc_insertion_point(field_get:srv.CheckIsMemberChannelReponse.user_id)
  return _internal_user_id();
}
inline void CheckIsMemberChannelReponse::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CheckIsMemberChannelReponse::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.CheckIsMemberChannelReponse.user_id)
}

// -------------------------------------------------------------------

// CheckIsMemberAndGetChannelRequest

// uint64 channel_id = 1;
inline void CheckIsMemberAndGetChannelRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberAndGetChannelRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberAndGetChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:srv.CheckIsMemberAndGetChannelRequest.channel_id)
  return _internal_channel_id();
}
inline void CheckIsMemberAndGetChannelRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void CheckIsMemberAndGetChannelRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:srv.CheckIsMemberAndGetChannelRequest.channel_id)
}

// uint64 user_id = 2;
inline void CheckIsMemberAndGetChannelRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberAndGetChannelRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CheckIsMemberAndGetChannelRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.CheckIsMemberAndGetChannelRequest.user_id)
  return _internal_user_id();
}
inline void CheckIsMemberAndGetChannelRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void CheckIsMemberAndGetChannelRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.CheckIsMemberAndGetChannelRequest.user_id)
}

// -------------------------------------------------------------------

// CheckIsMemberAndGetChannelReponse

// bool is_in = 1;
inline void CheckIsMemberAndGetChannelReponse::clear_is_in() {
  is_in_ = false;
}
inline bool CheckIsMemberAndGetChannelReponse::_internal_is_in() const {
  return is_in_;
}
inline bool CheckIsMemberAndGetChannelReponse::is_in() const {
  // @@protoc_insertion_point(field_get:srv.CheckIsMemberAndGetChannelReponse.is_in)
  return _internal_is_in();
}
inline void CheckIsMemberAndGetChannelReponse::_internal_set_is_in(bool value) {
  
  is_in_ = value;
}
inline void CheckIsMemberAndGetChannelReponse::set_is_in(bool value) {
  _internal_set_is_in(value);
  // @@protoc_insertion_point(field_set:srv.CheckIsMemberAndGetChannelReponse.is_in)
}

// .msg.Channel channel = 2;
inline bool CheckIsMemberAndGetChannelReponse::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool CheckIsMemberAndGetChannelReponse::has_channel() const {
  return _internal_has_channel();
}
inline const ::msg::Channel& CheckIsMemberAndGetChannelReponse::_internal_channel() const {
  const ::msg::Channel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Channel*>(
      &::msg::_Channel_default_instance_);
}
inline const ::msg::Channel& CheckIsMemberAndGetChannelReponse::channel() const {
  // @@protoc_insertion_point(field_get:srv.CheckIsMemberAndGetChannelReponse.channel)
  return _internal_channel();
}
inline void CheckIsMemberAndGetChannelReponse::unsafe_arena_set_allocated_channel(
    ::msg::Channel* channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srv.CheckIsMemberAndGetChannelReponse.channel)
}
inline ::msg::Channel* CheckIsMemberAndGetChannelReponse::release_channel() {
  auto temp = unsafe_arena_release_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Channel* CheckIsMemberAndGetChannelReponse::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:srv.CheckIsMemberAndGetChannelReponse.channel)
  
  ::msg::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::msg::Channel* CheckIsMemberAndGetChannelReponse::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Channel>(GetArena());
    channel_ = p;
  }
  return channel_;
}
inline ::msg::Channel* CheckIsMemberAndGetChannelReponse::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:srv.CheckIsMemberAndGetChannelReponse.channel)
  return _internal_mutable_channel();
}
inline void CheckIsMemberAndGetChannelReponse::set_allocated_channel(::msg::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel)->GetArena();
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:srv.CheckIsMemberAndGetChannelReponse.channel)
}

// -------------------------------------------------------------------

// AddMembersChannelRequest

// uint64 channel_id = 1;
inline void AddMembersChannelRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddMembersChannelRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddMembersChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:srv.AddMembersChannelRequest.channel_id)
  return _internal_channel_id();
}
inline void AddMembersChannelRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void AddMembersChannelRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:srv.AddMembersChannelRequest.channel_id)
}

// repeated .msg.Channel.Member members = 2;
inline int AddMembersChannelRequest::_internal_members_size() const {
  return members_.size();
}
inline int AddMembersChannelRequest::members_size() const {
  return _internal_members_size();
}
inline ::msg::Channel_Member* AddMembersChannelRequest::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:srv.AddMembersChannelRequest.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Channel_Member >*
AddMembersChannelRequest::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:srv.AddMembersChannelRequest.members)
  return &members_;
}
inline const ::msg::Channel_Member& AddMembersChannelRequest::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::msg::Channel_Member& AddMembersChannelRequest::members(int index) const {
  // @@protoc_insertion_point(field_get:srv.AddMembersChannelRequest.members)
  return _internal_members(index);
}
inline ::msg::Channel_Member* AddMembersChannelRequest::_internal_add_members() {
  return members_.Add();
}
inline ::msg::Channel_Member* AddMembersChannelRequest::add_members() {
  // @@protoc_insertion_point(field_add:srv.AddMembersChannelRequest.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Channel_Member >&
AddMembersChannelRequest::members() const {
  // @@protoc_insertion_point(field_list:srv.AddMembersChannelRequest.members)
  return members_;
}

// -------------------------------------------------------------------

// RemoveMemberChannelRequest

// uint64 channel_id = 1;
inline void RemoveMemberChannelRequest::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveMemberChannelRequest::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveMemberChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:srv.RemoveMemberChannelRequest.channel_id)
  return _internal_channel_id();
}
inline void RemoveMemberChannelRequest::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void RemoveMemberChannelRequest::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:srv.RemoveMemberChannelRequest.channel_id)
}

// uint64 user_id = 2;
inline void RemoveMemberChannelRequest::clear_user_id() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveMemberChannelRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RemoveMemberChannelRequest::user_id() const {
  // @@protoc_insertion_point(field_get:srv.RemoveMemberChannelRequest.user_id)
  return _internal_user_id();
}
inline void RemoveMemberChannelRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_id_ = value;
}
inline void RemoveMemberChannelRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:srv.RemoveMemberChannelRequest.user_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_channel_5fservice_2eproto
