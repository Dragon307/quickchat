// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "internal_message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payload_2eproto;
namespace msg {
class WebSocketIncomingMessage;
class WebSocketIncomingMessageDefaultTypeInternal;
extern WebSocketIncomingMessageDefaultTypeInternal _WebSocketIncomingMessage_default_instance_;
class WebSocketOutgoingMessage;
class WebSocketOutgoingMessageDefaultTypeInternal;
extern WebSocketOutgoingMessageDefaultTypeInternal _WebSocketOutgoingMessage_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::WebSocketIncomingMessage* Arena::CreateMaybeMessage<::msg::WebSocketIncomingMessage>(Arena*);
template<> ::msg::WebSocketOutgoingMessage* Arena::CreateMaybeMessage<::msg::WebSocketOutgoingMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

// ===================================================================

class WebSocketOutgoingMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.WebSocketOutgoingMessage) */ {
 public:
  inline WebSocketOutgoingMessage() : WebSocketOutgoingMessage(nullptr) {};
  virtual ~WebSocketOutgoingMessage();

  WebSocketOutgoingMessage(const WebSocketOutgoingMessage& from);
  WebSocketOutgoingMessage(WebSocketOutgoingMessage&& from) noexcept
    : WebSocketOutgoingMessage() {
    *this = ::std::move(from);
  }

  inline WebSocketOutgoingMessage& operator=(const WebSocketOutgoingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebSocketOutgoingMessage& operator=(WebSocketOutgoingMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WebSocketOutgoingMessage& default_instance();

  enum TypeCase {
    kChat = 1,
    kSeen = 2,
    kStatus = 3,
    kTyping = 4,
    kNotification = 6,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebSocketOutgoingMessage* internal_default_instance() {
    return reinterpret_cast<const WebSocketOutgoingMessage*>(
               &_WebSocketOutgoingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebSocketOutgoingMessage& a, WebSocketOutgoingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WebSocketOutgoingMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebSocketOutgoingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebSocketOutgoingMessage* New() const final {
    return CreateMaybeMessage<WebSocketOutgoingMessage>(nullptr);
  }

  WebSocketOutgoingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebSocketOutgoingMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WebSocketOutgoingMessage& from);
  void MergeFrom(const WebSocketOutgoingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebSocketOutgoingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.WebSocketOutgoingMessage";
  }
  protected:
  explicit WebSocketOutgoingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatFieldNumber = 1,
    kSeenFieldNumber = 2,
    kStatusFieldNumber = 3,
    kTypingFieldNumber = 4,
    kNotificationFieldNumber = 6,
  };
  // .msg.Chat chat = 1;
  bool has_chat() const;
  private:
  bool _internal_has_chat() const;
  public:
  void clear_chat();
  const ::msg::Chat& chat() const;
  ::msg::Chat* release_chat();
  ::msg::Chat* mutable_chat();
  void set_allocated_chat(::msg::Chat* chat);
  private:
  const ::msg::Chat& _internal_chat() const;
  ::msg::Chat* _internal_mutable_chat();
  public:
  void unsafe_arena_set_allocated_chat(
      ::msg::Chat* chat);
  ::msg::Chat* unsafe_arena_release_chat();

  // .msg.Seen seen = 2;
  bool has_seen() const;
  private:
  bool _internal_has_seen() const;
  public:
  void clear_seen();
  const ::msg::Seen& seen() const;
  ::msg::Seen* release_seen();
  ::msg::Seen* mutable_seen();
  void set_allocated_seen(::msg::Seen* seen);
  private:
  const ::msg::Seen& _internal_seen() const;
  ::msg::Seen* _internal_mutable_seen();
  public:
  void unsafe_arena_set_allocated_seen(
      ::msg::Seen* seen);
  ::msg::Seen* unsafe_arena_release_seen();

  // .msg.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::msg::Status& status() const;
  ::msg::Status* release_status();
  ::msg::Status* mutable_status();
  void set_allocated_status(::msg::Status* status);
  private:
  const ::msg::Status& _internal_status() const;
  ::msg::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::msg::Status* status);
  ::msg::Status* unsafe_arena_release_status();

  // .msg.Typing typing = 4;
  bool has_typing() const;
  private:
  bool _internal_has_typing() const;
  public:
  void clear_typing();
  const ::msg::Typing& typing() const;
  ::msg::Typing* release_typing();
  ::msg::Typing* mutable_typing();
  void set_allocated_typing(::msg::Typing* typing);
  private:
  const ::msg::Typing& _internal_typing() const;
  ::msg::Typing* _internal_mutable_typing();
  public:
  void unsafe_arena_set_allocated_typing(
      ::msg::Typing* typing);
  ::msg::Typing* unsafe_arena_release_typing();

  // .msg.Notification notification = 6;
  bool has_notification() const;
  private:
  bool _internal_has_notification() const;
  public:
  void clear_notification();
  const ::msg::Notification& notification() const;
  ::msg::Notification* release_notification();
  ::msg::Notification* mutable_notification();
  void set_allocated_notification(::msg::Notification* notification);
  private:
  const ::msg::Notification& _internal_notification() const;
  ::msg::Notification* _internal_mutable_notification();
  public:
  void unsafe_arena_set_allocated_notification(
      ::msg::Notification* notification);
  ::msg::Notification* unsafe_arena_release_notification();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:msg.WebSocketOutgoingMessage)
 private:
  class _Internal;
  void set_has_chat();
  void set_has_seen();
  void set_has_status();
  void set_has_typing();
  void set_has_notification();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    TypeUnion() {}
    ::msg::Chat* chat_;
    ::msg::Seen* seen_;
    ::msg::Status* status_;
    ::msg::Typing* typing_;
    ::msg::Notification* notification_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class WebSocketIncomingMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.WebSocketIncomingMessage) */ {
 public:
  inline WebSocketIncomingMessage() : WebSocketIncomingMessage(nullptr) {};
  virtual ~WebSocketIncomingMessage();

  WebSocketIncomingMessage(const WebSocketIncomingMessage& from);
  WebSocketIncomingMessage(WebSocketIncomingMessage&& from) noexcept
    : WebSocketIncomingMessage() {
    *this = ::std::move(from);
  }

  inline WebSocketIncomingMessage& operator=(const WebSocketIncomingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebSocketIncomingMessage& operator=(WebSocketIncomingMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WebSocketIncomingMessage& default_instance();

  enum TypeCase {
    kChat = 1,
    kSeen = 2,
    kStatus = 3,
    kTyping = 4,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebSocketIncomingMessage* internal_default_instance() {
    return reinterpret_cast<const WebSocketIncomingMessage*>(
               &_WebSocketIncomingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WebSocketIncomingMessage& a, WebSocketIncomingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WebSocketIncomingMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebSocketIncomingMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebSocketIncomingMessage* New() const final {
    return CreateMaybeMessage<WebSocketIncomingMessage>(nullptr);
  }

  WebSocketIncomingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebSocketIncomingMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WebSocketIncomingMessage& from);
  void MergeFrom(const WebSocketIncomingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebSocketIncomingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.WebSocketIncomingMessage";
  }
  protected:
  explicit WebSocketIncomingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatFieldNumber = 1,
    kSeenFieldNumber = 2,
    kStatusFieldNumber = 3,
    kTypingFieldNumber = 4,
  };
  // .msg.Chat chat = 1;
  bool has_chat() const;
  private:
  bool _internal_has_chat() const;
  public:
  void clear_chat();
  const ::msg::Chat& chat() const;
  ::msg::Chat* release_chat();
  ::msg::Chat* mutable_chat();
  void set_allocated_chat(::msg::Chat* chat);
  private:
  const ::msg::Chat& _internal_chat() const;
  ::msg::Chat* _internal_mutable_chat();
  public:
  void unsafe_arena_set_allocated_chat(
      ::msg::Chat* chat);
  ::msg::Chat* unsafe_arena_release_chat();

  // .msg.Seen seen = 2;
  bool has_seen() const;
  private:
  bool _internal_has_seen() const;
  public:
  void clear_seen();
  const ::msg::Seen& seen() const;
  ::msg::Seen* release_seen();
  ::msg::Seen* mutable_seen();
  void set_allocated_seen(::msg::Seen* seen);
  private:
  const ::msg::Seen& _internal_seen() const;
  ::msg::Seen* _internal_mutable_seen();
  public:
  void unsafe_arena_set_allocated_seen(
      ::msg::Seen* seen);
  ::msg::Seen* unsafe_arena_release_seen();

  // .msg.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::msg::Status& status() const;
  ::msg::Status* release_status();
  ::msg::Status* mutable_status();
  void set_allocated_status(::msg::Status* status);
  private:
  const ::msg::Status& _internal_status() const;
  ::msg::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::msg::Status* status);
  ::msg::Status* unsafe_arena_release_status();

  // .msg.Typing typing = 4;
  bool has_typing() const;
  private:
  bool _internal_has_typing() const;
  public:
  void clear_typing();
  const ::msg::Typing& typing() const;
  ::msg::Typing* release_typing();
  ::msg::Typing* mutable_typing();
  void set_allocated_typing(::msg::Typing* typing);
  private:
  const ::msg::Typing& _internal_typing() const;
  ::msg::Typing* _internal_mutable_typing();
  public:
  void unsafe_arena_set_allocated_typing(
      ::msg::Typing* typing);
  ::msg::Typing* unsafe_arena_release_typing();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:msg.WebSocketIncomingMessage)
 private:
  class _Internal;
  void set_has_chat();
  void set_has_seen();
  void set_has_status();
  void set_has_typing();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    TypeUnion() {}
    ::msg::Chat* chat_;
    ::msg::Seen* seen_;
    ::msg::Status* status_;
    ::msg::Typing* typing_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_payload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebSocketOutgoingMessage

// .msg.Chat chat = 1;
inline bool WebSocketOutgoingMessage::_internal_has_chat() const {
  return type_case() == kChat;
}
inline bool WebSocketOutgoingMessage::has_chat() const {
  return _internal_has_chat();
}
inline void WebSocketOutgoingMessage::set_has_chat() {
  _oneof_case_[0] = kChat;
}
inline ::msg::Chat* WebSocketOutgoingMessage::release_chat() {
  // @@protoc_insertion_point(field_release:msg.WebSocketOutgoingMessage.chat)
  if (_internal_has_chat()) {
    clear_has_type();
      ::msg::Chat* temp = type_.chat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::Chat& WebSocketOutgoingMessage::_internal_chat() const {
  return _internal_has_chat()
      ? *type_.chat_
      : *reinterpret_cast< ::msg::Chat*>(&::msg::_Chat_default_instance_);
}
inline const ::msg::Chat& WebSocketOutgoingMessage::chat() const {
  // @@protoc_insertion_point(field_get:msg.WebSocketOutgoingMessage.chat)
  return _internal_chat();
}
inline ::msg::Chat* WebSocketOutgoingMessage::unsafe_arena_release_chat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.WebSocketOutgoingMessage.chat)
  if (_internal_has_chat()) {
    clear_has_type();
    ::msg::Chat* temp = type_.chat_;
    type_.chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WebSocketOutgoingMessage::unsafe_arena_set_allocated_chat(::msg::Chat* chat) {
  clear_type();
  if (chat) {
    set_has_chat();
    type_.chat_ = chat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.WebSocketOutgoingMessage.chat)
}
inline ::msg::Chat* WebSocketOutgoingMessage::_internal_mutable_chat() {
  if (!_internal_has_chat()) {
    clear_type();
    set_has_chat();
    type_.chat_ = CreateMaybeMessage< ::msg::Chat >(GetArena());
  }
  return type_.chat_;
}
inline ::msg::Chat* WebSocketOutgoingMessage::mutable_chat() {
  // @@protoc_insertion_point(field_mutable:msg.WebSocketOutgoingMessage.chat)
  return _internal_mutable_chat();
}

// .msg.Seen seen = 2;
inline bool WebSocketOutgoingMessage::_internal_has_seen() const {
  return type_case() == kSeen;
}
inline bool WebSocketOutgoingMessage::has_seen() const {
  return _internal_has_seen();
}
inline void WebSocketOutgoingMessage::set_has_seen() {
  _oneof_case_[0] = kSeen;
}
inline ::msg::Seen* WebSocketOutgoingMessage::release_seen() {
  // @@protoc_insertion_point(field_release:msg.WebSocketOutgoingMessage.seen)
  if (_internal_has_seen()) {
    clear_has_type();
      ::msg::Seen* temp = type_.seen_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.seen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::Seen& WebSocketOutgoingMessage::_internal_seen() const {
  return _internal_has_seen()
      ? *type_.seen_
      : *reinterpret_cast< ::msg::Seen*>(&::msg::_Seen_default_instance_);
}
inline const ::msg::Seen& WebSocketOutgoingMessage::seen() const {
  // @@protoc_insertion_point(field_get:msg.WebSocketOutgoingMessage.seen)
  return _internal_seen();
}
inline ::msg::Seen* WebSocketOutgoingMessage::unsafe_arena_release_seen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.WebSocketOutgoingMessage.seen)
  if (_internal_has_seen()) {
    clear_has_type();
    ::msg::Seen* temp = type_.seen_;
    type_.seen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WebSocketOutgoingMessage::unsafe_arena_set_allocated_seen(::msg::Seen* seen) {
  clear_type();
  if (seen) {
    set_has_seen();
    type_.seen_ = seen;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.WebSocketOutgoingMessage.seen)
}
inline ::msg::Seen* WebSocketOutgoingMessage::_internal_mutable_seen() {
  if (!_internal_has_seen()) {
    clear_type();
    set_has_seen();
    type_.seen_ = CreateMaybeMessage< ::msg::Seen >(GetArena());
  }
  return type_.seen_;
}
inline ::msg::Seen* WebSocketOutgoingMessage::mutable_seen() {
  // @@protoc_insertion_point(field_mutable:msg.WebSocketOutgoingMessage.seen)
  return _internal_mutable_seen();
}

// .msg.Status status = 3;
inline bool WebSocketOutgoingMessage::_internal_has_status() const {
  return type_case() == kStatus;
}
inline bool WebSocketOutgoingMessage::has_status() const {
  return _internal_has_status();
}
inline void WebSocketOutgoingMessage::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline ::msg::Status* WebSocketOutgoingMessage::release_status() {
  // @@protoc_insertion_point(field_release:msg.WebSocketOutgoingMessage.status)
  if (_internal_has_status()) {
    clear_has_type();
      ::msg::Status* temp = type_.status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::Status& WebSocketOutgoingMessage::_internal_status() const {
  return _internal_has_status()
      ? *type_.status_
      : *reinterpret_cast< ::msg::Status*>(&::msg::_Status_default_instance_);
}
inline const ::msg::Status& WebSocketOutgoingMessage::status() const {
  // @@protoc_insertion_point(field_get:msg.WebSocketOutgoingMessage.status)
  return _internal_status();
}
inline ::msg::Status* WebSocketOutgoingMessage::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.WebSocketOutgoingMessage.status)
  if (_internal_has_status()) {
    clear_has_type();
    ::msg::Status* temp = type_.status_;
    type_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WebSocketOutgoingMessage::unsafe_arena_set_allocated_status(::msg::Status* status) {
  clear_type();
  if (status) {
    set_has_status();
    type_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.WebSocketOutgoingMessage.status)
}
inline ::msg::Status* WebSocketOutgoingMessage::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_type();
    set_has_status();
    type_.status_ = CreateMaybeMessage< ::msg::Status >(GetArena());
  }
  return type_.status_;
}
inline ::msg::Status* WebSocketOutgoingMessage::mutable_status() {
  // @@protoc_insertion_point(field_mutable:msg.WebSocketOutgoingMessage.status)
  return _internal_mutable_status();
}

// .msg.Typing typing = 4;
inline bool WebSocketOutgoingMessage::_internal_has_typing() const {
  return type_case() == kTyping;
}
inline bool WebSocketOutgoingMessage::has_typing() const {
  return _internal_has_typing();
}
inline void WebSocketOutgoingMessage::set_has_typing() {
  _oneof_case_[0] = kTyping;
}
inline ::msg::Typing* WebSocketOutgoingMessage::release_typing() {
  // @@protoc_insertion_point(field_release:msg.WebSocketOutgoingMessage.typing)
  if (_internal_has_typing()) {
    clear_has_type();
      ::msg::Typing* temp = type_.typing_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.typing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::Typing& WebSocketOutgoingMessage::_internal_typing() const {
  return _internal_has_typing()
      ? *type_.typing_
      : *reinterpret_cast< ::msg::Typing*>(&::msg::_Typing_default_instance_);
}
inline const ::msg::Typing& WebSocketOutgoingMessage::typing() const {
  // @@protoc_insertion_point(field_get:msg.WebSocketOutgoingMessage.typing)
  return _internal_typing();
}
inline ::msg::Typing* WebSocketOutgoingMessage::unsafe_arena_release_typing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.WebSocketOutgoingMessage.typing)
  if (_internal_has_typing()) {
    clear_has_type();
    ::msg::Typing* temp = type_.typing_;
    type_.typing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WebSocketOutgoingMessage::unsafe_arena_set_allocated_typing(::msg::Typing* typing) {
  clear_type();
  if (typing) {
    set_has_typing();
    type_.typing_ = typing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.WebSocketOutgoingMessage.typing)
}
inline ::msg::Typing* WebSocketOutgoingMessage::_internal_mutable_typing() {
  if (!_internal_has_typing()) {
    clear_type();
    set_has_typing();
    type_.typing_ = CreateMaybeMessage< ::msg::Typing >(GetArena());
  }
  return type_.typing_;
}
inline ::msg::Typing* WebSocketOutgoingMessage::mutable_typing() {
  // @@protoc_insertion_point(field_mutable:msg.WebSocketOutgoingMessage.typing)
  return _internal_mutable_typing();
}

// .msg.Notification notification = 6;
inline bool WebSocketOutgoingMessage::_internal_has_notification() const {
  return type_case() == kNotification;
}
inline bool WebSocketOutgoingMessage::has_notification() const {
  return _internal_has_notification();
}
inline void WebSocketOutgoingMessage::set_has_notification() {
  _oneof_case_[0] = kNotification;
}
inline ::msg::Notification* WebSocketOutgoingMessage::release_notification() {
  // @@protoc_insertion_point(field_release:msg.WebSocketOutgoingMessage.notification)
  if (_internal_has_notification()) {
    clear_has_type();
      ::msg::Notification* temp = type_.notification_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::Notification& WebSocketOutgoingMessage::_internal_notification() const {
  return _internal_has_notification()
      ? *type_.notification_
      : *reinterpret_cast< ::msg::Notification*>(&::msg::_Notification_default_instance_);
}
inline const ::msg::Notification& WebSocketOutgoingMessage::notification() const {
  // @@protoc_insertion_point(field_get:msg.WebSocketOutgoingMessage.notification)
  return _internal_notification();
}
inline ::msg::Notification* WebSocketOutgoingMessage::unsafe_arena_release_notification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.WebSocketOutgoingMessage.notification)
  if (_internal_has_notification()) {
    clear_has_type();
    ::msg::Notification* temp = type_.notification_;
    type_.notification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WebSocketOutgoingMessage::unsafe_arena_set_allocated_notification(::msg::Notification* notification) {
  clear_type();
  if (notification) {
    set_has_notification();
    type_.notification_ = notification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.WebSocketOutgoingMessage.notification)
}
inline ::msg::Notification* WebSocketOutgoingMessage::_internal_mutable_notification() {
  if (!_internal_has_notification()) {
    clear_type();
    set_has_notification();
    type_.notification_ = CreateMaybeMessage< ::msg::Notification >(GetArena());
  }
  return type_.notification_;
}
inline ::msg::Notification* WebSocketOutgoingMessage::mutable_notification() {
  // @@protoc_insertion_point(field_mutable:msg.WebSocketOutgoingMessage.notification)
  return _internal_mutable_notification();
}

inline bool WebSocketOutgoingMessage::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void WebSocketOutgoingMessage::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline WebSocketOutgoingMessage::TypeCase WebSocketOutgoingMessage::type_case() const {
  return WebSocketOutgoingMessage::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WebSocketIncomingMessage

// .msg.Chat chat = 1;
inline bool WebSocketIncomingMessage::_internal_has_chat() const {
  return type_case() == kChat;
}
inline bool WebSocketIncomingMessage::has_chat() const {
  return _internal_has_chat();
}
inline void WebSocketIncomingMessage::set_has_chat() {
  _oneof_case_[0] = kChat;
}
inline ::msg::Chat* WebSocketIncomingMessage::release_chat() {
  // @@protoc_insertion_point(field_release:msg.WebSocketIncomingMessage.chat)
  if (_internal_has_chat()) {
    clear_has_type();
      ::msg::Chat* temp = type_.chat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::Chat& WebSocketIncomingMessage::_internal_chat() const {
  return _internal_has_chat()
      ? *type_.chat_
      : *reinterpret_cast< ::msg::Chat*>(&::msg::_Chat_default_instance_);
}
inline const ::msg::Chat& WebSocketIncomingMessage::chat() const {
  // @@protoc_insertion_point(field_get:msg.WebSocketIncomingMessage.chat)
  return _internal_chat();
}
inline ::msg::Chat* WebSocketIncomingMessage::unsafe_arena_release_chat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.WebSocketIncomingMessage.chat)
  if (_internal_has_chat()) {
    clear_has_type();
    ::msg::Chat* temp = type_.chat_;
    type_.chat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WebSocketIncomingMessage::unsafe_arena_set_allocated_chat(::msg::Chat* chat) {
  clear_type();
  if (chat) {
    set_has_chat();
    type_.chat_ = chat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.WebSocketIncomingMessage.chat)
}
inline ::msg::Chat* WebSocketIncomingMessage::_internal_mutable_chat() {
  if (!_internal_has_chat()) {
    clear_type();
    set_has_chat();
    type_.chat_ = CreateMaybeMessage< ::msg::Chat >(GetArena());
  }
  return type_.chat_;
}
inline ::msg::Chat* WebSocketIncomingMessage::mutable_chat() {
  // @@protoc_insertion_point(field_mutable:msg.WebSocketIncomingMessage.chat)
  return _internal_mutable_chat();
}

// .msg.Seen seen = 2;
inline bool WebSocketIncomingMessage::_internal_has_seen() const {
  return type_case() == kSeen;
}
inline bool WebSocketIncomingMessage::has_seen() const {
  return _internal_has_seen();
}
inline void WebSocketIncomingMessage::set_has_seen() {
  _oneof_case_[0] = kSeen;
}
inline ::msg::Seen* WebSocketIncomingMessage::release_seen() {
  // @@protoc_insertion_point(field_release:msg.WebSocketIncomingMessage.seen)
  if (_internal_has_seen()) {
    clear_has_type();
      ::msg::Seen* temp = type_.seen_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.seen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::Seen& WebSocketIncomingMessage::_internal_seen() const {
  return _internal_has_seen()
      ? *type_.seen_
      : *reinterpret_cast< ::msg::Seen*>(&::msg::_Seen_default_instance_);
}
inline const ::msg::Seen& WebSocketIncomingMessage::seen() const {
  // @@protoc_insertion_point(field_get:msg.WebSocketIncomingMessage.seen)
  return _internal_seen();
}
inline ::msg::Seen* WebSocketIncomingMessage::unsafe_arena_release_seen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.WebSocketIncomingMessage.seen)
  if (_internal_has_seen()) {
    clear_has_type();
    ::msg::Seen* temp = type_.seen_;
    type_.seen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WebSocketIncomingMessage::unsafe_arena_set_allocated_seen(::msg::Seen* seen) {
  clear_type();
  if (seen) {
    set_has_seen();
    type_.seen_ = seen;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.WebSocketIncomingMessage.seen)
}
inline ::msg::Seen* WebSocketIncomingMessage::_internal_mutable_seen() {
  if (!_internal_has_seen()) {
    clear_type();
    set_has_seen();
    type_.seen_ = CreateMaybeMessage< ::msg::Seen >(GetArena());
  }
  return type_.seen_;
}
inline ::msg::Seen* WebSocketIncomingMessage::mutable_seen() {
  // @@protoc_insertion_point(field_mutable:msg.WebSocketIncomingMessage.seen)
  return _internal_mutable_seen();
}

// .msg.Status status = 3;
inline bool WebSocketIncomingMessage::_internal_has_status() const {
  return type_case() == kStatus;
}
inline bool WebSocketIncomingMessage::has_status() const {
  return _internal_has_status();
}
inline void WebSocketIncomingMessage::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline ::msg::Status* WebSocketIncomingMessage::release_status() {
  // @@protoc_insertion_point(field_release:msg.WebSocketIncomingMessage.status)
  if (_internal_has_status()) {
    clear_has_type();
      ::msg::Status* temp = type_.status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::Status& WebSocketIncomingMessage::_internal_status() const {
  return _internal_has_status()
      ? *type_.status_
      : *reinterpret_cast< ::msg::Status*>(&::msg::_Status_default_instance_);
}
inline const ::msg::Status& WebSocketIncomingMessage::status() const {
  // @@protoc_insertion_point(field_get:msg.WebSocketIncomingMessage.status)
  return _internal_status();
}
inline ::msg::Status* WebSocketIncomingMessage::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.WebSocketIncomingMessage.status)
  if (_internal_has_status()) {
    clear_has_type();
    ::msg::Status* temp = type_.status_;
    type_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WebSocketIncomingMessage::unsafe_arena_set_allocated_status(::msg::Status* status) {
  clear_type();
  if (status) {
    set_has_status();
    type_.status_ = status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.WebSocketIncomingMessage.status)
}
inline ::msg::Status* WebSocketIncomingMessage::_internal_mutable_status() {
  if (!_internal_has_status()) {
    clear_type();
    set_has_status();
    type_.status_ = CreateMaybeMessage< ::msg::Status >(GetArena());
  }
  return type_.status_;
}
inline ::msg::Status* WebSocketIncomingMessage::mutable_status() {
  // @@protoc_insertion_point(field_mutable:msg.WebSocketIncomingMessage.status)
  return _internal_mutable_status();
}

// .msg.Typing typing = 4;
inline bool WebSocketIncomingMessage::_internal_has_typing() const {
  return type_case() == kTyping;
}
inline bool WebSocketIncomingMessage::has_typing() const {
  return _internal_has_typing();
}
inline void WebSocketIncomingMessage::set_has_typing() {
  _oneof_case_[0] = kTyping;
}
inline ::msg::Typing* WebSocketIncomingMessage::release_typing() {
  // @@protoc_insertion_point(field_release:msg.WebSocketIncomingMessage.typing)
  if (_internal_has_typing()) {
    clear_has_type();
      ::msg::Typing* temp = type_.typing_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.typing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::msg::Typing& WebSocketIncomingMessage::_internal_typing() const {
  return _internal_has_typing()
      ? *type_.typing_
      : *reinterpret_cast< ::msg::Typing*>(&::msg::_Typing_default_instance_);
}
inline const ::msg::Typing& WebSocketIncomingMessage::typing() const {
  // @@protoc_insertion_point(field_get:msg.WebSocketIncomingMessage.typing)
  return _internal_typing();
}
inline ::msg::Typing* WebSocketIncomingMessage::unsafe_arena_release_typing() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.WebSocketIncomingMessage.typing)
  if (_internal_has_typing()) {
    clear_has_type();
    ::msg::Typing* temp = type_.typing_;
    type_.typing_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WebSocketIncomingMessage::unsafe_arena_set_allocated_typing(::msg::Typing* typing) {
  clear_type();
  if (typing) {
    set_has_typing();
    type_.typing_ = typing;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.WebSocketIncomingMessage.typing)
}
inline ::msg::Typing* WebSocketIncomingMessage::_internal_mutable_typing() {
  if (!_internal_has_typing()) {
    clear_type();
    set_has_typing();
    type_.typing_ = CreateMaybeMessage< ::msg::Typing >(GetArena());
  }
  return type_.typing_;
}
inline ::msg::Typing* WebSocketIncomingMessage::mutable_typing() {
  // @@protoc_insertion_point(field_mutable:msg.WebSocketIncomingMessage.typing)
  return _internal_mutable_typing();
}

inline bool WebSocketIncomingMessage::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void WebSocketIncomingMessage::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline WebSocketIncomingMessage::TypeCase WebSocketIncomingMessage::type_case() const {
  return WebSocketIncomingMessage::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payload_2eproto
