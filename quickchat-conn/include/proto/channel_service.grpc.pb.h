// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: channel_service.proto
#ifndef GRPC_channel_5fservice_2eproto__INCLUDED
#define GRPC_channel_5fservice_2eproto__INCLUDED

#include "channel_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace srv {

class ChannelService final {
 public:
  static constexpr char const* service_full_name() {
    return "srv.ChannelService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::msg::Channel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>> AsyncGetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>>(AsyncGetChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>> PrepareAsyncGetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>>(PrepareAsyncGetChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::msg::Channel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>> AsyncCreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>>(AsyncCreateChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>> PrepareAsyncCreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>>(PrepareAsyncCreateChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::msg::Channel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>> AsyncUpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>>(AsyncUpdateChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>> PrepareAsyncUpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>>(PrepareAsyncUpdateChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteChannelRaw(context, request, cq));
    }
    // custom
    virtual ::grpc::Status ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::srv::ListUserChannelsReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserChannelsReponse>> AsyncListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserChannelsReponse>>(AsyncListUserChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserChannelsReponse>> PrepareAsyncListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserChannelsReponse>>(PrepareAsyncListUserChannelsRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::srv::CheckIsMemberChannelReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberChannelReponse>> AsyncCheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberChannelReponse>>(AsyncCheckIsMemberChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberChannelReponse>> PrepareAsyncCheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberChannelReponse>>(PrepareAsyncCheckIsMemberChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::srv::CheckIsMemberAndGetChannelReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberAndGetChannelReponse>> AsyncCheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberAndGetChannelReponse>>(AsyncCheckIsMemberAndGetChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberAndGetChannelReponse>> PrepareAsyncCheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberAndGetChannelReponse>>(PrepareAsyncCheckIsMemberAndGetChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::msg::Channel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>> AsyncAddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>>(AsyncAddMembersChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>> PrepareAsyncAddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>>(PrepareAsyncAddMembersChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::msg::Channel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>> AsyncRemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>>(AsyncRemoveMemberChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>> PrepareAsyncRemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>>(PrepareAsyncRemoveMemberChannelRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // custom
      virtual void ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListUserChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserChannelsReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListUserChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserChannelsReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListUserChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserChannelsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckIsMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberChannelReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckIsMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberChannelReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckIsMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberAndGetChannelReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberAndGetChannelReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberAndGetChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddMembersChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddMembersChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddMembersChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>* AsyncGetChannelRaw(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>* PrepareAsyncGetChannelRaw(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>* AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>* PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>* AsyncUpdateChannelRaw(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>* PrepareAsyncUpdateChannelRaw(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserChannelsReponse>* AsyncListUserChannelsRaw(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserChannelsReponse>* PrepareAsyncListUserChannelsRaw(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberChannelReponse>* AsyncCheckIsMemberChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberChannelReponse>* PrepareAsyncCheckIsMemberChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberAndGetChannelReponse>* AsyncCheckIsMemberAndGetChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::CheckIsMemberAndGetChannelReponse>* PrepareAsyncCheckIsMemberAndGetChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>* AsyncAddMembersChannelRaw(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>* PrepareAsyncAddMembersChannelRaw(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>* AsyncRemoveMemberChannelRaw(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Channel>* PrepareAsyncRemoveMemberChannelRaw(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::msg::Channel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>> AsyncGetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>>(AsyncGetChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>> PrepareAsyncGetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>>(PrepareAsyncGetChannelRaw(context, request, cq));
    }
    ::grpc::Status CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::msg::Channel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>> AsyncCreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>>(AsyncCreateChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>> PrepareAsyncCreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>>(PrepareAsyncCreateChannelRaw(context, request, cq));
    }
    ::grpc::Status UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::msg::Channel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>> AsyncUpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>>(AsyncUpdateChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>> PrepareAsyncUpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>>(PrepareAsyncUpdateChannelRaw(context, request, cq));
    }
    ::grpc::Status DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteChannelRaw(context, request, cq));
    }
    ::grpc::Status ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::srv::ListUserChannelsReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::ListUserChannelsReponse>> AsyncListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::ListUserChannelsReponse>>(AsyncListUserChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::ListUserChannelsReponse>> PrepareAsyncListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::ListUserChannelsReponse>>(PrepareAsyncListUserChannelsRaw(context, request, cq));
    }
    ::grpc::Status CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::srv::CheckIsMemberChannelReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberChannelReponse>> AsyncCheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberChannelReponse>>(AsyncCheckIsMemberChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberChannelReponse>> PrepareAsyncCheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberChannelReponse>>(PrepareAsyncCheckIsMemberChannelRaw(context, request, cq));
    }
    ::grpc::Status CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::srv::CheckIsMemberAndGetChannelReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberAndGetChannelReponse>> AsyncCheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberAndGetChannelReponse>>(AsyncCheckIsMemberAndGetChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberAndGetChannelReponse>> PrepareAsyncCheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberAndGetChannelReponse>>(PrepareAsyncCheckIsMemberAndGetChannelRaw(context, request, cq));
    }
    ::grpc::Status AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::msg::Channel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>> AsyncAddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>>(AsyncAddMembersChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>> PrepareAsyncAddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>>(PrepareAsyncAddMembersChannelRaw(context, request, cq));
    }
    ::grpc::Status RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::msg::Channel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>> AsyncRemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>>(AsyncRemoveMemberChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>> PrepareAsyncRemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Channel>>(PrepareAsyncRemoveMemberChannelRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) override;
      void GetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) override;
      void CreateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) override;
      void UpdateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response, std::function<void(::grpc::Status)>) override;
      void ListUserChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserChannelsReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListUserChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserChannelsReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListUserChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserChannelsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response, std::function<void(::grpc::Status)>) override;
      void CheckIsMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberChannelReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckIsMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberChannelReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckIsMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response, std::function<void(::grpc::Status)>) override;
      void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberAndGetChannelReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberAndGetChannelReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberAndGetChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) override;
      void AddMembersChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddMembersChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddMembersChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) override;
      void RemoveMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::msg::Channel>* AsyncGetChannelRaw(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Channel>* PrepareAsyncGetChannelRaw(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Channel>* AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Channel>* PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Channel>* AsyncUpdateChannelRaw(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Channel>* PrepareAsyncUpdateChannelRaw(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::ListUserChannelsReponse>* AsyncListUserChannelsRaw(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::ListUserChannelsReponse>* PrepareAsyncListUserChannelsRaw(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberChannelReponse>* AsyncCheckIsMemberChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberChannelReponse>* PrepareAsyncCheckIsMemberChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberAndGetChannelReponse>* AsyncCheckIsMemberAndGetChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberAndGetChannelReponse>* PrepareAsyncCheckIsMemberAndGetChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Channel>* AsyncAddMembersChannelRaw(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Channel>* PrepareAsyncAddMembersChannelRaw(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Channel>* AsyncRemoveMemberChannelRaw(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Channel>* PrepareAsyncRemoveMemberChannelRaw(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_ListUserChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckIsMemberChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckIsMemberAndGetChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_AddMembersChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveMemberChannel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetChannel(::grpc::ServerContext* context, const ::srv::GetChannelRequest* request, ::msg::Channel* response);
    virtual ::grpc::Status CreateChannel(::grpc::ServerContext* context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response);
    virtual ::grpc::Status UpdateChannel(::grpc::ServerContext* context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response);
    virtual ::grpc::Status DeleteChannel(::grpc::ServerContext* context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response);
    // custom
    virtual ::grpc::Status ListUserChannels(::grpc::ServerContext* context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response);
    virtual ::grpc::Status CheckIsMemberChannel(::grpc::ServerContext* context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response);
    virtual ::grpc::Status CheckIsMemberAndGetChannel(::grpc::ServerContext* context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response);
    virtual ::grpc::Status AddMembersChannel(::grpc::ServerContext* context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response);
    virtual ::grpc::Status RemoveMemberChannel(::grpc::ServerContext* context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChannel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::srv::GetChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChannel(::grpc::ServerContext* context, ::srv::GetChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::msg::Channel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateChannel() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::srv::CreateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChannel(::grpc::ServerContext* context, ::srv::CreateChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::msg::Channel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateChannel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateChannel(::grpc::ServerContext* /*context*/, const ::srv::UpdateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateChannel(::grpc::ServerContext* context, ::srv::UpdateChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::msg::Channel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteChannel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::srv::DeleteChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteChannel(::grpc::ServerContext* context, ::srv::DeleteChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListUserChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListUserChannels() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListUserChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserChannels(::grpc::ServerContext* /*context*/, const ::srv::ListUserChannelsRequest* /*request*/, ::srv::ListUserChannelsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUserChannels(::grpc::ServerContext* context, ::srv::ListUserChannelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::ListUserChannelsReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckIsMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckIsMemberChannel() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CheckIsMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIsMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberChannelRequest* /*request*/, ::srv::CheckIsMemberChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIsMemberChannel(::grpc::ServerContext* context, ::srv::CheckIsMemberChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::CheckIsMemberChannelReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckIsMemberAndGetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckIsMemberAndGetChannel() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CheckIsMemberAndGetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIsMemberAndGetChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberAndGetChannelRequest* /*request*/, ::srv::CheckIsMemberAndGetChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIsMemberAndGetChannel(::grpc::ServerContext* context, ::srv::CheckIsMemberAndGetChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::CheckIsMemberAndGetChannelReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddMembersChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddMembersChannel() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AddMembersChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddMembersChannel(::grpc::ServerContext* /*context*/, const ::srv::AddMembersChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddMembersChannel(::grpc::ServerContext* context, ::srv::AddMembersChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::msg::Channel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveMemberChannel() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_RemoveMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::RemoveMemberChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveMemberChannel(::grpc::ServerContext* context, ::srv::RemoveMemberChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::msg::Channel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetChannel<WithAsyncMethod_CreateChannel<WithAsyncMethod_UpdateChannel<WithAsyncMethod_DeleteChannel<WithAsyncMethod_ListUserChannels<WithAsyncMethod_CheckIsMemberChannel<WithAsyncMethod_CheckIsMemberAndGetChannel<WithAsyncMethod_AddMembersChannel<WithAsyncMethod_RemoveMemberChannel<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::GetChannelRequest, ::msg::Channel>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::GetChannelRequest* request, ::msg::Channel* response) { return this->GetChannel(context, request, response); }));}
    void SetMessageAllocatorFor_GetChannel(
        ::grpc::experimental::MessageAllocator< ::srv::GetChannelRequest, ::msg::Channel>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::GetChannelRequest, ::msg::Channel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::srv::GetChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::GetChannelRequest* /*request*/, ::msg::Channel* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::GetChannelRequest* /*request*/, ::msg::Channel* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::CreateChannelRequest, ::msg::Channel>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response) { return this->CreateChannel(context, request, response); }));}
    void SetMessageAllocatorFor_CreateChannel(
        ::grpc::experimental::MessageAllocator< ::srv::CreateChannelRequest, ::msg::Channel>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::CreateChannelRequest, ::msg::Channel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::srv::CreateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::CreateChannelRequest* /*request*/, ::msg::Channel* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::CreateChannelRequest* /*request*/, ::msg::Channel* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::UpdateChannelRequest, ::msg::Channel>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response) { return this->UpdateChannel(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateChannel(
        ::grpc::experimental::MessageAllocator< ::srv::UpdateChannelRequest, ::msg::Channel>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::UpdateChannelRequest, ::msg::Channel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateChannel(::grpc::ServerContext* /*context*/, const ::srv::UpdateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::UpdateChannelRequest* /*request*/, ::msg::Channel* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::UpdateChannelRequest* /*request*/, ::msg::Channel* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::DeleteChannelRequest, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response) { return this->DeleteChannel(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteChannel(
        ::grpc::experimental::MessageAllocator< ::srv::DeleteChannelRequest, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::DeleteChannelRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::srv::DeleteChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::DeleteChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::DeleteChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListUserChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListUserChannels() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::ListUserChannelsRequest, ::srv::ListUserChannelsReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response) { return this->ListUserChannels(context, request, response); }));}
    void SetMessageAllocatorFor_ListUserChannels(
        ::grpc::experimental::MessageAllocator< ::srv::ListUserChannelsRequest, ::srv::ListUserChannelsReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::ListUserChannelsRequest, ::srv::ListUserChannelsReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListUserChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserChannels(::grpc::ServerContext* /*context*/, const ::srv::ListUserChannelsRequest* /*request*/, ::srv::ListUserChannelsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListUserChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::ListUserChannelsRequest* /*request*/, ::srv::ListUserChannelsReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListUserChannels(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::ListUserChannelsRequest* /*request*/, ::srv::ListUserChannelsReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckIsMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckIsMemberChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::CheckIsMemberChannelRequest, ::srv::CheckIsMemberChannelReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response) { return this->CheckIsMemberChannel(context, request, response); }));}
    void SetMessageAllocatorFor_CheckIsMemberChannel(
        ::grpc::experimental::MessageAllocator< ::srv::CheckIsMemberChannelRequest, ::srv::CheckIsMemberChannelReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::CheckIsMemberChannelRequest, ::srv::CheckIsMemberChannelReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckIsMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIsMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberChannelRequest* /*request*/, ::srv::CheckIsMemberChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckIsMemberChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::CheckIsMemberChannelRequest* /*request*/, ::srv::CheckIsMemberChannelReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckIsMemberChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::CheckIsMemberChannelRequest* /*request*/, ::srv::CheckIsMemberChannelReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckIsMemberAndGetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckIsMemberAndGetChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::CheckIsMemberAndGetChannelRequest, ::srv::CheckIsMemberAndGetChannelReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response) { return this->CheckIsMemberAndGetChannel(context, request, response); }));}
    void SetMessageAllocatorFor_CheckIsMemberAndGetChannel(
        ::grpc::experimental::MessageAllocator< ::srv::CheckIsMemberAndGetChannelRequest, ::srv::CheckIsMemberAndGetChannelReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::CheckIsMemberAndGetChannelRequest, ::srv::CheckIsMemberAndGetChannelReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckIsMemberAndGetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIsMemberAndGetChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberAndGetChannelRequest* /*request*/, ::srv::CheckIsMemberAndGetChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckIsMemberAndGetChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::CheckIsMemberAndGetChannelRequest* /*request*/, ::srv::CheckIsMemberAndGetChannelReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckIsMemberAndGetChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::CheckIsMemberAndGetChannelRequest* /*request*/, ::srv::CheckIsMemberAndGetChannelReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddMembersChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddMembersChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::AddMembersChannelRequest, ::msg::Channel>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response) { return this->AddMembersChannel(context, request, response); }));}
    void SetMessageAllocatorFor_AddMembersChannel(
        ::grpc::experimental::MessageAllocator< ::srv::AddMembersChannelRequest, ::msg::Channel>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::AddMembersChannelRequest, ::msg::Channel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddMembersChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddMembersChannel(::grpc::ServerContext* /*context*/, const ::srv::AddMembersChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddMembersChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::AddMembersChannelRequest* /*request*/, ::msg::Channel* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddMembersChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::AddMembersChannelRequest* /*request*/, ::msg::Channel* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveMemberChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::RemoveMemberChannelRequest, ::msg::Channel>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response) { return this->RemoveMemberChannel(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveMemberChannel(
        ::grpc::experimental::MessageAllocator< ::srv::RemoveMemberChannelRequest, ::msg::Channel>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::RemoveMemberChannelRequest, ::msg::Channel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::RemoveMemberChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveMemberChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::RemoveMemberChannelRequest* /*request*/, ::msg::Channel* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveMemberChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::RemoveMemberChannelRequest* /*request*/, ::msg::Channel* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetChannel<ExperimentalWithCallbackMethod_CreateChannel<ExperimentalWithCallbackMethod_UpdateChannel<ExperimentalWithCallbackMethod_DeleteChannel<ExperimentalWithCallbackMethod_ListUserChannels<ExperimentalWithCallbackMethod_CheckIsMemberChannel<ExperimentalWithCallbackMethod_CheckIsMemberAndGetChannel<ExperimentalWithCallbackMethod_AddMembersChannel<ExperimentalWithCallbackMethod_RemoveMemberChannel<Service > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetChannel<ExperimentalWithCallbackMethod_CreateChannel<ExperimentalWithCallbackMethod_UpdateChannel<ExperimentalWithCallbackMethod_DeleteChannel<ExperimentalWithCallbackMethod_ListUserChannels<ExperimentalWithCallbackMethod_CheckIsMemberChannel<ExperimentalWithCallbackMethod_CheckIsMemberAndGetChannel<ExperimentalWithCallbackMethod_AddMembersChannel<ExperimentalWithCallbackMethod_RemoveMemberChannel<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChannel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::srv::GetChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateChannel() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::srv::CreateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateChannel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateChannel(::grpc::ServerContext* /*context*/, const ::srv::UpdateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteChannel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::srv::DeleteChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListUserChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListUserChannels() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListUserChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserChannels(::grpc::ServerContext* /*context*/, const ::srv::ListUserChannelsRequest* /*request*/, ::srv::ListUserChannelsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckIsMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckIsMemberChannel() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CheckIsMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIsMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberChannelRequest* /*request*/, ::srv::CheckIsMemberChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckIsMemberAndGetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckIsMemberAndGetChannel() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CheckIsMemberAndGetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIsMemberAndGetChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberAndGetChannelRequest* /*request*/, ::srv::CheckIsMemberAndGetChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddMembersChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddMembersChannel() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AddMembersChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddMembersChannel(::grpc::ServerContext* /*context*/, const ::srv::AddMembersChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveMemberChannel() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_RemoveMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::RemoveMemberChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChannel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::srv::GetChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateChannel() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::srv::CreateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateChannel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateChannel(::grpc::ServerContext* /*context*/, const ::srv::UpdateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteChannel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::srv::DeleteChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListUserChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListUserChannels() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListUserChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserChannels(::grpc::ServerContext* /*context*/, const ::srv::ListUserChannelsRequest* /*request*/, ::srv::ListUserChannelsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUserChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckIsMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckIsMemberChannel() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CheckIsMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIsMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberChannelRequest* /*request*/, ::srv::CheckIsMemberChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIsMemberChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckIsMemberAndGetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckIsMemberAndGetChannel() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CheckIsMemberAndGetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIsMemberAndGetChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberAndGetChannelRequest* /*request*/, ::srv::CheckIsMemberAndGetChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckIsMemberAndGetChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddMembersChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddMembersChannel() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AddMembersChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddMembersChannel(::grpc::ServerContext* /*context*/, const ::srv::AddMembersChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddMembersChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveMemberChannel() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_RemoveMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::RemoveMemberChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveMemberChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::srv::GetChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::srv::CreateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateChannel(::grpc::ServerContext* /*context*/, const ::srv::UpdateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::srv::DeleteChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListUserChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListUserChannels() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListUserChannels(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListUserChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserChannels(::grpc::ServerContext* /*context*/, const ::srv::ListUserChannelsRequest* /*request*/, ::srv::ListUserChannelsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListUserChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListUserChannels(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckIsMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckIsMemberChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckIsMemberChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckIsMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIsMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberChannelRequest* /*request*/, ::srv::CheckIsMemberChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckIsMemberChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckIsMemberChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckIsMemberAndGetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckIsMemberAndGetChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckIsMemberAndGetChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckIsMemberAndGetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckIsMemberAndGetChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberAndGetChannelRequest* /*request*/, ::srv::CheckIsMemberAndGetChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckIsMemberAndGetChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckIsMemberAndGetChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddMembersChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddMembersChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddMembersChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddMembersChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddMembersChannel(::grpc::ServerContext* /*context*/, const ::srv::AddMembersChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddMembersChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddMembersChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveMemberChannel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveMemberChannel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::RemoveMemberChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveMemberChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveMemberChannel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChannel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::GetChannelRequest, ::msg::Channel>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::GetChannelRequest, ::msg::Channel>* streamer) {
                       return this->StreamedGetChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::srv::GetChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::GetChannelRequest,::msg::Channel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateChannel() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::CreateChannelRequest, ::msg::Channel>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::CreateChannelRequest, ::msg::Channel>* streamer) {
                       return this->StreamedCreateChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateChannel(::grpc::ServerContext* /*context*/, const ::srv::CreateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::CreateChannelRequest,::msg::Channel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateChannel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::UpdateChannelRequest, ::msg::Channel>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::UpdateChannelRequest, ::msg::Channel>* streamer) {
                       return this->StreamedUpdateChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateChannel(::grpc::ServerContext* /*context*/, const ::srv::UpdateChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::UpdateChannelRequest,::msg::Channel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteChannel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::DeleteChannelRequest, ::google::protobuf::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::DeleteChannelRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteChannel(::grpc::ServerContext* /*context*/, const ::srv::DeleteChannelRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::DeleteChannelRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListUserChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListUserChannels() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::ListUserChannelsRequest, ::srv::ListUserChannelsReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::ListUserChannelsRequest, ::srv::ListUserChannelsReponse>* streamer) {
                       return this->StreamedListUserChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListUserChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListUserChannels(::grpc::ServerContext* /*context*/, const ::srv::ListUserChannelsRequest* /*request*/, ::srv::ListUserChannelsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListUserChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::ListUserChannelsRequest,::srv::ListUserChannelsReponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckIsMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckIsMemberChannel() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::CheckIsMemberChannelRequest, ::srv::CheckIsMemberChannelReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::CheckIsMemberChannelRequest, ::srv::CheckIsMemberChannelReponse>* streamer) {
                       return this->StreamedCheckIsMemberChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckIsMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckIsMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberChannelRequest* /*request*/, ::srv::CheckIsMemberChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckIsMemberChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::CheckIsMemberChannelRequest,::srv::CheckIsMemberChannelReponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckIsMemberAndGetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckIsMemberAndGetChannel() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::CheckIsMemberAndGetChannelRequest, ::srv::CheckIsMemberAndGetChannelReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::CheckIsMemberAndGetChannelRequest, ::srv::CheckIsMemberAndGetChannelReponse>* streamer) {
                       return this->StreamedCheckIsMemberAndGetChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckIsMemberAndGetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckIsMemberAndGetChannel(::grpc::ServerContext* /*context*/, const ::srv::CheckIsMemberAndGetChannelRequest* /*request*/, ::srv::CheckIsMemberAndGetChannelReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckIsMemberAndGetChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::CheckIsMemberAndGetChannelRequest,::srv::CheckIsMemberAndGetChannelReponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddMembersChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddMembersChannel() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::AddMembersChannelRequest, ::msg::Channel>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::AddMembersChannelRequest, ::msg::Channel>* streamer) {
                       return this->StreamedAddMembersChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddMembersChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddMembersChannel(::grpc::ServerContext* /*context*/, const ::srv::AddMembersChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddMembersChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::AddMembersChannelRequest,::msg::Channel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveMemberChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveMemberChannel() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::RemoveMemberChannelRequest, ::msg::Channel>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::RemoveMemberChannelRequest, ::msg::Channel>* streamer) {
                       return this->StreamedRemoveMemberChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveMemberChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveMemberChannel(::grpc::ServerContext* /*context*/, const ::srv::RemoveMemberChannelRequest* /*request*/, ::msg::Channel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveMemberChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::RemoveMemberChannelRequest,::msg::Channel>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetChannel<WithStreamedUnaryMethod_CreateChannel<WithStreamedUnaryMethod_UpdateChannel<WithStreamedUnaryMethod_DeleteChannel<WithStreamedUnaryMethod_ListUserChannels<WithStreamedUnaryMethod_CheckIsMemberChannel<WithStreamedUnaryMethod_CheckIsMemberAndGetChannel<WithStreamedUnaryMethod_AddMembersChannel<WithStreamedUnaryMethod_RemoveMemberChannel<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetChannel<WithStreamedUnaryMethod_CreateChannel<WithStreamedUnaryMethod_UpdateChannel<WithStreamedUnaryMethod_DeleteChannel<WithStreamedUnaryMethod_ListUserChannels<WithStreamedUnaryMethod_CheckIsMemberChannel<WithStreamedUnaryMethod_CheckIsMemberAndGetChannel<WithStreamedUnaryMethod_AddMembersChannel<WithStreamedUnaryMethod_RemoveMemberChannel<Service > > > > > > > > > StreamedService;
};

}  // namespace srv


#endif  // GRPC_channel_5fservice_2eproto__INCLUDED
