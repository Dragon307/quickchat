// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_content.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_5fcontent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_5fcontent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_5fcontent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_5fcontent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_5fcontent_2eproto;
namespace msg {
class ChatContent;
class ChatContentDefaultTypeInternal;
extern ChatContentDefaultTypeInternal _ChatContent_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::ChatContent* Arena::CreateMaybeMessage<::msg::ChatContent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum ChatContent_ChatContentType : int {
  ChatContent_ChatContentType_TEXT = 0,
  ChatContent_ChatContentType_EMOJI = 1,
  ChatContent_ChatContentType_MONEY = 2,
  ChatContent_ChatContentType_ChatContent_ChatContentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChatContent_ChatContentType_ChatContent_ChatContentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChatContent_ChatContentType_IsValid(int value);
constexpr ChatContent_ChatContentType ChatContent_ChatContentType_ChatContentType_MIN = ChatContent_ChatContentType_TEXT;
constexpr ChatContent_ChatContentType ChatContent_ChatContentType_ChatContentType_MAX = ChatContent_ChatContentType_MONEY;
constexpr int ChatContent_ChatContentType_ChatContentType_ARRAYSIZE = ChatContent_ChatContentType_ChatContentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatContent_ChatContentType_descriptor();
template<typename T>
inline const std::string& ChatContent_ChatContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChatContent_ChatContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChatContent_ChatContentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChatContent_ChatContentType_descriptor(), enum_t_value);
}
inline bool ChatContent_ChatContentType_Parse(
    const std::string& name, ChatContent_ChatContentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChatContent_ChatContentType>(
    ChatContent_ChatContentType_descriptor(), name, value);
}
// ===================================================================

class ChatContent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChatContent) */ {
 public:
  inline ChatContent() : ChatContent(nullptr) {};
  virtual ~ChatContent();

  ChatContent(const ChatContent& from);
  ChatContent(ChatContent&& from) noexcept
    : ChatContent() {
    *this = ::std::move(from);
  }

  inline ChatContent& operator=(const ChatContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatContent& operator=(ChatContent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatContent* internal_default_instance() {
    return reinterpret_cast<const ChatContent*>(
               &_ChatContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatContent& a, ChatContent& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatContent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatContent* New() const final {
    return CreateMaybeMessage<ChatContent>(nullptr);
  }

  ChatContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatContent& from);
  void MergeFrom(const ChatContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChatContent";
  }
  protected:
  explicit ChatContent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_5fcontent_2eproto);
    return ::descriptor_table_chat_5fcontent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChatContent_ChatContentType ChatContentType;
  static constexpr ChatContentType TEXT =
    ChatContent_ChatContentType_TEXT;
  static constexpr ChatContentType EMOJI =
    ChatContent_ChatContentType_EMOJI;
  static constexpr ChatContentType MONEY =
    ChatContent_ChatContentType_MONEY;
  static inline bool ChatContentType_IsValid(int value) {
    return ChatContent_ChatContentType_IsValid(value);
  }
  static constexpr ChatContentType ChatContentType_MIN =
    ChatContent_ChatContentType_ChatContentType_MIN;
  static constexpr ChatContentType ChatContentType_MAX =
    ChatContent_ChatContentType_ChatContentType_MAX;
  static constexpr int ChatContentType_ARRAYSIZE =
    ChatContent_ChatContentType_ChatContentType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChatContentType_descriptor() {
    return ChatContent_ChatContentType_descriptor();
  }
  template<typename T>
  static inline const std::string& ChatContentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChatContentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChatContentType_Name.");
    return ChatContent_ChatContentType_Name(enum_t_value);
  }
  static inline bool ChatContentType_Parse(const std::string& name,
      ChatContentType* value) {
    return ChatContent_ChatContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kReplyToFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_content(
      std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // uint64 reply_to = 2 [jstype = JS_STRING];
  void clear_reply_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 reply_to() const;
  void set_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reply_to() const;
  void _internal_set_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .msg.ChatContent.ChatContentType type = 4;
  void clear_type();
  ::msg::ChatContent_ChatContentType type() const;
  void set_type(::msg::ChatContent_ChatContentType value);
  private:
  ::msg::ChatContent_ChatContentType _internal_type() const;
  void _internal_set_type(::msg::ChatContent_ChatContentType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChatContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reply_to_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_5fcontent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatContent

// string content = 1;
inline void ChatContent::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatContent::content() const {
  // @@protoc_insertion_point(field_get:msg.ChatContent.content)
  return _internal_content();
}
inline void ChatContent::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:msg.ChatContent.content)
}
inline std::string* ChatContent::mutable_content() {
  // @@protoc_insertion_point(field_mutable:msg.ChatContent.content)
  return _internal_mutable_content();
}
inline const std::string& ChatContent::_internal_content() const {
  return content_.Get();
}
inline void ChatContent::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatContent::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ChatContent.content)
}
inline void ChatContent::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ChatContent.content)
}
inline void ChatContent::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ChatContent.content)
}
inline std::string* ChatContent::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatContent::release_content() {
  // @@protoc_insertion_point(field_release:msg.ChatContent.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatContent::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ChatContent.content)
}
inline std::string* ChatContent::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ChatContent.content)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return content_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatContent::unsafe_arena_set_allocated_content(
    std::string* content) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (content != nullptr) {
    
  } else {
    
  }
  content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      content, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ChatContent.content)
}

// uint64 reply_to = 2 [jstype = JS_STRING];
inline void ChatContent::clear_reply_to() {
  reply_to_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatContent::_internal_reply_to() const {
  return reply_to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChatContent::reply_to() const {
  // @@protoc_insertion_point(field_get:msg.ChatContent.reply_to)
  return _internal_reply_to();
}
inline void ChatContent::_internal_set_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reply_to_ = value;
}
inline void ChatContent::set_reply_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reply_to(value);
  // @@protoc_insertion_point(field_set:msg.ChatContent.reply_to)
}

// .msg.ChatContent.ChatContentType type = 4;
inline void ChatContent::clear_type() {
  type_ = 0;
}
inline ::msg::ChatContent_ChatContentType ChatContent::_internal_type() const {
  return static_cast< ::msg::ChatContent_ChatContentType >(type_);
}
inline ::msg::ChatContent_ChatContentType ChatContent::type() const {
  // @@protoc_insertion_point(field_get:msg.ChatContent.type)
  return _internal_type();
}
inline void ChatContent::_internal_set_type(::msg::ChatContent_ChatContentType value) {
  
  type_ = value;
}
inline void ChatContent::set_type(::msg::ChatContent_ChatContentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.ChatContent.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::ChatContent_ChatContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::ChatContent_ChatContentType>() {
  return ::msg::ChatContent_ChatContentType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_5fcontent_2eproto
