// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: channel_service.proto

#include "channel_service.pb.h"
#include "channel_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace srv {

static const char* ChannelService_method_names[] = {
  "/srv.ChannelService/GetChannel",
  "/srv.ChannelService/CreateChannel",
  "/srv.ChannelService/UpdateChannel",
  "/srv.ChannelService/DeleteChannel",
  "/srv.ChannelService/ListUserChannels",
  "/srv.ChannelService/CheckIsMemberChannel",
  "/srv.ChannelService/CheckIsMemberAndGetChannel",
  "/srv.ChannelService/AddMembersChannel",
  "/srv.ChannelService/RemoveMemberChannel",
};

std::unique_ptr< ChannelService::Stub> ChannelService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChannelService::Stub> stub(new ChannelService::Stub(channel));
  return stub;
}

ChannelService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetChannel_(ChannelService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateChannel_(ChannelService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateChannel_(ChannelService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteChannel_(ChannelService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUserChannels_(ChannelService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckIsMemberChannel_(ChannelService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckIsMemberAndGetChannel_(ChannelService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddMembersChannel_(ChannelService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveMemberChannel_(ChannelService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChannelService::Stub::GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::msg::Channel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetChannel_, context, request, response);
}

void ChannelService::Stub::experimental_async::GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::GetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::GetChannel(::grpc::ClientContext* context, const ::srv::GetChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetChannel_, context, request, response, reactor);
}

void ChannelService::Stub::experimental_async::GetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::Channel>* ChannelService::Stub::AsyncGetChannelRaw(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Channel>::Create(channel_.get(), cq, rpcmethod_GetChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::Channel>* ChannelService::Stub::PrepareAsyncGetChannelRaw(::grpc::ClientContext* context, const ::srv::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Channel>::Create(channel_.get(), cq, rpcmethod_GetChannel_, context, request, false);
}

::grpc::Status ChannelService::Stub::CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::msg::Channel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateChannel_, context, request, response);
}

void ChannelService::Stub::experimental_async::CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::CreateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::CreateChannel(::grpc::ClientContext* context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, reactor);
}

void ChannelService::Stub::experimental_async::CreateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::Channel>* ChannelService::Stub::AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Channel>::Create(channel_.get(), cq, rpcmethod_CreateChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::Channel>* ChannelService::Stub::PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::srv::CreateChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Channel>::Create(channel_.get(), cq, rpcmethod_CreateChannel_, context, request, false);
}

::grpc::Status ChannelService::Stub::UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::msg::Channel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateChannel_, context, request, response);
}

void ChannelService::Stub::experimental_async::UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::UpdateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::UpdateChannel(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateChannel_, context, request, response, reactor);
}

void ChannelService::Stub::experimental_async::UpdateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::Channel>* ChannelService::Stub::AsyncUpdateChannelRaw(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Channel>::Create(channel_.get(), cq, rpcmethod_UpdateChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::Channel>* ChannelService::Stub::PrepareAsyncUpdateChannelRaw(::grpc::ClientContext* context, const ::srv::UpdateChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Channel>::Create(channel_.get(), cq, rpcmethod_UpdateChannel_, context, request, false);
}

::grpc::Status ChannelService::Stub::DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteChannel_, context, request, response);
}

void ChannelService::Stub::experimental_async::DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::DeleteChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::DeleteChannel(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteChannel_, context, request, response, reactor);
}

void ChannelService::Stub::experimental_async::DeleteChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChannelService::Stub::AsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChannelService::Stub::PrepareAsyncDeleteChannelRaw(::grpc::ClientContext* context, const ::srv::DeleteChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteChannel_, context, request, false);
}

::grpc::Status ChannelService::Stub::ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::srv::ListUserChannelsReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListUserChannels_, context, request, response);
}

void ChannelService::Stub::experimental_async::ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUserChannels_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::ListUserChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserChannelsReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUserChannels_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::ListUserChannels(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListUserChannels_, context, request, response, reactor);
}

void ChannelService::Stub::experimental_async::ListUserChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserChannelsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListUserChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srv::ListUserChannelsReponse>* ChannelService::Stub::AsyncListUserChannelsRaw(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::ListUserChannelsReponse>::Create(channel_.get(), cq, rpcmethod_ListUserChannels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::srv::ListUserChannelsReponse>* ChannelService::Stub::PrepareAsyncListUserChannelsRaw(::grpc::ClientContext* context, const ::srv::ListUserChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::ListUserChannelsReponse>::Create(channel_.get(), cq, rpcmethod_ListUserChannels_, context, request, false);
}

::grpc::Status ChannelService::Stub::CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::srv::CheckIsMemberChannelReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckIsMemberChannel_, context, request, response);
}

void ChannelService::Stub::experimental_async::CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckIsMemberChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::CheckIsMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberChannelReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckIsMemberChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::CheckIsMemberChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckIsMemberChannel_, context, request, response, reactor);
}

void ChannelService::Stub::experimental_async::CheckIsMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckIsMemberChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberChannelReponse>* ChannelService::Stub::AsyncCheckIsMemberChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::CheckIsMemberChannelReponse>::Create(channel_.get(), cq, rpcmethod_CheckIsMemberChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberChannelReponse>* ChannelService::Stub::PrepareAsyncCheckIsMemberChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::CheckIsMemberChannelReponse>::Create(channel_.get(), cq, rpcmethod_CheckIsMemberChannel_, context, request, false);
}

::grpc::Status ChannelService::Stub::CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::srv::CheckIsMemberAndGetChannelReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckIsMemberAndGetChannel_, context, request, response);
}

void ChannelService::Stub::experimental_async::CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckIsMemberAndGetChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberAndGetChannelReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckIsMemberAndGetChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckIsMemberAndGetChannel_, context, request, response, reactor);
}

void ChannelService::Stub::experimental_async::CheckIsMemberAndGetChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::CheckIsMemberAndGetChannelReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckIsMemberAndGetChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberAndGetChannelReponse>* ChannelService::Stub::AsyncCheckIsMemberAndGetChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::CheckIsMemberAndGetChannelReponse>::Create(channel_.get(), cq, rpcmethod_CheckIsMemberAndGetChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::srv::CheckIsMemberAndGetChannelReponse>* ChannelService::Stub::PrepareAsyncCheckIsMemberAndGetChannelRaw(::grpc::ClientContext* context, const ::srv::CheckIsMemberAndGetChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::CheckIsMemberAndGetChannelReponse>::Create(channel_.get(), cq, rpcmethod_CheckIsMemberAndGetChannel_, context, request, false);
}

::grpc::Status ChannelService::Stub::AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::msg::Channel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddMembersChannel_, context, request, response);
}

void ChannelService::Stub::experimental_async::AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddMembersChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::AddMembersChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddMembersChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::AddMembersChannel(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddMembersChannel_, context, request, response, reactor);
}

void ChannelService::Stub::experimental_async::AddMembersChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddMembersChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::Channel>* ChannelService::Stub::AsyncAddMembersChannelRaw(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Channel>::Create(channel_.get(), cq, rpcmethod_AddMembersChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::Channel>* ChannelService::Stub::PrepareAsyncAddMembersChannelRaw(::grpc::ClientContext* context, const ::srv::AddMembersChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Channel>::Create(channel_.get(), cq, rpcmethod_AddMembersChannel_, context, request, false);
}

::grpc::Status ChannelService::Stub::RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::msg::Channel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveMemberChannel_, context, request, response);
}

void ChannelService::Stub::experimental_async::RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveMemberChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::RemoveMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveMemberChannel_, context, request, response, std::move(f));
}

void ChannelService::Stub::experimental_async::RemoveMemberChannel(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveMemberChannel_, context, request, response, reactor);
}

void ChannelService::Stub::experimental_async::RemoveMemberChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveMemberChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::Channel>* ChannelService::Stub::AsyncRemoveMemberChannelRaw(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Channel>::Create(channel_.get(), cq, rpcmethod_RemoveMemberChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::Channel>* ChannelService::Stub::PrepareAsyncRemoveMemberChannelRaw(::grpc::ClientContext* context, const ::srv::RemoveMemberChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::Channel>::Create(channel_.get(), cq, rpcmethod_RemoveMemberChannel_, context, request, false);
}

ChannelService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::srv::GetChannelRequest, ::msg::Channel>(
          [](ChannelService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::GetChannelRequest* req,
             ::msg::Channel* resp) {
               return service->GetChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::srv::CreateChannelRequest, ::msg::Channel>(
          [](ChannelService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::CreateChannelRequest* req,
             ::msg::Channel* resp) {
               return service->CreateChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::srv::UpdateChannelRequest, ::msg::Channel>(
          [](ChannelService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::UpdateChannelRequest* req,
             ::msg::Channel* resp) {
               return service->UpdateChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::srv::DeleteChannelRequest, ::google::protobuf::Empty>(
          [](ChannelService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::DeleteChannelRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::srv::ListUserChannelsRequest, ::srv::ListUserChannelsReponse>(
          [](ChannelService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::ListUserChannelsRequest* req,
             ::srv::ListUserChannelsReponse* resp) {
               return service->ListUserChannels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::srv::CheckIsMemberChannelRequest, ::srv::CheckIsMemberChannelReponse>(
          [](ChannelService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::CheckIsMemberChannelRequest* req,
             ::srv::CheckIsMemberChannelReponse* resp) {
               return service->CheckIsMemberChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::srv::CheckIsMemberAndGetChannelRequest, ::srv::CheckIsMemberAndGetChannelReponse>(
          [](ChannelService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::CheckIsMemberAndGetChannelRequest* req,
             ::srv::CheckIsMemberAndGetChannelReponse* resp) {
               return service->CheckIsMemberAndGetChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::srv::AddMembersChannelRequest, ::msg::Channel>(
          [](ChannelService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::AddMembersChannelRequest* req,
             ::msg::Channel* resp) {
               return service->AddMembersChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChannelService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChannelService::Service, ::srv::RemoveMemberChannelRequest, ::msg::Channel>(
          [](ChannelService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::RemoveMemberChannelRequest* req,
             ::msg::Channel* resp) {
               return service->RemoveMemberChannel(ctx, req, resp);
             }, this)));
}

ChannelService::Service::~Service() {
}

::grpc::Status ChannelService::Service::GetChannel(::grpc::ServerContext* context, const ::srv::GetChannelRequest* request, ::msg::Channel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::CreateChannel(::grpc::ServerContext* context, const ::srv::CreateChannelRequest* request, ::msg::Channel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::UpdateChannel(::grpc::ServerContext* context, const ::srv::UpdateChannelRequest* request, ::msg::Channel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::DeleteChannel(::grpc::ServerContext* context, const ::srv::DeleteChannelRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::ListUserChannels(::grpc::ServerContext* context, const ::srv::ListUserChannelsRequest* request, ::srv::ListUserChannelsReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::CheckIsMemberChannel(::grpc::ServerContext* context, const ::srv::CheckIsMemberChannelRequest* request, ::srv::CheckIsMemberChannelReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::CheckIsMemberAndGetChannel(::grpc::ServerContext* context, const ::srv::CheckIsMemberAndGetChannelRequest* request, ::srv::CheckIsMemberAndGetChannelReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::AddMembersChannel(::grpc::ServerContext* context, const ::srv::AddMembersChannelRequest* request, ::msg::Channel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChannelService::Service::RemoveMemberChannel(::grpc::ServerContext* context, const ::srv::RemoveMemberChannelRequest* request, ::msg::Channel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace srv

