// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payload.proto

#include "payload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_internal_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Chat_internal_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_internal_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Notification_internal_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_internal_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Seen_internal_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_internal_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_internal_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_internal_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Typing_internal_5fmessage_2eproto;
namespace msg {
class WebSocketOutgoingMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebSocketOutgoingMessage> _instance;
  const ::msg::Chat* chat_;
  const ::msg::Seen* seen_;
  const ::msg::Status* status_;
  const ::msg::Typing* typing_;
  const ::msg::Notification* notification_;
} _WebSocketOutgoingMessage_default_instance_;
class WebSocketIncomingMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebSocketIncomingMessage> _instance;
  const ::msg::Chat* chat_;
  const ::msg::Seen* seen_;
  const ::msg::Status* status_;
  const ::msg::Typing* typing_;
} _WebSocketIncomingMessage_default_instance_;
}  // namespace msg
static void InitDefaultsscc_info_WebSocketIncomingMessage_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_WebSocketIncomingMessage_default_instance_;
    new (ptr) ::msg::WebSocketIncomingMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::WebSocketIncomingMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WebSocketIncomingMessage_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_WebSocketIncomingMessage_payload_2eproto}, {
      &scc_info_Chat_internal_5fmessage_2eproto.base,
      &scc_info_Seen_internal_5fmessage_2eproto.base,
      &scc_info_Status_internal_5fmessage_2eproto.base,
      &scc_info_Typing_internal_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_WebSocketOutgoingMessage_payload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_WebSocketOutgoingMessage_default_instance_;
    new (ptr) ::msg::WebSocketOutgoingMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::WebSocketOutgoingMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_WebSocketOutgoingMessage_payload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_WebSocketOutgoingMessage_payload_2eproto}, {
      &scc_info_Chat_internal_5fmessage_2eproto.base,
      &scc_info_Seen_internal_5fmessage_2eproto.base,
      &scc_info_Status_internal_5fmessage_2eproto.base,
      &scc_info_Typing_internal_5fmessage_2eproto.base,
      &scc_info_Notification_internal_5fmessage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_payload_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_payload_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_payload_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_payload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::WebSocketOutgoingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::msg::WebSocketOutgoingMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::msg::WebSocketOutgoingMessageDefaultTypeInternal, chat_),
  offsetof(::msg::WebSocketOutgoingMessageDefaultTypeInternal, seen_),
  offsetof(::msg::WebSocketOutgoingMessageDefaultTypeInternal, status_),
  offsetof(::msg::WebSocketOutgoingMessageDefaultTypeInternal, typing_),
  offsetof(::msg::WebSocketOutgoingMessageDefaultTypeInternal, notification_),
  PROTOBUF_FIELD_OFFSET(::msg::WebSocketOutgoingMessage, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::WebSocketIncomingMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::msg::WebSocketIncomingMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::msg::WebSocketIncomingMessageDefaultTypeInternal, chat_),
  offsetof(::msg::WebSocketIncomingMessageDefaultTypeInternal, seen_),
  offsetof(::msg::WebSocketIncomingMessageDefaultTypeInternal, status_),
  offsetof(::msg::WebSocketIncomingMessageDefaultTypeInternal, typing_),
  PROTOBUF_FIELD_OFFSET(::msg::WebSocketIncomingMessage, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::msg::WebSocketOutgoingMessage)},
  { 11, -1, sizeof(::msg::WebSocketIncomingMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_WebSocketOutgoingMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_WebSocketIncomingMessage_default_instance_),
};

const char descriptor_table_protodef_payload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpayload.proto\022\003msg\032\026internal_message.p"
  "roto\"\301\001\n\030WebSocketOutgoingMessage\022\031\n\004cha"
  "t\030\001 \001(\0132\t.msg.ChatH\000\022\031\n\004seen\030\002 \001(\0132\t.msg"
  ".SeenH\000\022\035\n\006status\030\003 \001(\0132\013.msg.StatusH\000\022\035"
  "\n\006typing\030\004 \001(\0132\013.msg.TypingH\000\022)\n\014notific"
  "ation\030\006 \001(\0132\021.msg.NotificationH\000B\006\n\004type"
  "\"\226\001\n\030WebSocketIncomingMessage\022\031\n\004chat\030\001 "
  "\001(\0132\t.msg.ChatH\000\022\031\n\004seen\030\002 \001(\0132\t.msg.See"
  "nH\000\022\035\n\006status\030\003 \001(\0132\013.msg.StatusH\000\022\035\n\006ty"
  "ping\030\004 \001(\0132\013.msg.TypingH\000B\006\n\004typeb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_payload_2eproto_deps[1] = {
  &::descriptor_table_internal_5fmessage_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_payload_2eproto_sccs[2] = {
  &scc_info_WebSocketIncomingMessage_payload_2eproto.base,
  &scc_info_WebSocketOutgoingMessage_payload_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_payload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payload_2eproto = {
  false, false, descriptor_table_protodef_payload_2eproto, "payload.proto", 401,
  &descriptor_table_payload_2eproto_once, descriptor_table_payload_2eproto_sccs, descriptor_table_payload_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_payload_2eproto::offsets,
  file_level_metadata_payload_2eproto, 2, file_level_enum_descriptors_payload_2eproto, file_level_service_descriptors_payload_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_payload_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_payload_2eproto)), true);
namespace msg {

// ===================================================================

void WebSocketOutgoingMessage::InitAsDefaultInstance() {
  ::msg::_WebSocketOutgoingMessage_default_instance_.chat_ = const_cast< ::msg::Chat*>(
      ::msg::Chat::internal_default_instance());
  ::msg::_WebSocketOutgoingMessage_default_instance_.seen_ = const_cast< ::msg::Seen*>(
      ::msg::Seen::internal_default_instance());
  ::msg::_WebSocketOutgoingMessage_default_instance_.status_ = const_cast< ::msg::Status*>(
      ::msg::Status::internal_default_instance());
  ::msg::_WebSocketOutgoingMessage_default_instance_.typing_ = const_cast< ::msg::Typing*>(
      ::msg::Typing::internal_default_instance());
  ::msg::_WebSocketOutgoingMessage_default_instance_.notification_ = const_cast< ::msg::Notification*>(
      ::msg::Notification::internal_default_instance());
}
class WebSocketOutgoingMessage::_Internal {
 public:
  static const ::msg::Chat& chat(const WebSocketOutgoingMessage* msg);
  static const ::msg::Seen& seen(const WebSocketOutgoingMessage* msg);
  static const ::msg::Status& status(const WebSocketOutgoingMessage* msg);
  static const ::msg::Typing& typing(const WebSocketOutgoingMessage* msg);
  static const ::msg::Notification& notification(const WebSocketOutgoingMessage* msg);
};

const ::msg::Chat&
WebSocketOutgoingMessage::_Internal::chat(const WebSocketOutgoingMessage* msg) {
  return *msg->type_.chat_;
}
const ::msg::Seen&
WebSocketOutgoingMessage::_Internal::seen(const WebSocketOutgoingMessage* msg) {
  return *msg->type_.seen_;
}
const ::msg::Status&
WebSocketOutgoingMessage::_Internal::status(const WebSocketOutgoingMessage* msg) {
  return *msg->type_.status_;
}
const ::msg::Typing&
WebSocketOutgoingMessage::_Internal::typing(const WebSocketOutgoingMessage* msg) {
  return *msg->type_.typing_;
}
const ::msg::Notification&
WebSocketOutgoingMessage::_Internal::notification(const WebSocketOutgoingMessage* msg) {
  return *msg->type_.notification_;
}
void WebSocketOutgoingMessage::set_allocated_chat(::msg::Chat* chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat)->GetArena();
    if (message_arena != submessage_arena) {
      chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat, submessage_arena);
    }
    set_has_chat();
    type_.chat_ = chat;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.WebSocketOutgoingMessage.chat)
}
void WebSocketOutgoingMessage::clear_chat() {
  if (_internal_has_chat()) {
    if (GetArena() == nullptr) {
      delete type_.chat_;
    }
    clear_has_type();
  }
}
void WebSocketOutgoingMessage::set_allocated_seen(::msg::Seen* seen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (seen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seen)->GetArena();
    if (message_arena != submessage_arena) {
      seen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seen, submessage_arena);
    }
    set_has_seen();
    type_.seen_ = seen;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.WebSocketOutgoingMessage.seen)
}
void WebSocketOutgoingMessage::clear_seen() {
  if (_internal_has_seen()) {
    if (GetArena() == nullptr) {
      delete type_.seen_;
    }
    clear_has_type();
  }
}
void WebSocketOutgoingMessage::set_allocated_status(::msg::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    type_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.WebSocketOutgoingMessage.status)
}
void WebSocketOutgoingMessage::clear_status() {
  if (_internal_has_status()) {
    if (GetArena() == nullptr) {
      delete type_.status_;
    }
    clear_has_type();
  }
}
void WebSocketOutgoingMessage::set_allocated_typing(::msg::Typing* typing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (typing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(typing)->GetArena();
    if (message_arena != submessage_arena) {
      typing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, typing, submessage_arena);
    }
    set_has_typing();
    type_.typing_ = typing;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.WebSocketOutgoingMessage.typing)
}
void WebSocketOutgoingMessage::clear_typing() {
  if (_internal_has_typing()) {
    if (GetArena() == nullptr) {
      delete type_.typing_;
    }
    clear_has_type();
  }
}
void WebSocketOutgoingMessage::set_allocated_notification(::msg::Notification* notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notification)->GetArena();
    if (message_arena != submessage_arena) {
      notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    set_has_notification();
    type_.notification_ = notification;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.WebSocketOutgoingMessage.notification)
}
void WebSocketOutgoingMessage::clear_notification() {
  if (_internal_has_notification()) {
    if (GetArena() == nullptr) {
      delete type_.notification_;
    }
    clear_has_type();
  }
}
WebSocketOutgoingMessage::WebSocketOutgoingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.WebSocketOutgoingMessage)
}
WebSocketOutgoingMessage::WebSocketOutgoingMessage(const WebSocketOutgoingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kChat: {
      _internal_mutable_chat()->::msg::Chat::MergeFrom(from._internal_chat());
      break;
    }
    case kSeen: {
      _internal_mutable_seen()->::msg::Seen::MergeFrom(from._internal_seen());
      break;
    }
    case kStatus: {
      _internal_mutable_status()->::msg::Status::MergeFrom(from._internal_status());
      break;
    }
    case kTyping: {
      _internal_mutable_typing()->::msg::Typing::MergeFrom(from._internal_typing());
      break;
    }
    case kNotification: {
      _internal_mutable_notification()->::msg::Notification::MergeFrom(from._internal_notification());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:msg.WebSocketOutgoingMessage)
}

void WebSocketOutgoingMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WebSocketOutgoingMessage_payload_2eproto.base);
  clear_has_type();
}

WebSocketOutgoingMessage::~WebSocketOutgoingMessage() {
  // @@protoc_insertion_point(destructor:msg.WebSocketOutgoingMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WebSocketOutgoingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void WebSocketOutgoingMessage::ArenaDtor(void* object) {
  WebSocketOutgoingMessage* _this = reinterpret_cast< WebSocketOutgoingMessage* >(object);
  (void)_this;
}
void WebSocketOutgoingMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WebSocketOutgoingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebSocketOutgoingMessage& WebSocketOutgoingMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebSocketOutgoingMessage_payload_2eproto.base);
  return *internal_default_instance();
}


void WebSocketOutgoingMessage::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:msg.WebSocketOutgoingMessage)
  switch (type_case()) {
    case kChat: {
      if (GetArena() == nullptr) {
        delete type_.chat_;
      }
      break;
    }
    case kSeen: {
      if (GetArena() == nullptr) {
        delete type_.seen_;
      }
      break;
    }
    case kStatus: {
      if (GetArena() == nullptr) {
        delete type_.status_;
      }
      break;
    }
    case kTyping: {
      if (GetArena() == nullptr) {
        delete type_.typing_;
      }
      break;
    }
    case kNotification: {
      if (GetArena() == nullptr) {
        delete type_.notification_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void WebSocketOutgoingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.WebSocketOutgoingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebSocketOutgoingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .msg.Chat chat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.Seen seen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_seen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.Typing typing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_typing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.Notification notification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WebSocketOutgoingMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.WebSocketOutgoingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.Chat chat = 1;
  if (_internal_has_chat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chat(this), target, stream);
  }

  // .msg.Seen seen = 2;
  if (_internal_has_seen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::seen(this), target, stream);
  }

  // .msg.Status status = 3;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  // .msg.Typing typing = 4;
  if (_internal_has_typing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::typing(this), target, stream);
  }

  // .msg.Notification notification = 6;
  if (_internal_has_notification()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::notification(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.WebSocketOutgoingMessage)
  return target;
}

size_t WebSocketOutgoingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.WebSocketOutgoingMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .msg.Chat chat = 1;
    case kChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.chat_);
      break;
    }
    // .msg.Seen seen = 2;
    case kSeen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.seen_);
      break;
    }
    // .msg.Status status = 3;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.status_);
      break;
    }
    // .msg.Typing typing = 4;
    case kTyping: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.typing_);
      break;
    }
    // .msg.Notification notification = 6;
    case kNotification: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.notification_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebSocketOutgoingMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.WebSocketOutgoingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WebSocketOutgoingMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WebSocketOutgoingMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.WebSocketOutgoingMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.WebSocketOutgoingMessage)
    MergeFrom(*source);
  }
}

void WebSocketOutgoingMessage::MergeFrom(const WebSocketOutgoingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.WebSocketOutgoingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kChat: {
      _internal_mutable_chat()->::msg::Chat::MergeFrom(from._internal_chat());
      break;
    }
    case kSeen: {
      _internal_mutable_seen()->::msg::Seen::MergeFrom(from._internal_seen());
      break;
    }
    case kStatus: {
      _internal_mutable_status()->::msg::Status::MergeFrom(from._internal_status());
      break;
    }
    case kTyping: {
      _internal_mutable_typing()->::msg::Typing::MergeFrom(from._internal_typing());
      break;
    }
    case kNotification: {
      _internal_mutable_notification()->::msg::Notification::MergeFrom(from._internal_notification());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void WebSocketOutgoingMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.WebSocketOutgoingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebSocketOutgoingMessage::CopyFrom(const WebSocketOutgoingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.WebSocketOutgoingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSocketOutgoingMessage::IsInitialized() const {
  return true;
}

void WebSocketOutgoingMessage::InternalSwap(WebSocketOutgoingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WebSocketOutgoingMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WebSocketIncomingMessage::InitAsDefaultInstance() {
  ::msg::_WebSocketIncomingMessage_default_instance_.chat_ = const_cast< ::msg::Chat*>(
      ::msg::Chat::internal_default_instance());
  ::msg::_WebSocketIncomingMessage_default_instance_.seen_ = const_cast< ::msg::Seen*>(
      ::msg::Seen::internal_default_instance());
  ::msg::_WebSocketIncomingMessage_default_instance_.status_ = const_cast< ::msg::Status*>(
      ::msg::Status::internal_default_instance());
  ::msg::_WebSocketIncomingMessage_default_instance_.typing_ = const_cast< ::msg::Typing*>(
      ::msg::Typing::internal_default_instance());
}
class WebSocketIncomingMessage::_Internal {
 public:
  static const ::msg::Chat& chat(const WebSocketIncomingMessage* msg);
  static const ::msg::Seen& seen(const WebSocketIncomingMessage* msg);
  static const ::msg::Status& status(const WebSocketIncomingMessage* msg);
  static const ::msg::Typing& typing(const WebSocketIncomingMessage* msg);
};

const ::msg::Chat&
WebSocketIncomingMessage::_Internal::chat(const WebSocketIncomingMessage* msg) {
  return *msg->type_.chat_;
}
const ::msg::Seen&
WebSocketIncomingMessage::_Internal::seen(const WebSocketIncomingMessage* msg) {
  return *msg->type_.seen_;
}
const ::msg::Status&
WebSocketIncomingMessage::_Internal::status(const WebSocketIncomingMessage* msg) {
  return *msg->type_.status_;
}
const ::msg::Typing&
WebSocketIncomingMessage::_Internal::typing(const WebSocketIncomingMessage* msg) {
  return *msg->type_.typing_;
}
void WebSocketIncomingMessage::set_allocated_chat(::msg::Chat* chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat)->GetArena();
    if (message_arena != submessage_arena) {
      chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat, submessage_arena);
    }
    set_has_chat();
    type_.chat_ = chat;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.WebSocketIncomingMessage.chat)
}
void WebSocketIncomingMessage::clear_chat() {
  if (_internal_has_chat()) {
    if (GetArena() == nullptr) {
      delete type_.chat_;
    }
    clear_has_type();
  }
}
void WebSocketIncomingMessage::set_allocated_seen(::msg::Seen* seen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (seen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seen)->GetArena();
    if (message_arena != submessage_arena) {
      seen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seen, submessage_arena);
    }
    set_has_seen();
    type_.seen_ = seen;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.WebSocketIncomingMessage.seen)
}
void WebSocketIncomingMessage::clear_seen() {
  if (_internal_has_seen()) {
    if (GetArena() == nullptr) {
      delete type_.seen_;
    }
    clear_has_type();
  }
}
void WebSocketIncomingMessage::set_allocated_status(::msg::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    type_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.WebSocketIncomingMessage.status)
}
void WebSocketIncomingMessage::clear_status() {
  if (_internal_has_status()) {
    if (GetArena() == nullptr) {
      delete type_.status_;
    }
    clear_has_type();
  }
}
void WebSocketIncomingMessage::set_allocated_typing(::msg::Typing* typing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (typing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(typing)->GetArena();
    if (message_arena != submessage_arena) {
      typing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, typing, submessage_arena);
    }
    set_has_typing();
    type_.typing_ = typing;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.WebSocketIncomingMessage.typing)
}
void WebSocketIncomingMessage::clear_typing() {
  if (_internal_has_typing()) {
    if (GetArena() == nullptr) {
      delete type_.typing_;
    }
    clear_has_type();
  }
}
WebSocketIncomingMessage::WebSocketIncomingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg.WebSocketIncomingMessage)
}
WebSocketIncomingMessage::WebSocketIncomingMessage(const WebSocketIncomingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kChat: {
      _internal_mutable_chat()->::msg::Chat::MergeFrom(from._internal_chat());
      break;
    }
    case kSeen: {
      _internal_mutable_seen()->::msg::Seen::MergeFrom(from._internal_seen());
      break;
    }
    case kStatus: {
      _internal_mutable_status()->::msg::Status::MergeFrom(from._internal_status());
      break;
    }
    case kTyping: {
      _internal_mutable_typing()->::msg::Typing::MergeFrom(from._internal_typing());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:msg.WebSocketIncomingMessage)
}

void WebSocketIncomingMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WebSocketIncomingMessage_payload_2eproto.base);
  clear_has_type();
}

WebSocketIncomingMessage::~WebSocketIncomingMessage() {
  // @@protoc_insertion_point(destructor:msg.WebSocketIncomingMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WebSocketIncomingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void WebSocketIncomingMessage::ArenaDtor(void* object) {
  WebSocketIncomingMessage* _this = reinterpret_cast< WebSocketIncomingMessage* >(object);
  (void)_this;
}
void WebSocketIncomingMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WebSocketIncomingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebSocketIncomingMessage& WebSocketIncomingMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebSocketIncomingMessage_payload_2eproto.base);
  return *internal_default_instance();
}


void WebSocketIncomingMessage::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:msg.WebSocketIncomingMessage)
  switch (type_case()) {
    case kChat: {
      if (GetArena() == nullptr) {
        delete type_.chat_;
      }
      break;
    }
    case kSeen: {
      if (GetArena() == nullptr) {
        delete type_.seen_;
      }
      break;
    }
    case kStatus: {
      if (GetArena() == nullptr) {
        delete type_.status_;
      }
      break;
    }
    case kTyping: {
      if (GetArena() == nullptr) {
        delete type_.typing_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void WebSocketIncomingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.WebSocketIncomingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebSocketIncomingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .msg.Chat chat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.Seen seen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_seen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.Typing typing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_typing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WebSocketIncomingMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.WebSocketIncomingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.Chat chat = 1;
  if (_internal_has_chat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chat(this), target, stream);
  }

  // .msg.Seen seen = 2;
  if (_internal_has_seen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::seen(this), target, stream);
  }

  // .msg.Status status = 3;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::status(this), target, stream);
  }

  // .msg.Typing typing = 4;
  if (_internal_has_typing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::typing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.WebSocketIncomingMessage)
  return target;
}

size_t WebSocketIncomingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.WebSocketIncomingMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .msg.Chat chat = 1;
    case kChat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.chat_);
      break;
    }
    // .msg.Seen seen = 2;
    case kSeen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.seen_);
      break;
    }
    // .msg.Status status = 3;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.status_);
      break;
    }
    // .msg.Typing typing = 4;
    case kTyping: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.typing_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebSocketIncomingMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.WebSocketIncomingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WebSocketIncomingMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WebSocketIncomingMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.WebSocketIncomingMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.WebSocketIncomingMessage)
    MergeFrom(*source);
  }
}

void WebSocketIncomingMessage::MergeFrom(const WebSocketIncomingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.WebSocketIncomingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kChat: {
      _internal_mutable_chat()->::msg::Chat::MergeFrom(from._internal_chat());
      break;
    }
    case kSeen: {
      _internal_mutable_seen()->::msg::Seen::MergeFrom(from._internal_seen());
      break;
    }
    case kStatus: {
      _internal_mutable_status()->::msg::Status::MergeFrom(from._internal_status());
      break;
    }
    case kTyping: {
      _internal_mutable_typing()->::msg::Typing::MergeFrom(from._internal_typing());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void WebSocketIncomingMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.WebSocketIncomingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebSocketIncomingMessage::CopyFrom(const WebSocketIncomingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.WebSocketIncomingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebSocketIncomingMessage::IsInitialized() const {
  return true;
}

void WebSocketIncomingMessage::InternalSwap(WebSocketIncomingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WebSocketIncomingMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::WebSocketOutgoingMessage* Arena::CreateMaybeMessage< ::msg::WebSocketOutgoingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::WebSocketOutgoingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::WebSocketIncomingMessage* Arena::CreateMaybeMessage< ::msg::WebSocketIncomingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::WebSocketIncomingMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
