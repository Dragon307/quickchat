// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_service.proto

#include "channel_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_channel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Channel_channel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_channel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Channel_Member_channel_2eproto;
namespace srv {
class GetChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChannelRequest> _instance;
} _GetChannelRequest_default_instance_;
class CreateChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateChannelRequest> _instance;
} _CreateChannelRequest_default_instance_;
class UpdateChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateChannelRequest> _instance;
} _UpdateChannelRequest_default_instance_;
class DeleteChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteChannelRequest> _instance;
} _DeleteChannelRequest_default_instance_;
class ListUserChannelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserChannelsRequest> _instance;
} _ListUserChannelsRequest_default_instance_;
class ListUserChannelsReponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserChannelsReponse> _instance;
} _ListUserChannelsReponse_default_instance_;
class CheckIsMemberChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckIsMemberChannelRequest> _instance;
} _CheckIsMemberChannelRequest_default_instance_;
class CheckIsMemberChannelReponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckIsMemberChannelReponse> _instance;
} _CheckIsMemberChannelReponse_default_instance_;
class CheckIsMemberAndGetChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckIsMemberAndGetChannelRequest> _instance;
} _CheckIsMemberAndGetChannelRequest_default_instance_;
class CheckIsMemberAndGetChannelReponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckIsMemberAndGetChannelReponse> _instance;
} _CheckIsMemberAndGetChannelReponse_default_instance_;
class AddMembersChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddMembersChannelRequest> _instance;
} _AddMembersChannelRequest_default_instance_;
class RemoveMemberChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveMemberChannelRequest> _instance;
} _RemoveMemberChannelRequest_default_instance_;
}  // namespace srv
static void InitDefaultsscc_info_AddMembersChannelRequest_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_AddMembersChannelRequest_default_instance_;
    new (ptr) ::srv::AddMembersChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::AddMembersChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddMembersChannelRequest_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddMembersChannelRequest_channel_5fservice_2eproto}, {
      &scc_info_Channel_Member_channel_2eproto.base,}};

static void InitDefaultsscc_info_CheckIsMemberAndGetChannelReponse_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_CheckIsMemberAndGetChannelReponse_default_instance_;
    new (ptr) ::srv::CheckIsMemberAndGetChannelReponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::CheckIsMemberAndGetChannelReponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckIsMemberAndGetChannelReponse_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CheckIsMemberAndGetChannelReponse_channel_5fservice_2eproto}, {
      &scc_info_Channel_channel_2eproto.base,}};

static void InitDefaultsscc_info_CheckIsMemberAndGetChannelRequest_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_CheckIsMemberAndGetChannelRequest_default_instance_;
    new (ptr) ::srv::CheckIsMemberAndGetChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::CheckIsMemberAndGetChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckIsMemberAndGetChannelRequest_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckIsMemberAndGetChannelRequest_channel_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CheckIsMemberChannelReponse_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_CheckIsMemberChannelReponse_default_instance_;
    new (ptr) ::srv::CheckIsMemberChannelReponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::CheckIsMemberChannelReponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckIsMemberChannelReponse_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckIsMemberChannelReponse_channel_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CheckIsMemberChannelRequest_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_CheckIsMemberChannelRequest_default_instance_;
    new (ptr) ::srv::CheckIsMemberChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::CheckIsMemberChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckIsMemberChannelRequest_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckIsMemberChannelRequest_channel_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_CreateChannelRequest_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_CreateChannelRequest_default_instance_;
    new (ptr) ::srv::CreateChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::CreateChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateChannelRequest_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateChannelRequest_channel_5fservice_2eproto}, {
      &scc_info_Channel_channel_2eproto.base,}};

static void InitDefaultsscc_info_DeleteChannelRequest_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_DeleteChannelRequest_default_instance_;
    new (ptr) ::srv::DeleteChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::DeleteChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteChannelRequest_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteChannelRequest_channel_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetChannelRequest_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_GetChannelRequest_default_instance_;
    new (ptr) ::srv::GetChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::GetChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChannelRequest_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChannelRequest_channel_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_ListUserChannelsReponse_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_ListUserChannelsReponse_default_instance_;
    new (ptr) ::srv::ListUserChannelsReponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::ListUserChannelsReponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListUserChannelsReponse_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListUserChannelsReponse_channel_5fservice_2eproto}, {
      &scc_info_Channel_channel_2eproto.base,}};

static void InitDefaultsscc_info_ListUserChannelsRequest_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_ListUserChannelsRequest_default_instance_;
    new (ptr) ::srv::ListUserChannelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::ListUserChannelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListUserChannelsRequest_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListUserChannelsRequest_channel_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_RemoveMemberChannelRequest_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_RemoveMemberChannelRequest_default_instance_;
    new (ptr) ::srv::RemoveMemberChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::RemoveMemberChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveMemberChannelRequest_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveMemberChannelRequest_channel_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_UpdateChannelRequest_channel_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_UpdateChannelRequest_default_instance_;
    new (ptr) ::srv::UpdateChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::UpdateChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateChannelRequest_channel_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateChannelRequest_channel_5fservice_2eproto}, {
      &scc_info_Channel_channel_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_channel_5fservice_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_channel_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_channel_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_channel_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::GetChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::GetChannelRequest, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::CreateChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::CreateChannelRequest, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::UpdateChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::UpdateChannelRequest, channel_),
  PROTOBUF_FIELD_OFFSET(::srv::UpdateChannelRequest, field_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::DeleteChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::DeleteChannelRequest, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::ListUserChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::ListUserChannelsRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::ListUserChannelsReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::ListUserChannelsReponse, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberChannelRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberChannelRequest, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberChannelReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberChannelReponse, is_in_),
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberChannelReponse, channel_id_),
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberChannelReponse, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberAndGetChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberAndGetChannelRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberAndGetChannelRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberAndGetChannelReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberAndGetChannelReponse, is_in_),
  PROTOBUF_FIELD_OFFSET(::srv::CheckIsMemberAndGetChannelReponse, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::AddMembersChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::AddMembersChannelRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::srv::AddMembersChannelRequest, members_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::RemoveMemberChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::RemoveMemberChannelRequest, channel_id_),
  PROTOBUF_FIELD_OFFSET(::srv::RemoveMemberChannelRequest, user_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::srv::GetChannelRequest)},
  { 6, -1, sizeof(::srv::CreateChannelRequest)},
  { 12, -1, sizeof(::srv::UpdateChannelRequest)},
  { 19, -1, sizeof(::srv::DeleteChannelRequest)},
  { 25, -1, sizeof(::srv::ListUserChannelsRequest)},
  { 31, -1, sizeof(::srv::ListUserChannelsReponse)},
  { 37, -1, sizeof(::srv::CheckIsMemberChannelRequest)},
  { 44, -1, sizeof(::srv::CheckIsMemberChannelReponse)},
  { 52, -1, sizeof(::srv::CheckIsMemberAndGetChannelRequest)},
  { 59, -1, sizeof(::srv::CheckIsMemberAndGetChannelReponse)},
  { 66, -1, sizeof(::srv::AddMembersChannelRequest)},
  { 73, -1, sizeof(::srv::RemoveMemberChannelRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_GetChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_CreateChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_UpdateChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_DeleteChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_ListUserChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_ListUserChannelsReponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_CheckIsMemberChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_CheckIsMemberChannelReponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_CheckIsMemberAndGetChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_CheckIsMemberAndGetChannelReponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_AddMembersChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_RemoveMemberChannelRequest_default_instance_),
};

const char descriptor_table_protodef_channel_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025channel_service.proto\022\003srv\032\rchannel.pr"
  "oto\032 google/protobuf/field_mask.proto\032\033g"
  "oogle/protobuf/empty.proto\"\'\n\021GetChannel"
  "Request\022\022\n\nchannel_id\030\001 \001(\004\"5\n\024CreateCha"
  "nnelRequest\022\035\n\007channel\030\001 \001(\0132\014.msg.Chann"
  "el\"e\n\024UpdateChannelRequest\022\035\n\007channel\030\001 "
  "\001(\0132\014.msg.Channel\022.\n\nfield_mask\030\002 \001(\0132\032."
  "google.protobuf.FieldMask\"*\n\024DeleteChann"
  "elRequest\022\022\n\nchannel_id\030\001 \001(\004\"*\n\027ListUse"
  "rChannelsRequest\022\017\n\007user_id\030\001 \001(\004\"9\n\027Lis"
  "tUserChannelsReponse\022\036\n\010channels\030\001 \003(\0132\014"
  ".msg.Channel\"B\n\033CheckIsMemberChannelRequ"
  "est\022\017\n\007user_id\030\001 \001(\004\022\022\n\nchannel_id\030\002 \001(\004"
  "\"Q\n\033CheckIsMemberChannelReponse\022\r\n\005is_in"
  "\030\001 \001(\010\022\022\n\nchannel_id\030\002 \001(\004\022\017\n\007user_id\030\003 "
  "\001(\004\"H\n!CheckIsMemberAndGetChannelRequest"
  "\022\022\n\nchannel_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\004\"Q\n"
  "!CheckIsMemberAndGetChannelReponse\022\r\n\005is"
  "_in\030\001 \001(\010\022\035\n\007channel\030\002 \001(\0132\014.msg.Channel"
  "\"T\n\030AddMembersChannelRequest\022\022\n\nchannel_"
  "id\030\001 \001(\004\022$\n\007members\030\002 \003(\0132\023.msg.Channel."
  "Member\"A\n\032RemoveMemberChannelRequest\022\022\n\n"
  "channel_id\030\001 \001(\004\022\017\n\007user_id\030\002 \001(\0042\260\005\n\016Ch"
  "annelService\0224\n\nGetChannel\022\026.srv.GetChan"
  "nelRequest\032\014.msg.Channel\"\000\022:\n\rCreateChan"
  "nel\022\031.srv.CreateChannelRequest\032\014.msg.Cha"
  "nnel\"\000\022:\n\rUpdateChannel\022\031.srv.UpdateChan"
  "nelRequest\032\014.msg.Channel\"\000\022D\n\rDeleteChan"
  "nel\022\031.srv.DeleteChannelRequest\032\026.google."
  "protobuf.Empty\"\000\022P\n\020ListUserChannels\022\034.s"
  "rv.ListUserChannelsRequest\032\034.srv.ListUse"
  "rChannelsReponse\"\000\022\\\n\024CheckIsMemberChann"
  "el\022 .srv.CheckIsMemberChannelRequest\032 .s"
  "rv.CheckIsMemberChannelReponse\"\000\022n\n\032Chec"
  "kIsMemberAndGetChannel\022&.srv.CheckIsMemb"
  "erAndGetChannelRequest\032&.srv.CheckIsMemb"
  "erAndGetChannelReponse\"\000\022B\n\021AddMembersCh"
  "annel\022\035.srv.AddMembersChannelRequest\032\014.m"
  "sg.Channel\"\000\022F\n\023RemoveMemberChannel\022\037.sr"
  "v.RemoveMemberChannelRequest\032\014.msg.Chann"
  "el\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_channel_5fservice_2eproto_deps[3] = {
  &::descriptor_table_channel_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_channel_5fservice_2eproto_sccs[12] = {
  &scc_info_AddMembersChannelRequest_channel_5fservice_2eproto.base,
  &scc_info_CheckIsMemberAndGetChannelReponse_channel_5fservice_2eproto.base,
  &scc_info_CheckIsMemberAndGetChannelRequest_channel_5fservice_2eproto.base,
  &scc_info_CheckIsMemberChannelReponse_channel_5fservice_2eproto.base,
  &scc_info_CheckIsMemberChannelRequest_channel_5fservice_2eproto.base,
  &scc_info_CreateChannelRequest_channel_5fservice_2eproto.base,
  &scc_info_DeleteChannelRequest_channel_5fservice_2eproto.base,
  &scc_info_GetChannelRequest_channel_5fservice_2eproto.base,
  &scc_info_ListUserChannelsReponse_channel_5fservice_2eproto.base,
  &scc_info_ListUserChannelsRequest_channel_5fservice_2eproto.base,
  &scc_info_RemoveMemberChannelRequest_channel_5fservice_2eproto.base,
  &scc_info_UpdateChannelRequest_channel_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_channel_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_channel_5fservice_2eproto = {
  false, false, descriptor_table_protodef_channel_5fservice_2eproto, "channel_service.proto", 1612,
  &descriptor_table_channel_5fservice_2eproto_once, descriptor_table_channel_5fservice_2eproto_sccs, descriptor_table_channel_5fservice_2eproto_deps, 12, 3,
  schemas, file_default_instances, TableStruct_channel_5fservice_2eproto::offsets,
  file_level_metadata_channel_5fservice_2eproto, 12, file_level_enum_descriptors_channel_5fservice_2eproto, file_level_service_descriptors_channel_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_channel_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_channel_5fservice_2eproto)), true);
namespace srv {

// ===================================================================

void GetChannelRequest::InitAsDefaultInstance() {
}
class GetChannelRequest::_Internal {
 public:
};

GetChannelRequest::GetChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.GetChannelRequest)
}
GetChannelRequest::GetChannelRequest(const GetChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:srv.GetChannelRequest)
}

void GetChannelRequest::SharedCtor() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}

GetChannelRequest::~GetChannelRequest() {
  // @@protoc_insertion_point(destructor:srv.GetChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetChannelRequest::ArenaDtor(void* object) {
  GetChannelRequest* _this = reinterpret_cast< GetChannelRequest* >(object);
  (void)_this;
}
void GetChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChannelRequest& GetChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChannelRequest_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.GetChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.GetChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.GetChannelRequest)
  return target;
}

size_t GetChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.GetChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.GetChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.GetChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.GetChannelRequest)
    MergeFrom(*source);
  }
}

void GetChannelRequest::MergeFrom(const GetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.GetChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void GetChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.GetChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelRequest::CopyFrom(const GetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.GetChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelRequest::IsInitialized() const {
  return true;
}

void GetChannelRequest::InternalSwap(GetChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateChannelRequest::InitAsDefaultInstance() {
  ::srv::_CreateChannelRequest_default_instance_._instance.get_mutable()->channel_ = const_cast< ::msg::Channel*>(
      ::msg::Channel::internal_default_instance());
}
class CreateChannelRequest::_Internal {
 public:
  static const ::msg::Channel& channel(const CreateChannelRequest* msg);
};

const ::msg::Channel&
CreateChannelRequest::_Internal::channel(const CreateChannelRequest* msg) {
  return *msg->channel_;
}
void CreateChannelRequest::clear_channel() {
  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
CreateChannelRequest::CreateChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.CreateChannelRequest)
}
CreateChannelRequest::CreateChannelRequest(const CreateChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::msg::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srv.CreateChannelRequest)
}

void CreateChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateChannelRequest_channel_5fservice_2eproto.base);
  channel_ = nullptr;
}

CreateChannelRequest::~CreateChannelRequest() {
  // @@protoc_insertion_point(destructor:srv.CreateChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete channel_;
}

void CreateChannelRequest::ArenaDtor(void* object) {
  CreateChannelRequest* _this = reinterpret_cast< CreateChannelRequest* >(object);
  (void)_this;
}
void CreateChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateChannelRequest& CreateChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateChannelRequest_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CreateChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.CreateChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .msg.Channel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.CreateChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.Channel channel = 1;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.CreateChannelRequest)
  return target;
}

size_t CreateChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.CreateChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.Channel channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.CreateChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.CreateChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.CreateChannelRequest)
    MergeFrom(*source);
  }
}

void CreateChannelRequest::MergeFrom(const CreateChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.CreateChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    _internal_mutable_channel()->::msg::Channel::MergeFrom(from._internal_channel());
  }
}

void CreateChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.CreateChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChannelRequest::CopyFrom(const CreateChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.CreateChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChannelRequest::IsInitialized() const {
  return true;
}

void CreateChannelRequest::InternalSwap(CreateChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateChannelRequest::InitAsDefaultInstance() {
  ::srv::_UpdateChannelRequest_default_instance_._instance.get_mutable()->channel_ = const_cast< ::msg::Channel*>(
      ::msg::Channel::internal_default_instance());
  ::srv::_UpdateChannelRequest_default_instance_._instance.get_mutable()->field_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class UpdateChannelRequest::_Internal {
 public:
  static const ::msg::Channel& channel(const UpdateChannelRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& field_mask(const UpdateChannelRequest* msg);
};

const ::msg::Channel&
UpdateChannelRequest::_Internal::channel(const UpdateChannelRequest* msg) {
  return *msg->channel_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateChannelRequest::_Internal::field_mask(const UpdateChannelRequest* msg) {
  return *msg->field_mask_;
}
void UpdateChannelRequest::clear_channel() {
  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
void UpdateChannelRequest::clear_field_mask() {
  if (GetArena() == nullptr && field_mask_ != nullptr) {
    delete field_mask_;
  }
  field_mask_ = nullptr;
}
UpdateChannelRequest::UpdateChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.UpdateChannelRequest)
}
UpdateChannelRequest::UpdateChannelRequest(const UpdateChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::msg::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  if (from._internal_has_field_mask()) {
    field_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.field_mask_);
  } else {
    field_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srv.UpdateChannelRequest)
}

void UpdateChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateChannelRequest_channel_5fservice_2eproto.base);
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_mask_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(field_mask_));
}

UpdateChannelRequest::~UpdateChannelRequest() {
  // @@protoc_insertion_point(destructor:srv.UpdateChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete field_mask_;
}

void UpdateChannelRequest::ArenaDtor(void* object) {
  UpdateChannelRequest* _this = reinterpret_cast< UpdateChannelRequest* >(object);
  (void)_this;
}
void UpdateChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateChannelRequest& UpdateChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateChannelRequest_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void UpdateChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.UpdateChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  if (GetArena() == nullptr && field_mask_ != nullptr) {
    delete field_mask_;
  }
  field_mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .msg.Channel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask field_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_field_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.UpdateChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.Channel channel = 1;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  // .google.protobuf.FieldMask field_mask = 2;
  if (this->has_field_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::field_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.UpdateChannelRequest)
  return target;
}

size_t UpdateChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.UpdateChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.Channel channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .google.protobuf.FieldMask field_mask = 2;
  if (this->has_field_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *field_mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.UpdateChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.UpdateChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.UpdateChannelRequest)
    MergeFrom(*source);
  }
}

void UpdateChannelRequest::MergeFrom(const UpdateChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.UpdateChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    _internal_mutable_channel()->::msg::Channel::MergeFrom(from._internal_channel());
  }
  if (from.has_field_mask()) {
    _internal_mutable_field_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_field_mask());
  }
}

void UpdateChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.UpdateChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateChannelRequest::CopyFrom(const UpdateChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.UpdateChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChannelRequest::IsInitialized() const {
  return true;
}

void UpdateChannelRequest::InternalSwap(UpdateChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateChannelRequest, field_mask_)
      + sizeof(UpdateChannelRequest::field_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateChannelRequest, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteChannelRequest::InitAsDefaultInstance() {
}
class DeleteChannelRequest::_Internal {
 public:
};

DeleteChannelRequest::DeleteChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.DeleteChannelRequest)
}
DeleteChannelRequest::DeleteChannelRequest(const DeleteChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:srv.DeleteChannelRequest)
}

void DeleteChannelRequest::SharedCtor() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}

DeleteChannelRequest::~DeleteChannelRequest() {
  // @@protoc_insertion_point(destructor:srv.DeleteChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteChannelRequest::ArenaDtor(void* object) {
  DeleteChannelRequest* _this = reinterpret_cast< DeleteChannelRequest* >(object);
  (void)_this;
}
void DeleteChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteChannelRequest& DeleteChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteChannelRequest_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DeleteChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.DeleteChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.DeleteChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.DeleteChannelRequest)
  return target;
}

size_t DeleteChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.DeleteChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.DeleteChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.DeleteChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.DeleteChannelRequest)
    MergeFrom(*source);
  }
}

void DeleteChannelRequest::MergeFrom(const DeleteChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.DeleteChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void DeleteChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.DeleteChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteChannelRequest::CopyFrom(const DeleteChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.DeleteChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteChannelRequest::IsInitialized() const {
  return true;
}

void DeleteChannelRequest::InternalSwap(DeleteChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUserChannelsRequest::InitAsDefaultInstance() {
}
class ListUserChannelsRequest::_Internal {
 public:
};

ListUserChannelsRequest::ListUserChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.ListUserChannelsRequest)
}
ListUserChannelsRequest::ListUserChannelsRequest(const ListUserChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:srv.ListUserChannelsRequest)
}

void ListUserChannelsRequest::SharedCtor() {
  user_id_ = PROTOBUF_ULONGLONG(0);
}

ListUserChannelsRequest::~ListUserChannelsRequest() {
  // @@protoc_insertion_point(destructor:srv.ListUserChannelsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUserChannelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListUserChannelsRequest::ArenaDtor(void* object) {
  ListUserChannelsRequest* _this = reinterpret_cast< ListUserChannelsRequest* >(object);
  (void)_this;
}
void ListUserChannelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserChannelsRequest& ListUserChannelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserChannelsRequest_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ListUserChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.ListUserChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserChannelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserChannelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.ListUserChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.ListUserChannelsRequest)
  return target;
}

size_t ListUserChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.ListUserChannelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserChannelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.ListUserChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserChannelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserChannelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.ListUserChannelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.ListUserChannelsRequest)
    MergeFrom(*source);
  }
}

void ListUserChannelsRequest::MergeFrom(const ListUserChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.ListUserChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void ListUserChannelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.ListUserChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserChannelsRequest::CopyFrom(const ListUserChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.ListUserChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserChannelsRequest::IsInitialized() const {
  return true;
}

void ListUserChannelsRequest::InternalSwap(ListUserChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserChannelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUserChannelsReponse::InitAsDefaultInstance() {
}
class ListUserChannelsReponse::_Internal {
 public:
};

void ListUserChannelsReponse::clear_channels() {
  channels_.Clear();
}
ListUserChannelsReponse::ListUserChannelsReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.ListUserChannelsReponse)
}
ListUserChannelsReponse::ListUserChannelsReponse(const ListUserChannelsReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:srv.ListUserChannelsReponse)
}

void ListUserChannelsReponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUserChannelsReponse_channel_5fservice_2eproto.base);
}

ListUserChannelsReponse::~ListUserChannelsReponse() {
  // @@protoc_insertion_point(destructor:srv.ListUserChannelsReponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUserChannelsReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListUserChannelsReponse::ArenaDtor(void* object) {
  ListUserChannelsReponse* _this = reinterpret_cast< ListUserChannelsReponse* >(object);
  (void)_this;
}
void ListUserChannelsReponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserChannelsReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserChannelsReponse& ListUserChannelsReponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserChannelsReponse_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ListUserChannelsReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.ListUserChannelsReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserChannelsReponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.Channel channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserChannelsReponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.ListUserChannelsReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.Channel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.ListUserChannelsReponse)
  return target;
}

size_t ListUserChannelsReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.ListUserChannelsReponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Channel channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserChannelsReponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.ListUserChannelsReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserChannelsReponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserChannelsReponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.ListUserChannelsReponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.ListUserChannelsReponse)
    MergeFrom(*source);
  }
}

void ListUserChannelsReponse::MergeFrom(const ListUserChannelsReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.ListUserChannelsReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void ListUserChannelsReponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.ListUserChannelsReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserChannelsReponse::CopyFrom(const ListUserChannelsReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.ListUserChannelsReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserChannelsReponse::IsInitialized() const {
  return true;
}

void ListUserChannelsReponse::InternalSwap(ListUserChannelsReponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserChannelsReponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckIsMemberChannelRequest::InitAsDefaultInstance() {
}
class CheckIsMemberChannelRequest::_Internal {
 public:
};

CheckIsMemberChannelRequest::CheckIsMemberChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.CheckIsMemberChannelRequest)
}
CheckIsMemberChannelRequest::CheckIsMemberChannelRequest(const CheckIsMemberChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_id_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(channel_id_));
  // @@protoc_insertion_point(copy_constructor:srv.CheckIsMemberChannelRequest)
}

void CheckIsMemberChannelRequest::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(channel_id_));
}

CheckIsMemberChannelRequest::~CheckIsMemberChannelRequest() {
  // @@protoc_insertion_point(destructor:srv.CheckIsMemberChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckIsMemberChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckIsMemberChannelRequest::ArenaDtor(void* object) {
  CheckIsMemberChannelRequest* _this = reinterpret_cast< CheckIsMemberChannelRequest* >(object);
  (void)_this;
}
void CheckIsMemberChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckIsMemberChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckIsMemberChannelRequest& CheckIsMemberChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckIsMemberChannelRequest_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CheckIsMemberChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.CheckIsMemberChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_id_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(channel_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIsMemberChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckIsMemberChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.CheckIsMemberChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.CheckIsMemberChannelRequest)
  return target;
}

size_t CheckIsMemberChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.CheckIsMemberChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckIsMemberChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.CheckIsMemberChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckIsMemberChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckIsMemberChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.CheckIsMemberChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.CheckIsMemberChannelRequest)
    MergeFrom(*source);
  }
}

void CheckIsMemberChannelRequest::MergeFrom(const CheckIsMemberChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.CheckIsMemberChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void CheckIsMemberChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.CheckIsMemberChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckIsMemberChannelRequest::CopyFrom(const CheckIsMemberChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.CheckIsMemberChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIsMemberChannelRequest::IsInitialized() const {
  return true;
}

void CheckIsMemberChannelRequest::InternalSwap(CheckIsMemberChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckIsMemberChannelRequest, channel_id_)
      + sizeof(CheckIsMemberChannelRequest::channel_id_)
      - PROTOBUF_FIELD_OFFSET(CheckIsMemberChannelRequest, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIsMemberChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckIsMemberChannelReponse::InitAsDefaultInstance() {
}
class CheckIsMemberChannelReponse::_Internal {
 public:
};

CheckIsMemberChannelReponse::CheckIsMemberChannelReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.CheckIsMemberChannelReponse)
}
CheckIsMemberChannelReponse::CheckIsMemberChannelReponse(const CheckIsMemberChannelReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_in_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(is_in_));
  // @@protoc_insertion_point(copy_constructor:srv.CheckIsMemberChannelReponse)
}

void CheckIsMemberChannelReponse::SharedCtor() {
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(is_in_));
}

CheckIsMemberChannelReponse::~CheckIsMemberChannelReponse() {
  // @@protoc_insertion_point(destructor:srv.CheckIsMemberChannelReponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckIsMemberChannelReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckIsMemberChannelReponse::ArenaDtor(void* object) {
  CheckIsMemberChannelReponse* _this = reinterpret_cast< CheckIsMemberChannelReponse* >(object);
  (void)_this;
}
void CheckIsMemberChannelReponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckIsMemberChannelReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckIsMemberChannelReponse& CheckIsMemberChannelReponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckIsMemberChannelReponse_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CheckIsMemberChannelReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.CheckIsMemberChannelReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(is_in_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIsMemberChannelReponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_in = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckIsMemberChannelReponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.CheckIsMemberChannelReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_in = 1;
  if (this->is_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_in(), target);
  }

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_channel_id(), target);
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.CheckIsMemberChannelReponse)
  return target;
}

size_t CheckIsMemberChannelReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.CheckIsMemberChannelReponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 channel_id = 2;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 user_id = 3;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // bool is_in = 1;
  if (this->is_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckIsMemberChannelReponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.CheckIsMemberChannelReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckIsMemberChannelReponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckIsMemberChannelReponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.CheckIsMemberChannelReponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.CheckIsMemberChannelReponse)
    MergeFrom(*source);
  }
}

void CheckIsMemberChannelReponse::MergeFrom(const CheckIsMemberChannelReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.CheckIsMemberChannelReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.is_in() != 0) {
    _internal_set_is_in(from._internal_is_in());
  }
}

void CheckIsMemberChannelReponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.CheckIsMemberChannelReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckIsMemberChannelReponse::CopyFrom(const CheckIsMemberChannelReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.CheckIsMemberChannelReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIsMemberChannelReponse::IsInitialized() const {
  return true;
}

void CheckIsMemberChannelReponse::InternalSwap(CheckIsMemberChannelReponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckIsMemberChannelReponse, is_in_)
      + sizeof(CheckIsMemberChannelReponse::is_in_)
      - PROTOBUF_FIELD_OFFSET(CheckIsMemberChannelReponse, channel_id_)>(
          reinterpret_cast<char*>(&channel_id_),
          reinterpret_cast<char*>(&other->channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIsMemberChannelReponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckIsMemberAndGetChannelRequest::InitAsDefaultInstance() {
}
class CheckIsMemberAndGetChannelRequest::_Internal {
 public:
};

CheckIsMemberAndGetChannelRequest::CheckIsMemberAndGetChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.CheckIsMemberAndGetChannelRequest)
}
CheckIsMemberAndGetChannelRequest::CheckIsMemberAndGetChannelRequest(const CheckIsMemberAndGetChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:srv.CheckIsMemberAndGetChannelRequest)
}

void CheckIsMemberAndGetChannelRequest::SharedCtor() {
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(user_id_));
}

CheckIsMemberAndGetChannelRequest::~CheckIsMemberAndGetChannelRequest() {
  // @@protoc_insertion_point(destructor:srv.CheckIsMemberAndGetChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckIsMemberAndGetChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CheckIsMemberAndGetChannelRequest::ArenaDtor(void* object) {
  CheckIsMemberAndGetChannelRequest* _this = reinterpret_cast< CheckIsMemberAndGetChannelRequest* >(object);
  (void)_this;
}
void CheckIsMemberAndGetChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckIsMemberAndGetChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckIsMemberAndGetChannelRequest& CheckIsMemberAndGetChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckIsMemberAndGetChannelRequest_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CheckIsMemberAndGetChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.CheckIsMemberAndGetChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIsMemberAndGetChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckIsMemberAndGetChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.CheckIsMemberAndGetChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.CheckIsMemberAndGetChannelRequest)
  return target;
}

size_t CheckIsMemberAndGetChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.CheckIsMemberAndGetChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckIsMemberAndGetChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.CheckIsMemberAndGetChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckIsMemberAndGetChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckIsMemberAndGetChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.CheckIsMemberAndGetChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.CheckIsMemberAndGetChannelRequest)
    MergeFrom(*source);
  }
}

void CheckIsMemberAndGetChannelRequest::MergeFrom(const CheckIsMemberAndGetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.CheckIsMemberAndGetChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void CheckIsMemberAndGetChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.CheckIsMemberAndGetChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckIsMemberAndGetChannelRequest::CopyFrom(const CheckIsMemberAndGetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.CheckIsMemberAndGetChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIsMemberAndGetChannelRequest::IsInitialized() const {
  return true;
}

void CheckIsMemberAndGetChannelRequest::InternalSwap(CheckIsMemberAndGetChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckIsMemberAndGetChannelRequest, user_id_)
      + sizeof(CheckIsMemberAndGetChannelRequest::user_id_)
      - PROTOBUF_FIELD_OFFSET(CheckIsMemberAndGetChannelRequest, channel_id_)>(
          reinterpret_cast<char*>(&channel_id_),
          reinterpret_cast<char*>(&other->channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIsMemberAndGetChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckIsMemberAndGetChannelReponse::InitAsDefaultInstance() {
  ::srv::_CheckIsMemberAndGetChannelReponse_default_instance_._instance.get_mutable()->channel_ = const_cast< ::msg::Channel*>(
      ::msg::Channel::internal_default_instance());
}
class CheckIsMemberAndGetChannelReponse::_Internal {
 public:
  static const ::msg::Channel& channel(const CheckIsMemberAndGetChannelReponse* msg);
};

const ::msg::Channel&
CheckIsMemberAndGetChannelReponse::_Internal::channel(const CheckIsMemberAndGetChannelReponse* msg) {
  return *msg->channel_;
}
void CheckIsMemberAndGetChannelReponse::clear_channel() {
  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
CheckIsMemberAndGetChannelReponse::CheckIsMemberAndGetChannelReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.CheckIsMemberAndGetChannelReponse)
}
CheckIsMemberAndGetChannelReponse::CheckIsMemberAndGetChannelReponse(const CheckIsMemberAndGetChannelReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::msg::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  is_in_ = from.is_in_;
  // @@protoc_insertion_point(copy_constructor:srv.CheckIsMemberAndGetChannelReponse)
}

void CheckIsMemberAndGetChannelReponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckIsMemberAndGetChannelReponse_channel_5fservice_2eproto.base);
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_in_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(is_in_));
}

CheckIsMemberAndGetChannelReponse::~CheckIsMemberAndGetChannelReponse() {
  // @@protoc_insertion_point(destructor:srv.CheckIsMemberAndGetChannelReponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckIsMemberAndGetChannelReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete channel_;
}

void CheckIsMemberAndGetChannelReponse::ArenaDtor(void* object) {
  CheckIsMemberAndGetChannelReponse* _this = reinterpret_cast< CheckIsMemberAndGetChannelReponse* >(object);
  (void)_this;
}
void CheckIsMemberAndGetChannelReponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckIsMemberAndGetChannelReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckIsMemberAndGetChannelReponse& CheckIsMemberAndGetChannelReponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckIsMemberAndGetChannelReponse_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CheckIsMemberAndGetChannelReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.CheckIsMemberAndGetChannelReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  is_in_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckIsMemberAndGetChannelReponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_in = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg.Channel channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckIsMemberAndGetChannelReponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.CheckIsMemberAndGetChannelReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_in = 1;
  if (this->is_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_in(), target);
  }

  // .msg.Channel channel = 2;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.CheckIsMemberAndGetChannelReponse)
  return target;
}

size_t CheckIsMemberAndGetChannelReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.CheckIsMemberAndGetChannelReponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.Channel channel = 2;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // bool is_in = 1;
  if (this->is_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckIsMemberAndGetChannelReponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.CheckIsMemberAndGetChannelReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckIsMemberAndGetChannelReponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckIsMemberAndGetChannelReponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.CheckIsMemberAndGetChannelReponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.CheckIsMemberAndGetChannelReponse)
    MergeFrom(*source);
  }
}

void CheckIsMemberAndGetChannelReponse::MergeFrom(const CheckIsMemberAndGetChannelReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.CheckIsMemberAndGetChannelReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    _internal_mutable_channel()->::msg::Channel::MergeFrom(from._internal_channel());
  }
  if (from.is_in() != 0) {
    _internal_set_is_in(from._internal_is_in());
  }
}

void CheckIsMemberAndGetChannelReponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.CheckIsMemberAndGetChannelReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckIsMemberAndGetChannelReponse::CopyFrom(const CheckIsMemberAndGetChannelReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.CheckIsMemberAndGetChannelReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckIsMemberAndGetChannelReponse::IsInitialized() const {
  return true;
}

void CheckIsMemberAndGetChannelReponse::InternalSwap(CheckIsMemberAndGetChannelReponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckIsMemberAndGetChannelReponse, is_in_)
      + sizeof(CheckIsMemberAndGetChannelReponse::is_in_)
      - PROTOBUF_FIELD_OFFSET(CheckIsMemberAndGetChannelReponse, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckIsMemberAndGetChannelReponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddMembersChannelRequest::InitAsDefaultInstance() {
}
class AddMembersChannelRequest::_Internal {
 public:
};

void AddMembersChannelRequest::clear_members() {
  members_.Clear();
}
AddMembersChannelRequest::AddMembersChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.AddMembersChannelRequest)
}
AddMembersChannelRequest::AddMembersChannelRequest(const AddMembersChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:srv.AddMembersChannelRequest)
}

void AddMembersChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddMembersChannelRequest_channel_5fservice_2eproto.base);
  channel_id_ = PROTOBUF_ULONGLONG(0);
}

AddMembersChannelRequest::~AddMembersChannelRequest() {
  // @@protoc_insertion_point(destructor:srv.AddMembersChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddMembersChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddMembersChannelRequest::ArenaDtor(void* object) {
  AddMembersChannelRequest* _this = reinterpret_cast< AddMembersChannelRequest* >(object);
  (void)_this;
}
void AddMembersChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddMembersChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddMembersChannelRequest& AddMembersChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddMembersChannelRequest_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddMembersChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.AddMembersChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddMembersChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.Channel.Member members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddMembersChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.AddMembersChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // repeated .msg.Channel.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.AddMembersChannelRequest)
  return target;
}

size_t AddMembersChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.AddMembersChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Channel.Member members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddMembersChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.AddMembersChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddMembersChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddMembersChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.AddMembersChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.AddMembersChannelRequest)
    MergeFrom(*source);
  }
}

void AddMembersChannelRequest::MergeFrom(const AddMembersChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.AddMembersChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
}

void AddMembersChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.AddMembersChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMembersChannelRequest::CopyFrom(const AddMembersChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.AddMembersChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMembersChannelRequest::IsInitialized() const {
  return true;
}

void AddMembersChannelRequest::InternalSwap(AddMembersChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  swap(channel_id_, other->channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddMembersChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveMemberChannelRequest::InitAsDefaultInstance() {
}
class RemoveMemberChannelRequest::_Internal {
 public:
};

RemoveMemberChannelRequest::RemoveMemberChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.RemoveMemberChannelRequest)
}
RemoveMemberChannelRequest::RemoveMemberChannelRequest(const RemoveMemberChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:srv.RemoveMemberChannelRequest)
}

void RemoveMemberChannelRequest::SharedCtor() {
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(user_id_));
}

RemoveMemberChannelRequest::~RemoveMemberChannelRequest() {
  // @@protoc_insertion_point(destructor:srv.RemoveMemberChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveMemberChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveMemberChannelRequest::ArenaDtor(void* object) {
  RemoveMemberChannelRequest* _this = reinterpret_cast< RemoveMemberChannelRequest* >(object);
  (void)_this;
}
void RemoveMemberChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveMemberChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveMemberChannelRequest& RemoveMemberChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveMemberChannelRequest_channel_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RemoveMemberChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.RemoveMemberChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveMemberChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveMemberChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.RemoveMemberChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.RemoveMemberChannelRequest)
  return target;
}

size_t RemoveMemberChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.RemoveMemberChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 channel_id = 1;
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveMemberChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.RemoveMemberChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveMemberChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveMemberChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.RemoveMemberChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.RemoveMemberChannelRequest)
    MergeFrom(*source);
  }
}

void RemoveMemberChannelRequest::MergeFrom(const RemoveMemberChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.RemoveMemberChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void RemoveMemberChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.RemoveMemberChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMemberChannelRequest::CopyFrom(const RemoveMemberChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.RemoveMemberChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMemberChannelRequest::IsInitialized() const {
  return true;
}

void RemoveMemberChannelRequest::InternalSwap(RemoveMemberChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveMemberChannelRequest, user_id_)
      + sizeof(RemoveMemberChannelRequest::user_id_)
      - PROTOBUF_FIELD_OFFSET(RemoveMemberChannelRequest, channel_id_)>(
          reinterpret_cast<char*>(&channel_id_),
          reinterpret_cast<char*>(&other->channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveMemberChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace srv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::srv::GetChannelRequest* Arena::CreateMaybeMessage< ::srv::GetChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::GetChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::CreateChannelRequest* Arena::CreateMaybeMessage< ::srv::CreateChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::CreateChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::UpdateChannelRequest* Arena::CreateMaybeMessage< ::srv::UpdateChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::UpdateChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::DeleteChannelRequest* Arena::CreateMaybeMessage< ::srv::DeleteChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::DeleteChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::ListUserChannelsRequest* Arena::CreateMaybeMessage< ::srv::ListUserChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::ListUserChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::ListUserChannelsReponse* Arena::CreateMaybeMessage< ::srv::ListUserChannelsReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::ListUserChannelsReponse >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::CheckIsMemberChannelRequest* Arena::CreateMaybeMessage< ::srv::CheckIsMemberChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::CheckIsMemberChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::CheckIsMemberChannelReponse* Arena::CreateMaybeMessage< ::srv::CheckIsMemberChannelReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::CheckIsMemberChannelReponse >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::CheckIsMemberAndGetChannelRequest* Arena::CreateMaybeMessage< ::srv::CheckIsMemberAndGetChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::CheckIsMemberAndGetChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::CheckIsMemberAndGetChannelReponse* Arena::CreateMaybeMessage< ::srv::CheckIsMemberAndGetChannelReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::CheckIsMemberAndGetChannelReponse >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::AddMembersChannelRequest* Arena::CreateMaybeMessage< ::srv::AddMembersChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::AddMembersChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::RemoveMemberChannelRequest* Arena::CreateMaybeMessage< ::srv::RemoveMemberChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::RemoveMemberChannelRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
