// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: money_service.proto
#ifndef GRPC_money_5fservice_2eproto__INCLUDED
#define GRPC_money_5fservice_2eproto__INCLUDED

#include "money_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace srv {

class MoneyService final {
 public:
  static constexpr char const* service_full_name() {
    return "srv.MoneyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::msg::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>> AsyncCreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>>(AsyncCreateAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>> PrepareAsyncCreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>>(PrepareAsyncCreateAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::msg::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>> AsyncGetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>>(AsyncGetBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>> PrepareAsyncGetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>>(PrepareAsyncGetBalanceRaw(context, request, cq));
    }
    virtual ::grpc::Status Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::msg::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>> AsyncDeposit(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>>(AsyncDepositRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>> PrepareAsyncDeposit(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>>(PrepareAsyncDepositRaw(context, request, cq));
    }
    virtual ::grpc::Status WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::msg::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>> AsyncWithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>>(AsyncWithDrawRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>> PrepareAsyncWithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>>(PrepareAsyncWithDrawRaw(context, request, cq));
    }
    virtual ::grpc::Status Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::msg::Account* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>> AsyncTransfer(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>>(AsyncTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>> PrepareAsyncTransfer(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>>(PrepareAsyncTransferRaw(context, request, cq));
    }
    virtual ::grpc::Status History(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::srv::HistoryReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::HistoryReponse>> AsyncHistory(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::HistoryReponse>>(AsyncHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::HistoryReponse>> PrepareAsyncHistory(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::HistoryReponse>>(PrepareAsyncHistoryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Deposit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Deposit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Deposit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WithDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void WithDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void WithDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Transfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Transfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Transfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void History(::grpc::ClientContext* context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void History(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::HistoryReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void History(::grpc::ClientContext* context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void History(::grpc::ClientContext* context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void History(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::HistoryReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void History(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::HistoryReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>* AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>* PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>* AsyncGetBalanceRaw(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>* PrepareAsyncGetBalanceRaw(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>* AsyncDepositRaw(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>* PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>* AsyncWithDrawRaw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>* PrepareAsyncWithDrawRaw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>* AsyncTransferRaw(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::msg::Account>* PrepareAsyncTransferRaw(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::HistoryReponse>* AsyncHistoryRaw(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::HistoryReponse>* PrepareAsyncHistoryRaw(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::msg::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>> AsyncCreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>>(AsyncCreateAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>> PrepareAsyncCreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>>(PrepareAsyncCreateAccountRaw(context, request, cq));
    }
    ::grpc::Status GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::msg::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>> AsyncGetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>>(AsyncGetBalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>> PrepareAsyncGetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>>(PrepareAsyncGetBalanceRaw(context, request, cq));
    }
    ::grpc::Status Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::msg::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>> AsyncDeposit(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>>(AsyncDepositRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>> PrepareAsyncDeposit(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>>(PrepareAsyncDepositRaw(context, request, cq));
    }
    ::grpc::Status WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::msg::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>> AsyncWithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>>(AsyncWithDrawRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>> PrepareAsyncWithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>>(PrepareAsyncWithDrawRaw(context, request, cq));
    }
    ::grpc::Status Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::msg::Account* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>> AsyncTransfer(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>>(AsyncTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>> PrepareAsyncTransfer(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::msg::Account>>(PrepareAsyncTransferRaw(context, request, cq));
    }
    ::grpc::Status History(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::srv::HistoryReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::HistoryReponse>> AsyncHistory(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::HistoryReponse>>(AsyncHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::HistoryReponse>> PrepareAsyncHistory(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::HistoryReponse>>(PrepareAsyncHistoryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)>) override;
      void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateAccount(::grpc::ClientContext* context, const ::srv::CreateAccountRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)>) override;
      void GetBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBalance(::grpc::ClientContext* context, const ::srv::GetBalanceRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)>) override;
      void Deposit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Deposit(::grpc::ClientContext* context, const ::srv::DepositRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Deposit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Deposit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)>) override;
      void WithDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void WithDraw(::grpc::ClientContext* context, const ::srv::WithDrawRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void WithDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void WithDraw(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest* request, ::msg::Account* response, std::function<void(::grpc::Status)>) override;
      void Transfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Transfer(::grpc::ClientContext* context, const ::srv::TransferRequest* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Transfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Transfer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::Account* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void History(::grpc::ClientContext* context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response, std::function<void(::grpc::Status)>) override;
      void History(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::HistoryReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void History(::grpc::ClientContext* context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void History(::grpc::ClientContext* context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void History(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::HistoryReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void History(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::HistoryReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::msg::Account>* AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Account>* PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::srv::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Account>* AsyncGetBalanceRaw(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Account>* PrepareAsyncGetBalanceRaw(::grpc::ClientContext* context, const ::srv::GetBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Account>* AsyncDepositRaw(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Account>* PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::srv::DepositRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Account>* AsyncWithDrawRaw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Account>* PrepareAsyncWithDrawRaw(::grpc::ClientContext* context, const ::srv::WithDrawRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Account>* AsyncTransferRaw(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::msg::Account>* PrepareAsyncTransferRaw(::grpc::ClientContext* context, const ::srv::TransferRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::HistoryReponse>* AsyncHistoryRaw(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::HistoryReponse>* PrepareAsyncHistoryRaw(::grpc::ClientContext* context, const ::srv::HistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_Deposit_;
    const ::grpc::internal::RpcMethod rpcmethod_WithDraw_;
    const ::grpc::internal::RpcMethod rpcmethod_Transfer_;
    const ::grpc::internal::RpcMethod rpcmethod_History_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateAccount(::grpc::ServerContext* context, const ::srv::CreateAccountRequest* request, ::msg::Account* response);
    virtual ::grpc::Status GetBalance(::grpc::ServerContext* context, const ::srv::GetBalanceRequest* request, ::msg::Account* response);
    virtual ::grpc::Status Deposit(::grpc::ServerContext* context, const ::srv::DepositRequest* request, ::msg::Account* response);
    virtual ::grpc::Status WithDraw(::grpc::ServerContext* context, const ::srv::WithDrawRequest* request, ::msg::Account* response);
    virtual ::grpc::Status Transfer(::grpc::ServerContext* context, const ::srv::TransferRequest* request, ::msg::Account* response);
    virtual ::grpc::Status History(::grpc::ServerContext* context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::srv::CreateAccountRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount(::grpc::ServerContext* context, ::srv::CreateAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::msg::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBalance() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::srv::GetBalanceRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBalance(::grpc::ServerContext* context, ::srv::GetBalanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::msg::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Deposit() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::srv::DepositRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeposit(::grpc::ServerContext* context, ::srv::DepositRequest* request, ::grpc::ServerAsyncResponseWriter< ::msg::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WithDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WithDraw() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_WithDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithDraw(::grpc::ServerContext* /*context*/, const ::srv::WithDrawRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithDraw(::grpc::ServerContext* context, ::srv::WithDrawRequest* request, ::grpc::ServerAsyncResponseWriter< ::msg::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Transfer() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::srv::TransferRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransfer(::grpc::ServerContext* context, ::srv::TransferRequest* request, ::grpc::ServerAsyncResponseWriter< ::msg::Account>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_History() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::srv::HistoryRequest* /*request*/, ::srv::HistoryReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHistory(::grpc::ServerContext* context, ::srv::HistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::HistoryReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateAccount<WithAsyncMethod_GetBalance<WithAsyncMethod_Deposit<WithAsyncMethod_WithDraw<WithAsyncMethod_Transfer<WithAsyncMethod_History<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::CreateAccountRequest, ::msg::Account>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::CreateAccountRequest* request, ::msg::Account* response) { return this->CreateAccount(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAccount(
        ::grpc::experimental::MessageAllocator< ::srv::CreateAccountRequest, ::msg::Account>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::CreateAccountRequest, ::msg::Account>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::srv::CreateAccountRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::CreateAccountRequest* /*request*/, ::msg::Account* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::CreateAccountRequest* /*request*/, ::msg::Account* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBalance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::GetBalanceRequest, ::msg::Account>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::GetBalanceRequest* request, ::msg::Account* response) { return this->GetBalance(context, request, response); }));}
    void SetMessageAllocatorFor_GetBalance(
        ::grpc::experimental::MessageAllocator< ::srv::GetBalanceRequest, ::msg::Account>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::GetBalanceRequest, ::msg::Account>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::srv::GetBalanceRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::GetBalanceRequest* /*request*/, ::msg::Account* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBalance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::GetBalanceRequest* /*request*/, ::msg::Account* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Deposit() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::DepositRequest, ::msg::Account>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::DepositRequest* request, ::msg::Account* response) { return this->Deposit(context, request, response); }));}
    void SetMessageAllocatorFor_Deposit(
        ::grpc::experimental::MessageAllocator< ::srv::DepositRequest, ::msg::Account>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::DepositRequest, ::msg::Account>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::srv::DepositRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Deposit(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::DepositRequest* /*request*/, ::msg::Account* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Deposit(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::DepositRequest* /*request*/, ::msg::Account* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WithDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_WithDraw() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::WithDrawRequest, ::msg::Account>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::WithDrawRequest* request, ::msg::Account* response) { return this->WithDraw(context, request, response); }));}
    void SetMessageAllocatorFor_WithDraw(
        ::grpc::experimental::MessageAllocator< ::srv::WithDrawRequest, ::msg::Account>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::WithDrawRequest, ::msg::Account>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_WithDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithDraw(::grpc::ServerContext* /*context*/, const ::srv::WithDrawRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WithDraw(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::WithDrawRequest* /*request*/, ::msg::Account* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WithDraw(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::WithDrawRequest* /*request*/, ::msg::Account* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Transfer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::TransferRequest, ::msg::Account>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::TransferRequest* request, ::msg::Account* response) { return this->Transfer(context, request, response); }));}
    void SetMessageAllocatorFor_Transfer(
        ::grpc::experimental::MessageAllocator< ::srv::TransferRequest, ::msg::Account>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::TransferRequest, ::msg::Account>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::srv::TransferRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Transfer(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::TransferRequest* /*request*/, ::msg::Account* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Transfer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::TransferRequest* /*request*/, ::msg::Account* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_History() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::HistoryRequest, ::srv::HistoryReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::HistoryRequest* request, ::srv::HistoryReponse* response) { return this->History(context, request, response); }));}
    void SetMessageAllocatorFor_History(
        ::grpc::experimental::MessageAllocator< ::srv::HistoryRequest, ::srv::HistoryReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::HistoryRequest, ::srv::HistoryReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::srv::HistoryRequest* /*request*/, ::srv::HistoryReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* History(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::HistoryRequest* /*request*/, ::srv::HistoryReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* History(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::HistoryRequest* /*request*/, ::srv::HistoryReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateAccount<ExperimentalWithCallbackMethod_GetBalance<ExperimentalWithCallbackMethod_Deposit<ExperimentalWithCallbackMethod_WithDraw<ExperimentalWithCallbackMethod_Transfer<ExperimentalWithCallbackMethod_History<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateAccount<ExperimentalWithCallbackMethod_GetBalance<ExperimentalWithCallbackMethod_Deposit<ExperimentalWithCallbackMethod_WithDraw<ExperimentalWithCallbackMethod_Transfer<ExperimentalWithCallbackMethod_History<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::srv::CreateAccountRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBalance() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::srv::GetBalanceRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Deposit() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::srv::DepositRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WithDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WithDraw() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_WithDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithDraw(::grpc::ServerContext* /*context*/, const ::srv::WithDrawRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Transfer() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::srv::TransferRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_History() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::srv::HistoryRequest* /*request*/, ::srv::HistoryReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAccount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::srv::CreateAccountRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBalance() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::srv::GetBalanceRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Deposit() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::srv::DepositRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeposit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WithDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WithDraw() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_WithDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithDraw(::grpc::ServerContext* /*context*/, const ::srv::WithDrawRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWithDraw(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Transfer() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::srv::TransferRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransfer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_History() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::srv::HistoryRequest* /*request*/, ::srv::HistoryReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::srv::CreateAccountRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBalance() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBalance(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::srv::GetBalanceRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBalance(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Deposit() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Deposit(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::srv::DepositRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Deposit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Deposit(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WithDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_WithDraw() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WithDraw(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_WithDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WithDraw(::grpc::ServerContext* /*context*/, const ::srv::WithDrawRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* WithDraw(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* WithDraw(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Transfer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Transfer(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::srv::TransferRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Transfer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Transfer(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_History() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->History(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::srv::HistoryRequest* /*request*/, ::srv::HistoryReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* History(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* History(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::CreateAccountRequest, ::msg::Account>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::CreateAccountRequest, ::msg::Account>* streamer) {
                       return this->StreamedCreateAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::srv::CreateAccountRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::CreateAccountRequest,::msg::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBalance() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::GetBalanceRequest, ::msg::Account>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::GetBalanceRequest, ::msg::Account>* streamer) {
                       return this->StreamedGetBalance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBalance(::grpc::ServerContext* /*context*/, const ::srv::GetBalanceRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::GetBalanceRequest,::msg::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Deposit() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::DepositRequest, ::msg::Account>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::DepositRequest, ::msg::Account>* streamer) {
                       return this->StreamedDeposit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::srv::DepositRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeposit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::DepositRequest,::msg::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WithDraw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WithDraw() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::WithDrawRequest, ::msg::Account>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::WithDrawRequest, ::msg::Account>* streamer) {
                       return this->StreamedWithDraw(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WithDraw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WithDraw(::grpc::ServerContext* /*context*/, const ::srv::WithDrawRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWithDraw(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::WithDrawRequest,::msg::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Transfer() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::TransferRequest, ::msg::Account>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::TransferRequest, ::msg::Account>* streamer) {
                       return this->StreamedTransfer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::srv::TransferRequest* /*request*/, ::msg::Account* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransfer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::TransferRequest,::msg::Account>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_History : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_History() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::HistoryRequest, ::srv::HistoryReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::HistoryRequest, ::srv::HistoryReponse>* streamer) {
                       return this->StreamedHistory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_History() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status History(::grpc::ServerContext* /*context*/, const ::srv::HistoryRequest* /*request*/, ::srv::HistoryReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::HistoryRequest,::srv::HistoryReponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateAccount<WithStreamedUnaryMethod_GetBalance<WithStreamedUnaryMethod_Deposit<WithStreamedUnaryMethod_WithDraw<WithStreamedUnaryMethod_Transfer<WithStreamedUnaryMethod_History<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateAccount<WithStreamedUnaryMethod_GetBalance<WithStreamedUnaryMethod_Deposit<WithStreamedUnaryMethod_WithDraw<WithStreamedUnaryMethod_Transfer<WithStreamedUnaryMethod_History<Service > > > > > > StreamedService;
};

}  // namespace srv


#endif  // GRPC_money_5fservice_2eproto__INCLUDED
