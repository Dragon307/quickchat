// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message.pb.h"
#include "channel.pb.h"
#include "account.pb.h"
#include "history.pb.h"
#include "user.pb.h"
#include "friend.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_payload_2eproto;
namespace msg {
class AccountReponse;
class AccountReponseDefaultTypeInternal;
extern AccountReponseDefaultTypeInternal _AccountReponse_default_instance_;
class ChannelReponse;
class ChannelReponseDefaultTypeInternal;
extern ChannelReponseDefaultTypeInternal _ChannelReponse_default_instance_;
class ChatItem;
class ChatItemDefaultTypeInternal;
extern ChatItemDefaultTypeInternal _ChatItem_default_instance_;
class ChatList;
class ChatListDefaultTypeInternal;
extern ChatListDefaultTypeInternal _ChatList_default_instance_;
class FriendListReponse;
class FriendListReponseDefaultTypeInternal;
extern FriendListReponseDefaultTypeInternal _FriendListReponse_default_instance_;
class FriendListReponse_Data;
class FriendListReponse_DataDefaultTypeInternal;
extern FriendListReponse_DataDefaultTypeInternal _FriendListReponse_Data_default_instance_;
class FriendReponse;
class FriendReponseDefaultTypeInternal;
extern FriendReponseDefaultTypeInternal _FriendReponse_default_instance_;
class HistoryReponse;
class HistoryReponseDefaultTypeInternal;
extern HistoryReponseDefaultTypeInternal _HistoryReponse_default_instance_;
class MessageList;
class MessageListDefaultTypeInternal;
extern MessageListDefaultTypeInternal _MessageList_default_instance_;
class UserReponse;
class UserReponseDefaultTypeInternal;
extern UserReponseDefaultTypeInternal _UserReponse_default_instance_;
class UserReponse_Data;
class UserReponse_DataDefaultTypeInternal;
extern UserReponse_DataDefaultTypeInternal _UserReponse_Data_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::AccountReponse* Arena::CreateMaybeMessage<::msg::AccountReponse>(Arena*);
template<> ::msg::ChannelReponse* Arena::CreateMaybeMessage<::msg::ChannelReponse>(Arena*);
template<> ::msg::ChatItem* Arena::CreateMaybeMessage<::msg::ChatItem>(Arena*);
template<> ::msg::ChatList* Arena::CreateMaybeMessage<::msg::ChatList>(Arena*);
template<> ::msg::FriendListReponse* Arena::CreateMaybeMessage<::msg::FriendListReponse>(Arena*);
template<> ::msg::FriendListReponse_Data* Arena::CreateMaybeMessage<::msg::FriendListReponse_Data>(Arena*);
template<> ::msg::FriendReponse* Arena::CreateMaybeMessage<::msg::FriendReponse>(Arena*);
template<> ::msg::HistoryReponse* Arena::CreateMaybeMessage<::msg::HistoryReponse>(Arena*);
template<> ::msg::MessageList* Arena::CreateMaybeMessage<::msg::MessageList>(Arena*);
template<> ::msg::UserReponse* Arena::CreateMaybeMessage<::msg::UserReponse>(Arena*);
template<> ::msg::UserReponse_Data* Arena::CreateMaybeMessage<::msg::UserReponse_Data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

// ===================================================================

class ChatItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChatItem) */ {
 public:
  inline ChatItem() : ChatItem(nullptr) {};
  virtual ~ChatItem();

  ChatItem(const ChatItem& from);
  ChatItem(ChatItem&& from) noexcept
    : ChatItem() {
    *this = ::std::move(from);
  }

  inline ChatItem& operator=(const ChatItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatItem& operator=(ChatItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatItem* internal_default_instance() {
    return reinterpret_cast<const ChatItem*>(
               &_ChatItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChatItem& a, ChatItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatItem* New() const final {
    return CreateMaybeMessage<ChatItem>(nullptr);
  }

  ChatItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatItem& from);
  void MergeFrom(const ChatItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChatItem";
  }
  protected:
  explicit ChatItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kLastMessageFieldNumber = 2,
  };
  // .msg.Channel channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::msg::Channel& channel() const;
  ::msg::Channel* release_channel();
  ::msg::Channel* mutable_channel();
  void set_allocated_channel(::msg::Channel* channel);
  private:
  const ::msg::Channel& _internal_channel() const;
  ::msg::Channel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::msg::Channel* channel);
  ::msg::Channel* unsafe_arena_release_channel();

  // .msg.Message last_message = 2;
  bool has_last_message() const;
  private:
  bool _internal_has_last_message() const;
  public:
  void clear_last_message();
  const ::msg::Message& last_message() const;
  ::msg::Message* release_last_message();
  ::msg::Message* mutable_last_message();
  void set_allocated_last_message(::msg::Message* last_message);
  private:
  const ::msg::Message& _internal_last_message() const;
  ::msg::Message* _internal_mutable_last_message();
  public:
  void unsafe_arena_set_allocated_last_message(
      ::msg::Message* last_message);
  ::msg::Message* unsafe_arena_release_last_message();

  // @@protoc_insertion_point(class_scope:msg.ChatItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::msg::Channel* channel_;
  ::msg::Message* last_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class ChatList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChatList) */ {
 public:
  inline ChatList() : ChatList(nullptr) {};
  virtual ~ChatList();

  ChatList(const ChatList& from);
  ChatList(ChatList&& from) noexcept
    : ChatList() {
    *this = ::std::move(from);
  }

  inline ChatList& operator=(const ChatList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatList& operator=(ChatList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatList* internal_default_instance() {
    return reinterpret_cast<const ChatList*>(
               &_ChatList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChatList& a, ChatList& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatList* New() const final {
    return CreateMaybeMessage<ChatList>(nullptr);
  }

  ChatList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatList& from);
  void MergeFrom(const ChatList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChatList";
  }
  protected:
  explicit ChatList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kMessageFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .msg.ChatItem data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::msg::ChatItem* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChatItem >*
      mutable_data();
  private:
  const ::msg::ChatItem& _internal_data(int index) const;
  ::msg::ChatItem* _internal_add_data();
  public:
  const ::msg::ChatItem& data(int index) const;
  ::msg::ChatItem* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChatItem >&
      data() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChatList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChatItem > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class MessageList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.MessageList) */ {
 public:
  inline MessageList() : MessageList(nullptr) {};
  virtual ~MessageList();

  MessageList(const MessageList& from);
  MessageList(MessageList&& from) noexcept
    : MessageList() {
    *this = ::std::move(from);
  }

  inline MessageList& operator=(const MessageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageList& operator=(MessageList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageList* internal_default_instance() {
    return reinterpret_cast<const MessageList*>(
               &_MessageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageList& a, MessageList& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageList* New() const final {
    return CreateMaybeMessage<MessageList>(nullptr);
  }

  MessageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageList& from);
  void MergeFrom(const MessageList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.MessageList";
  }
  protected:
  explicit MessageList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kMessageFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .msg.Message data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::msg::Message* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message >*
      mutable_data();
  private:
  const ::msg::Message& _internal_data(int index) const;
  ::msg::Message* _internal_add_data();
  public:
  const ::msg::Message& data(int index) const;
  ::msg::Message* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message >&
      data() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.MessageList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class UserReponse_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.UserReponse.Data) */ {
 public:
  inline UserReponse_Data() : UserReponse_Data(nullptr) {};
  virtual ~UserReponse_Data();

  UserReponse_Data(const UserReponse_Data& from);
  UserReponse_Data(UserReponse_Data&& from) noexcept
    : UserReponse_Data() {
    *this = ::std::move(from);
  }

  inline UserReponse_Data& operator=(const UserReponse_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserReponse_Data& operator=(UserReponse_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserReponse_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserReponse_Data* internal_default_instance() {
    return reinterpret_cast<const UserReponse_Data*>(
               &_UserReponse_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserReponse_Data& a, UserReponse_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(UserReponse_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserReponse_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserReponse_Data* New() const final {
    return CreateMaybeMessage<UserReponse_Data>(nullptr);
  }

  UserReponse_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserReponse_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserReponse_Data& from);
  void MergeFrom(const UserReponse_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserReponse_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.UserReponse.Data";
  }
  protected:
  explicit UserReponse_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kFullnameFieldNumber = 4,
    kSessionIdFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_username();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_username(
      std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string fullname = 4;
  void clear_fullname();
  const std::string& fullname() const;
  void set_fullname(const std::string& value);
  void set_fullname(std::string&& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  std::string* mutable_fullname();
  std::string* release_fullname();
  void set_allocated_fullname(std::string* fullname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fullname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fullname(
      std::string* fullname);
  private:
  const std::string& _internal_fullname() const;
  void _internal_set_fullname(const std::string& value);
  std::string* _internal_mutable_fullname();
  public:

  // string session_id = 5;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_session_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_session_id(
      std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.UserReponse.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class UserReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.UserReponse) */ {
 public:
  inline UserReponse() : UserReponse(nullptr) {};
  virtual ~UserReponse();

  UserReponse(const UserReponse& from);
  UserReponse(UserReponse&& from) noexcept
    : UserReponse() {
    *this = ::std::move(from);
  }

  inline UserReponse& operator=(const UserReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserReponse& operator=(UserReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserReponse* internal_default_instance() {
    return reinterpret_cast<const UserReponse*>(
               &_UserReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserReponse& a, UserReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserReponse* New() const final {
    return CreateMaybeMessage<UserReponse>(nullptr);
  }

  UserReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserReponse& from);
  void MergeFrom(const UserReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.UserReponse";
  }
  protected:
  explicit UserReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserReponse_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .msg.UserReponse.Data data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::msg::UserReponse_Data& data() const;
  ::msg::UserReponse_Data* release_data();
  ::msg::UserReponse_Data* mutable_data();
  void set_allocated_data(::msg::UserReponse_Data* data);
  private:
  const ::msg::UserReponse_Data& _internal_data() const;
  ::msg::UserReponse_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::msg::UserReponse_Data* data);
  ::msg::UserReponse_Data* unsafe_arena_release_data();

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.UserReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::msg::UserReponse_Data* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class ChannelReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChannelReponse) */ {
 public:
  inline ChannelReponse() : ChannelReponse(nullptr) {};
  virtual ~ChannelReponse();

  ChannelReponse(const ChannelReponse& from);
  ChannelReponse(ChannelReponse&& from) noexcept
    : ChannelReponse() {
    *this = ::std::move(from);
  }

  inline ChannelReponse& operator=(const ChannelReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelReponse& operator=(ChannelReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelReponse* internal_default_instance() {
    return reinterpret_cast<const ChannelReponse*>(
               &_ChannelReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChannelReponse& a, ChannelReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelReponse* New() const final {
    return CreateMaybeMessage<ChannelReponse>(nullptr);
  }

  ChannelReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelReponse& from);
  void MergeFrom(const ChannelReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChannelReponse";
  }
  protected:
  explicit ChannelReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .msg.Channel data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::msg::Channel& data() const;
  ::msg::Channel* release_data();
  ::msg::Channel* mutable_data();
  void set_allocated_data(::msg::Channel* data);
  private:
  const ::msg::Channel& _internal_data() const;
  ::msg::Channel* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::msg::Channel* data);
  ::msg::Channel* unsafe_arena_release_data();

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChannelReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::msg::Channel* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class AccountReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AccountReponse) */ {
 public:
  inline AccountReponse() : AccountReponse(nullptr) {};
  virtual ~AccountReponse();

  AccountReponse(const AccountReponse& from);
  AccountReponse(AccountReponse&& from) noexcept
    : AccountReponse() {
    *this = ::std::move(from);
  }

  inline AccountReponse& operator=(const AccountReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountReponse& operator=(AccountReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountReponse* internal_default_instance() {
    return reinterpret_cast<const AccountReponse*>(
               &_AccountReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AccountReponse& a, AccountReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountReponse* New() const final {
    return CreateMaybeMessage<AccountReponse>(nullptr);
  }

  AccountReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountReponse& from);
  void MergeFrom(const AccountReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AccountReponse";
  }
  protected:
  explicit AccountReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .msg.Account data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::msg::Account& data() const;
  ::msg::Account* release_data();
  ::msg::Account* mutable_data();
  void set_allocated_data(::msg::Account* data);
  private:
  const ::msg::Account& _internal_data() const;
  ::msg::Account* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::msg::Account* data);
  ::msg::Account* unsafe_arena_release_data();

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AccountReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::msg::Account* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class HistoryReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.HistoryReponse) */ {
 public:
  inline HistoryReponse() : HistoryReponse(nullptr) {};
  virtual ~HistoryReponse();

  HistoryReponse(const HistoryReponse& from);
  HistoryReponse(HistoryReponse&& from) noexcept
    : HistoryReponse() {
    *this = ::std::move(from);
  }

  inline HistoryReponse& operator=(const HistoryReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoryReponse& operator=(HistoryReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoryReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoryReponse* internal_default_instance() {
    return reinterpret_cast<const HistoryReponse*>(
               &_HistoryReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HistoryReponse& a, HistoryReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoryReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoryReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoryReponse* New() const final {
    return CreateMaybeMessage<HistoryReponse>(nullptr);
  }

  HistoryReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoryReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoryReponse& from);
  void MergeFrom(const HistoryReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoryReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.HistoryReponse";
  }
  protected:
  explicit HistoryReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kMessageFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .msg.History data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::msg::History* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::History >*
      mutable_data();
  private:
  const ::msg::History& _internal_data(int index) const;
  ::msg::History* _internal_add_data();
  public:
  const ::msg::History& data(int index) const;
  ::msg::History* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::History >&
      data() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.HistoryReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::History > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class FriendReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.FriendReponse) */ {
 public:
  inline FriendReponse() : FriendReponse(nullptr) {};
  virtual ~FriendReponse();

  FriendReponse(const FriendReponse& from);
  FriendReponse(FriendReponse&& from) noexcept
    : FriendReponse() {
    *this = ::std::move(from);
  }

  inline FriendReponse& operator=(const FriendReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendReponse& operator=(FriendReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendReponse* internal_default_instance() {
    return reinterpret_cast<const FriendReponse*>(
               &_FriendReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FriendReponse& a, FriendReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendReponse* New() const final {
    return CreateMaybeMessage<FriendReponse>(nullptr);
  }

  FriendReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendReponse& from);
  void MergeFrom(const FriendReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.FriendReponse";
  }
  protected:
  explicit FriendReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .msg.Friend data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::msg::Friend& data() const;
  ::msg::Friend* release_data();
  ::msg::Friend* mutable_data();
  void set_allocated_data(::msg::Friend* data);
  private:
  const ::msg::Friend& _internal_data() const;
  ::msg::Friend* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::msg::Friend* data);
  ::msg::Friend* unsafe_arena_release_data();

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.FriendReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::msg::Friend* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class FriendListReponse_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.FriendListReponse.Data) */ {
 public:
  inline FriendListReponse_Data() : FriendListReponse_Data(nullptr) {};
  virtual ~FriendListReponse_Data();

  FriendListReponse_Data(const FriendListReponse_Data& from);
  FriendListReponse_Data(FriendListReponse_Data&& from) noexcept
    : FriendListReponse_Data() {
    *this = ::std::move(from);
  }

  inline FriendListReponse_Data& operator=(const FriendListReponse_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListReponse_Data& operator=(FriendListReponse_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendListReponse_Data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListReponse_Data* internal_default_instance() {
    return reinterpret_cast<const FriendListReponse_Data*>(
               &_FriendListReponse_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FriendListReponse_Data& a, FriendListReponse_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListReponse_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListReponse_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendListReponse_Data* New() const final {
    return CreateMaybeMessage<FriendListReponse_Data>(nullptr);
  }

  FriendListReponse_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendListReponse_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendListReponse_Data& from);
  void MergeFrom(const FriendListReponse_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListReponse_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.FriendListReponse.Data";
  }
  protected:
  explicit FriendListReponse_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
    kSentRequestsFieldNumber = 2,
    kReceivedRequestFieldNumber = 3,
  };
  // repeated .msg.Friend friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::msg::Friend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
      mutable_friends();
  private:
  const ::msg::Friend& _internal_friends(int index) const;
  ::msg::Friend* _internal_add_friends();
  public:
  const ::msg::Friend& friends(int index) const;
  ::msg::Friend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
      friends() const;

  // repeated .msg.Friend sent_requests = 2;
  int sent_requests_size() const;
  private:
  int _internal_sent_requests_size() const;
  public:
  void clear_sent_requests();
  ::msg::Friend* mutable_sent_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
      mutable_sent_requests();
  private:
  const ::msg::Friend& _internal_sent_requests(int index) const;
  ::msg::Friend* _internal_add_sent_requests();
  public:
  const ::msg::Friend& sent_requests(int index) const;
  ::msg::Friend* add_sent_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
      sent_requests() const;

  // repeated .msg.Friend received_request = 3;
  int received_request_size() const;
  private:
  int _internal_received_request_size() const;
  public:
  void clear_received_request();
  ::msg::Friend* mutable_received_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
      mutable_received_request();
  private:
  const ::msg::Friend& _internal_received_request(int index) const;
  ::msg::Friend* _internal_add_received_request();
  public:
  const ::msg::Friend& received_request(int index) const;
  ::msg::Friend* add_received_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
      received_request() const;

  // @@protoc_insertion_point(class_scope:msg.FriendListReponse.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend > friends_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend > sent_requests_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend > received_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// -------------------------------------------------------------------

class FriendListReponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.FriendListReponse) */ {
 public:
  inline FriendListReponse() : FriendListReponse(nullptr) {};
  virtual ~FriendListReponse();

  FriendListReponse(const FriendListReponse& from);
  FriendListReponse(FriendListReponse&& from) noexcept
    : FriendListReponse() {
    *this = ::std::move(from);
  }

  inline FriendListReponse& operator=(const FriendListReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListReponse& operator=(FriendListReponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendListReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendListReponse* internal_default_instance() {
    return reinterpret_cast<const FriendListReponse*>(
               &_FriendListReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FriendListReponse& a, FriendListReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListReponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendListReponse* New() const final {
    return CreateMaybeMessage<FriendListReponse>(nullptr);
  }

  FriendListReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendListReponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendListReponse& from);
  void MergeFrom(const FriendListReponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListReponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.FriendListReponse";
  }
  protected:
  explicit FriendListReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_payload_2eproto);
    return ::descriptor_table_payload_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FriendListReponse_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kDataFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .msg.FriendListReponse.Data data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::msg::FriendListReponse_Data& data() const;
  ::msg::FriendListReponse_Data* release_data();
  ::msg::FriendListReponse_Data* mutable_data();
  void set_allocated_data(::msg::FriendListReponse_Data* data);
  private:
  const ::msg::FriendListReponse_Data& _internal_data() const;
  ::msg::FriendListReponse_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::msg::FriendListReponse_Data* data);
  ::msg::FriendListReponse_Data* unsafe_arena_release_data();

  // int32 error = 1;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::int32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg.FriendListReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::msg::FriendListReponse_Data* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_payload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatItem

// .msg.Channel channel = 1;
inline bool ChatItem::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool ChatItem::has_channel() const {
  return _internal_has_channel();
}
inline const ::msg::Channel& ChatItem::_internal_channel() const {
  const ::msg::Channel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Channel*>(
      &::msg::_Channel_default_instance_);
}
inline const ::msg::Channel& ChatItem::channel() const {
  // @@protoc_insertion_point(field_get:msg.ChatItem.channel)
  return _internal_channel();
}
inline void ChatItem::unsafe_arena_set_allocated_channel(
    ::msg::Channel* channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  channel_ = channel;
  if (channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ChatItem.channel)
}
inline ::msg::Channel* ChatItem::release_channel() {
  auto temp = unsafe_arena_release_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Channel* ChatItem::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:msg.ChatItem.channel)
  
  ::msg::Channel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::msg::Channel* ChatItem::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Channel>(GetArena());
    channel_ = p;
  }
  return channel_;
}
inline ::msg::Channel* ChatItem::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:msg.ChatItem.channel)
  return _internal_mutable_channel();
}
inline void ChatItem::set_allocated_channel(::msg::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel)->GetArena();
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:msg.ChatItem.channel)
}

// .msg.Message last_message = 2;
inline bool ChatItem::_internal_has_last_message() const {
  return this != internal_default_instance() && last_message_ != nullptr;
}
inline bool ChatItem::has_last_message() const {
  return _internal_has_last_message();
}
inline const ::msg::Message& ChatItem::_internal_last_message() const {
  const ::msg::Message* p = last_message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Message*>(
      &::msg::_Message_default_instance_);
}
inline const ::msg::Message& ChatItem::last_message() const {
  // @@protoc_insertion_point(field_get:msg.ChatItem.last_message)
  return _internal_last_message();
}
inline void ChatItem::unsafe_arena_set_allocated_last_message(
    ::msg::Message* last_message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_message_);
  }
  last_message_ = last_message;
  if (last_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ChatItem.last_message)
}
inline ::msg::Message* ChatItem::release_last_message() {
  auto temp = unsafe_arena_release_last_message();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Message* ChatItem::unsafe_arena_release_last_message() {
  // @@protoc_insertion_point(field_release:msg.ChatItem.last_message)
  
  ::msg::Message* temp = last_message_;
  last_message_ = nullptr;
  return temp;
}
inline ::msg::Message* ChatItem::_internal_mutable_last_message() {
  
  if (last_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Message>(GetArena());
    last_message_ = p;
  }
  return last_message_;
}
inline ::msg::Message* ChatItem::mutable_last_message() {
  // @@protoc_insertion_point(field_mutable:msg.ChatItem.last_message)
  return _internal_mutable_last_message();
}
inline void ChatItem::set_allocated_last_message(::msg::Message* last_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_message_);
  }
  if (last_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_message)->GetArena();
    if (message_arena != submessage_arena) {
      last_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_message, submessage_arena);
    }
    
  } else {
    
  }
  last_message_ = last_message;
  // @@protoc_insertion_point(field_set_allocated:msg.ChatItem.last_message)
}

// -------------------------------------------------------------------

// ChatList

// int32 error = 1;
inline void ChatList::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatList::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatList::error() const {
  // @@protoc_insertion_point(field_get:msg.ChatList.error)
  return _internal_error();
}
inline void ChatList::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void ChatList::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:msg.ChatList.error)
}

// string message = 2;
inline void ChatList::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChatList::message() const {
  // @@protoc_insertion_point(field_get:msg.ChatList.message)
  return _internal_message();
}
inline void ChatList::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:msg.ChatList.message)
}
inline std::string* ChatList::mutable_message() {
  // @@protoc_insertion_point(field_mutable:msg.ChatList.message)
  return _internal_mutable_message();
}
inline const std::string& ChatList::_internal_message() const {
  return message_.Get();
}
inline void ChatList::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChatList::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ChatList.message)
}
inline void ChatList::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ChatList.message)
}
inline void ChatList::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ChatList.message)
}
inline std::string* ChatList::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChatList::release_message() {
  // @@protoc_insertion_point(field_release:msg.ChatList.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChatList::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ChatList.message)
}
inline std::string* ChatList::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ChatList.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChatList::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ChatList.message)
}

// repeated .msg.ChatItem data = 3;
inline int ChatList::_internal_data_size() const {
  return data_.size();
}
inline int ChatList::data_size() const {
  return _internal_data_size();
}
inline void ChatList::clear_data() {
  data_.Clear();
}
inline ::msg::ChatItem* ChatList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ChatList.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChatItem >*
ChatList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:msg.ChatList.data)
  return &data_;
}
inline const ::msg::ChatItem& ChatList::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::msg::ChatItem& ChatList::data(int index) const {
  // @@protoc_insertion_point(field_get:msg.ChatList.data)
  return _internal_data(index);
}
inline ::msg::ChatItem* ChatList::_internal_add_data() {
  return data_.Add();
}
inline ::msg::ChatItem* ChatList::add_data() {
  // @@protoc_insertion_point(field_add:msg.ChatList.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChatItem >&
ChatList::data() const {
  // @@protoc_insertion_point(field_list:msg.ChatList.data)
  return data_;
}

// -------------------------------------------------------------------

// MessageList

// int32 error = 1;
inline void MessageList::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageList::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageList::error() const {
  // @@protoc_insertion_point(field_get:msg.MessageList.error)
  return _internal_error();
}
inline void MessageList::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void MessageList::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:msg.MessageList.error)
}

// string message = 2;
inline void MessageList::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MessageList::message() const {
  // @@protoc_insertion_point(field_get:msg.MessageList.message)
  return _internal_message();
}
inline void MessageList::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:msg.MessageList.message)
}
inline std::string* MessageList::mutable_message() {
  // @@protoc_insertion_point(field_mutable:msg.MessageList.message)
  return _internal_mutable_message();
}
inline const std::string& MessageList::_internal_message() const {
  return message_.Get();
}
inline void MessageList::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MessageList::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.MessageList.message)
}
inline void MessageList::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.MessageList.message)
}
inline void MessageList::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.MessageList.message)
}
inline std::string* MessageList::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MessageList::release_message() {
  // @@protoc_insertion_point(field_release:msg.MessageList.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageList::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.MessageList.message)
}
inline std::string* MessageList::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.MessageList.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MessageList::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.MessageList.message)
}

// repeated .msg.Message data = 3;
inline int MessageList::_internal_data_size() const {
  return data_.size();
}
inline int MessageList::data_size() const {
  return _internal_data_size();
}
inline ::msg::Message* MessageList::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:msg.MessageList.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message >*
MessageList::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:msg.MessageList.data)
  return &data_;
}
inline const ::msg::Message& MessageList::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::msg::Message& MessageList::data(int index) const {
  // @@protoc_insertion_point(field_get:msg.MessageList.data)
  return _internal_data(index);
}
inline ::msg::Message* MessageList::_internal_add_data() {
  return data_.Add();
}
inline ::msg::Message* MessageList::add_data() {
  // @@protoc_insertion_point(field_add:msg.MessageList.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Message >&
MessageList::data() const {
  // @@protoc_insertion_point(field_list:msg.MessageList.data)
  return data_;
}

// -------------------------------------------------------------------

// UserReponse_Data

// uint64 id = 1;
inline void UserReponse_Data::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserReponse_Data::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserReponse_Data::id() const {
  // @@protoc_insertion_point(field_get:msg.UserReponse.Data.id)
  return _internal_id();
}
inline void UserReponse_Data::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void UserReponse_Data::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.UserReponse.Data.id)
}

// string username = 2;
inline void UserReponse_Data::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserReponse_Data::username() const {
  // @@protoc_insertion_point(field_get:msg.UserReponse.Data.username)
  return _internal_username();
}
inline void UserReponse_Data::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:msg.UserReponse.Data.username)
}
inline std::string* UserReponse_Data::mutable_username() {
  // @@protoc_insertion_point(field_mutable:msg.UserReponse.Data.username)
  return _internal_mutable_username();
}
inline const std::string& UserReponse_Data::_internal_username() const {
  return username_.Get();
}
inline void UserReponse_Data::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserReponse_Data::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.UserReponse.Data.username)
}
inline void UserReponse_Data::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.UserReponse.Data.username)
}
inline void UserReponse_Data::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.UserReponse.Data.username)
}
inline std::string* UserReponse_Data::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserReponse_Data::release_username() {
  // @@protoc_insertion_point(field_release:msg.UserReponse.Data.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserReponse_Data::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.UserReponse.Data.username)
}
inline std::string* UserReponse_Data::unsafe_arena_release_username() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.UserReponse.Data.username)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserReponse_Data::unsafe_arena_set_allocated_username(
    std::string* username) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (username != nullptr) {
    
  } else {
    
  }
  username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      username, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UserReponse.Data.username)
}

// string email = 3;
inline void UserReponse_Data::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserReponse_Data::email() const {
  // @@protoc_insertion_point(field_get:msg.UserReponse.Data.email)
  return _internal_email();
}
inline void UserReponse_Data::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:msg.UserReponse.Data.email)
}
inline std::string* UserReponse_Data::mutable_email() {
  // @@protoc_insertion_point(field_mutable:msg.UserReponse.Data.email)
  return _internal_mutable_email();
}
inline const std::string& UserReponse_Data::_internal_email() const {
  return email_.Get();
}
inline void UserReponse_Data::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserReponse_Data::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.UserReponse.Data.email)
}
inline void UserReponse_Data::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.UserReponse.Data.email)
}
inline void UserReponse_Data::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.UserReponse.Data.email)
}
inline std::string* UserReponse_Data::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserReponse_Data::release_email() {
  // @@protoc_insertion_point(field_release:msg.UserReponse.Data.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserReponse_Data::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.UserReponse.Data.email)
}
inline std::string* UserReponse_Data::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.UserReponse.Data.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserReponse_Data::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UserReponse.Data.email)
}

// string fullname = 4;
inline void UserReponse_Data::clear_fullname() {
  fullname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserReponse_Data::fullname() const {
  // @@protoc_insertion_point(field_get:msg.UserReponse.Data.fullname)
  return _internal_fullname();
}
inline void UserReponse_Data::set_fullname(const std::string& value) {
  _internal_set_fullname(value);
  // @@protoc_insertion_point(field_set:msg.UserReponse.Data.fullname)
}
inline std::string* UserReponse_Data::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable:msg.UserReponse.Data.fullname)
  return _internal_mutable_fullname();
}
inline const std::string& UserReponse_Data::_internal_fullname() const {
  return fullname_.Get();
}
inline void UserReponse_Data::_internal_set_fullname(const std::string& value) {
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserReponse_Data::set_fullname(std::string&& value) {
  
  fullname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.UserReponse.Data.fullname)
}
inline void UserReponse_Data::set_fullname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.UserReponse.Data.fullname)
}
inline void UserReponse_Data::set_fullname(const char* value,
    size_t size) {
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.UserReponse.Data.fullname)
}
inline std::string* UserReponse_Data::_internal_mutable_fullname() {
  
  return fullname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserReponse_Data::release_fullname() {
  // @@protoc_insertion_point(field_release:msg.UserReponse.Data.fullname)
  return fullname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserReponse_Data::set_allocated_fullname(std::string* fullname) {
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.UserReponse.Data.fullname)
}
inline std::string* UserReponse_Data::unsafe_arena_release_fullname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.UserReponse.Data.fullname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fullname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserReponse_Data::unsafe_arena_set_allocated_fullname(
    std::string* fullname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fullname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UserReponse.Data.fullname)
}

// string session_id = 5;
inline void UserReponse_Data::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserReponse_Data::session_id() const {
  // @@protoc_insertion_point(field_get:msg.UserReponse.Data.session_id)
  return _internal_session_id();
}
inline void UserReponse_Data::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:msg.UserReponse.Data.session_id)
}
inline std::string* UserReponse_Data::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:msg.UserReponse.Data.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& UserReponse_Data::_internal_session_id() const {
  return session_id_.Get();
}
inline void UserReponse_Data::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserReponse_Data::set_session_id(std::string&& value) {
  
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.UserReponse.Data.session_id)
}
inline void UserReponse_Data::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.UserReponse.Data.session_id)
}
inline void UserReponse_Data::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.UserReponse.Data.session_id)
}
inline std::string* UserReponse_Data::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserReponse_Data::release_session_id() {
  // @@protoc_insertion_point(field_release:msg.UserReponse.Data.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserReponse_Data::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.UserReponse.Data.session_id)
}
inline std::string* UserReponse_Data::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.UserReponse.Data.session_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return session_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserReponse_Data::unsafe_arena_set_allocated_session_id(
    std::string* session_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      session_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UserReponse.Data.session_id)
}

// -------------------------------------------------------------------

// UserReponse

// int32 error = 1;
inline void UserReponse::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserReponse::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserReponse::error() const {
  // @@protoc_insertion_point(field_get:msg.UserReponse.error)
  return _internal_error();
}
inline void UserReponse::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void UserReponse::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:msg.UserReponse.error)
}

// string message = 2;
inline void UserReponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserReponse::message() const {
  // @@protoc_insertion_point(field_get:msg.UserReponse.message)
  return _internal_message();
}
inline void UserReponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:msg.UserReponse.message)
}
inline std::string* UserReponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:msg.UserReponse.message)
  return _internal_mutable_message();
}
inline const std::string& UserReponse::_internal_message() const {
  return message_.Get();
}
inline void UserReponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserReponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.UserReponse.message)
}
inline void UserReponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.UserReponse.message)
}
inline void UserReponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.UserReponse.message)
}
inline std::string* UserReponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserReponse::release_message() {
  // @@protoc_insertion_point(field_release:msg.UserReponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserReponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.UserReponse.message)
}
inline std::string* UserReponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.UserReponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserReponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UserReponse.message)
}

// .msg.UserReponse.Data data = 3;
inline bool UserReponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool UserReponse::has_data() const {
  return _internal_has_data();
}
inline void UserReponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::msg::UserReponse_Data& UserReponse::_internal_data() const {
  const ::msg::UserReponse_Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::UserReponse_Data*>(
      &::msg::_UserReponse_Data_default_instance_);
}
inline const ::msg::UserReponse_Data& UserReponse::data() const {
  // @@protoc_insertion_point(field_get:msg.UserReponse.data)
  return _internal_data();
}
inline void UserReponse::unsafe_arena_set_allocated_data(
    ::msg::UserReponse_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.UserReponse.data)
}
inline ::msg::UserReponse_Data* UserReponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::UserReponse_Data* UserReponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:msg.UserReponse.data)
  
  ::msg::UserReponse_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::msg::UserReponse_Data* UserReponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::UserReponse_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::msg::UserReponse_Data* UserReponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:msg.UserReponse.data)
  return _internal_mutable_data();
}
inline void UserReponse::set_allocated_data(::msg::UserReponse_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:msg.UserReponse.data)
}

// -------------------------------------------------------------------

// ChannelReponse

// int32 error = 1;
inline void ChannelReponse::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelReponse::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChannelReponse::error() const {
  // @@protoc_insertion_point(field_get:msg.ChannelReponse.error)
  return _internal_error();
}
inline void ChannelReponse::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void ChannelReponse::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:msg.ChannelReponse.error)
}

// string message = 2;
inline void ChannelReponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChannelReponse::message() const {
  // @@protoc_insertion_point(field_get:msg.ChannelReponse.message)
  return _internal_message();
}
inline void ChannelReponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:msg.ChannelReponse.message)
}
inline std::string* ChannelReponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:msg.ChannelReponse.message)
  return _internal_mutable_message();
}
inline const std::string& ChannelReponse::_internal_message() const {
  return message_.Get();
}
inline void ChannelReponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChannelReponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.ChannelReponse.message)
}
inline void ChannelReponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.ChannelReponse.message)
}
inline void ChannelReponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.ChannelReponse.message)
}
inline std::string* ChannelReponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChannelReponse::release_message() {
  // @@protoc_insertion_point(field_release:msg.ChannelReponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChannelReponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.ChannelReponse.message)
}
inline std::string* ChannelReponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.ChannelReponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ChannelReponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ChannelReponse.message)
}

// .msg.Channel data = 3;
inline bool ChannelReponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ChannelReponse::has_data() const {
  return _internal_has_data();
}
inline const ::msg::Channel& ChannelReponse::_internal_data() const {
  const ::msg::Channel* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Channel*>(
      &::msg::_Channel_default_instance_);
}
inline const ::msg::Channel& ChannelReponse::data() const {
  // @@protoc_insertion_point(field_get:msg.ChannelReponse.data)
  return _internal_data();
}
inline void ChannelReponse::unsafe_arena_set_allocated_data(
    ::msg::Channel* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ChannelReponse.data)
}
inline ::msg::Channel* ChannelReponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Channel* ChannelReponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:msg.ChannelReponse.data)
  
  ::msg::Channel* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::msg::Channel* ChannelReponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Channel>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::msg::Channel* ChannelReponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:msg.ChannelReponse.data)
  return _internal_mutable_data();
}
inline void ChannelReponse::set_allocated_data(::msg::Channel* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:msg.ChannelReponse.data)
}

// -------------------------------------------------------------------

// AccountReponse

// int32 error = 1;
inline void AccountReponse::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountReponse::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountReponse::error() const {
  // @@protoc_insertion_point(field_get:msg.AccountReponse.error)
  return _internal_error();
}
inline void AccountReponse::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void AccountReponse::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:msg.AccountReponse.error)
}

// string message = 2;
inline void AccountReponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountReponse::message() const {
  // @@protoc_insertion_point(field_get:msg.AccountReponse.message)
  return _internal_message();
}
inline void AccountReponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:msg.AccountReponse.message)
}
inline std::string* AccountReponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:msg.AccountReponse.message)
  return _internal_mutable_message();
}
inline const std::string& AccountReponse::_internal_message() const {
  return message_.Get();
}
inline void AccountReponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountReponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.AccountReponse.message)
}
inline void AccountReponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.AccountReponse.message)
}
inline void AccountReponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.AccountReponse.message)
}
inline std::string* AccountReponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountReponse::release_message() {
  // @@protoc_insertion_point(field_release:msg.AccountReponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountReponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.AccountReponse.message)
}
inline std::string* AccountReponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.AccountReponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountReponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.AccountReponse.message)
}

// .msg.Account data = 3;
inline bool AccountReponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool AccountReponse::has_data() const {
  return _internal_has_data();
}
inline const ::msg::Account& AccountReponse::_internal_data() const {
  const ::msg::Account* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Account*>(
      &::msg::_Account_default_instance_);
}
inline const ::msg::Account& AccountReponse::data() const {
  // @@protoc_insertion_point(field_get:msg.AccountReponse.data)
  return _internal_data();
}
inline void AccountReponse::unsafe_arena_set_allocated_data(
    ::msg::Account* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.AccountReponse.data)
}
inline ::msg::Account* AccountReponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Account* AccountReponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:msg.AccountReponse.data)
  
  ::msg::Account* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::msg::Account* AccountReponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Account>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::msg::Account* AccountReponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:msg.AccountReponse.data)
  return _internal_mutable_data();
}
inline void AccountReponse::set_allocated_data(::msg::Account* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:msg.AccountReponse.data)
}

// -------------------------------------------------------------------

// HistoryReponse

// int32 error = 1;
inline void HistoryReponse::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryReponse::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HistoryReponse::error() const {
  // @@protoc_insertion_point(field_get:msg.HistoryReponse.error)
  return _internal_error();
}
inline void HistoryReponse::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void HistoryReponse::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:msg.HistoryReponse.error)
}

// string message = 2;
inline void HistoryReponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HistoryReponse::message() const {
  // @@protoc_insertion_point(field_get:msg.HistoryReponse.message)
  return _internal_message();
}
inline void HistoryReponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:msg.HistoryReponse.message)
}
inline std::string* HistoryReponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:msg.HistoryReponse.message)
  return _internal_mutable_message();
}
inline const std::string& HistoryReponse::_internal_message() const {
  return message_.Get();
}
inline void HistoryReponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HistoryReponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.HistoryReponse.message)
}
inline void HistoryReponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.HistoryReponse.message)
}
inline void HistoryReponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.HistoryReponse.message)
}
inline std::string* HistoryReponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HistoryReponse::release_message() {
  // @@protoc_insertion_point(field_release:msg.HistoryReponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HistoryReponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.HistoryReponse.message)
}
inline std::string* HistoryReponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.HistoryReponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HistoryReponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.HistoryReponse.message)
}

// repeated .msg.History data = 3;
inline int HistoryReponse::_internal_data_size() const {
  return data_.size();
}
inline int HistoryReponse::data_size() const {
  return _internal_data_size();
}
inline ::msg::History* HistoryReponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:msg.HistoryReponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::History >*
HistoryReponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:msg.HistoryReponse.data)
  return &data_;
}
inline const ::msg::History& HistoryReponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::msg::History& HistoryReponse::data(int index) const {
  // @@protoc_insertion_point(field_get:msg.HistoryReponse.data)
  return _internal_data(index);
}
inline ::msg::History* HistoryReponse::_internal_add_data() {
  return data_.Add();
}
inline ::msg::History* HistoryReponse::add_data() {
  // @@protoc_insertion_point(field_add:msg.HistoryReponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::History >&
HistoryReponse::data() const {
  // @@protoc_insertion_point(field_list:msg.HistoryReponse.data)
  return data_;
}

// -------------------------------------------------------------------

// FriendReponse

// int32 error = 1;
inline void FriendReponse::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendReponse::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendReponse::error() const {
  // @@protoc_insertion_point(field_get:msg.FriendReponse.error)
  return _internal_error();
}
inline void FriendReponse::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void FriendReponse::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:msg.FriendReponse.error)
}

// string message = 2;
inline void FriendReponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendReponse::message() const {
  // @@protoc_insertion_point(field_get:msg.FriendReponse.message)
  return _internal_message();
}
inline void FriendReponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:msg.FriendReponse.message)
}
inline std::string* FriendReponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:msg.FriendReponse.message)
  return _internal_mutable_message();
}
inline const std::string& FriendReponse::_internal_message() const {
  return message_.Get();
}
inline void FriendReponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendReponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.FriendReponse.message)
}
inline void FriendReponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.FriendReponse.message)
}
inline void FriendReponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.FriendReponse.message)
}
inline std::string* FriendReponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendReponse::release_message() {
  // @@protoc_insertion_point(field_release:msg.FriendReponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendReponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.FriendReponse.message)
}
inline std::string* FriendReponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.FriendReponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendReponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.FriendReponse.message)
}

// .msg.Friend data = 3;
inline bool FriendReponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool FriendReponse::has_data() const {
  return _internal_has_data();
}
inline const ::msg::Friend& FriendReponse::_internal_data() const {
  const ::msg::Friend* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::Friend*>(
      &::msg::_Friend_default_instance_);
}
inline const ::msg::Friend& FriendReponse::data() const {
  // @@protoc_insertion_point(field_get:msg.FriendReponse.data)
  return _internal_data();
}
inline void FriendReponse::unsafe_arena_set_allocated_data(
    ::msg::Friend* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.FriendReponse.data)
}
inline ::msg::Friend* FriendReponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::Friend* FriendReponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:msg.FriendReponse.data)
  
  ::msg::Friend* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::msg::Friend* FriendReponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Friend>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::msg::Friend* FriendReponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:msg.FriendReponse.data)
  return _internal_mutable_data();
}
inline void FriendReponse::set_allocated_data(::msg::Friend* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:msg.FriendReponse.data)
}

// -------------------------------------------------------------------

// FriendListReponse_Data

// repeated .msg.Friend friends = 1;
inline int FriendListReponse_Data::_internal_friends_size() const {
  return friends_.size();
}
inline int FriendListReponse_Data::friends_size() const {
  return _internal_friends_size();
}
inline ::msg::Friend* FriendListReponse_Data::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:msg.FriendListReponse.Data.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
FriendListReponse_Data::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:msg.FriendListReponse.Data.friends)
  return &friends_;
}
inline const ::msg::Friend& FriendListReponse_Data::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::msg::Friend& FriendListReponse_Data::friends(int index) const {
  // @@protoc_insertion_point(field_get:msg.FriendListReponse.Data.friends)
  return _internal_friends(index);
}
inline ::msg::Friend* FriendListReponse_Data::_internal_add_friends() {
  return friends_.Add();
}
inline ::msg::Friend* FriendListReponse_Data::add_friends() {
  // @@protoc_insertion_point(field_add:msg.FriendListReponse.Data.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
FriendListReponse_Data::friends() const {
  // @@protoc_insertion_point(field_list:msg.FriendListReponse.Data.friends)
  return friends_;
}

// repeated .msg.Friend sent_requests = 2;
inline int FriendListReponse_Data::_internal_sent_requests_size() const {
  return sent_requests_.size();
}
inline int FriendListReponse_Data::sent_requests_size() const {
  return _internal_sent_requests_size();
}
inline ::msg::Friend* FriendListReponse_Data::mutable_sent_requests(int index) {
  // @@protoc_insertion_point(field_mutable:msg.FriendListReponse.Data.sent_requests)
  return sent_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
FriendListReponse_Data::mutable_sent_requests() {
  // @@protoc_insertion_point(field_mutable_list:msg.FriendListReponse.Data.sent_requests)
  return &sent_requests_;
}
inline const ::msg::Friend& FriendListReponse_Data::_internal_sent_requests(int index) const {
  return sent_requests_.Get(index);
}
inline const ::msg::Friend& FriendListReponse_Data::sent_requests(int index) const {
  // @@protoc_insertion_point(field_get:msg.FriendListReponse.Data.sent_requests)
  return _internal_sent_requests(index);
}
inline ::msg::Friend* FriendListReponse_Data::_internal_add_sent_requests() {
  return sent_requests_.Add();
}
inline ::msg::Friend* FriendListReponse_Data::add_sent_requests() {
  // @@protoc_insertion_point(field_add:msg.FriendListReponse.Data.sent_requests)
  return _internal_add_sent_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
FriendListReponse_Data::sent_requests() const {
  // @@protoc_insertion_point(field_list:msg.FriendListReponse.Data.sent_requests)
  return sent_requests_;
}

// repeated .msg.Friend received_request = 3;
inline int FriendListReponse_Data::_internal_received_request_size() const {
  return received_request_.size();
}
inline int FriendListReponse_Data::received_request_size() const {
  return _internal_received_request_size();
}
inline ::msg::Friend* FriendListReponse_Data::mutable_received_request(int index) {
  // @@protoc_insertion_point(field_mutable:msg.FriendListReponse.Data.received_request)
  return received_request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >*
FriendListReponse_Data::mutable_received_request() {
  // @@protoc_insertion_point(field_mutable_list:msg.FriendListReponse.Data.received_request)
  return &received_request_;
}
inline const ::msg::Friend& FriendListReponse_Data::_internal_received_request(int index) const {
  return received_request_.Get(index);
}
inline const ::msg::Friend& FriendListReponse_Data::received_request(int index) const {
  // @@protoc_insertion_point(field_get:msg.FriendListReponse.Data.received_request)
  return _internal_received_request(index);
}
inline ::msg::Friend* FriendListReponse_Data::_internal_add_received_request() {
  return received_request_.Add();
}
inline ::msg::Friend* FriendListReponse_Data::add_received_request() {
  // @@protoc_insertion_point(field_add:msg.FriendListReponse.Data.received_request)
  return _internal_add_received_request();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Friend >&
FriendListReponse_Data::received_request() const {
  // @@protoc_insertion_point(field_list:msg.FriendListReponse.Data.received_request)
  return received_request_;
}

// -------------------------------------------------------------------

// FriendListReponse

// int32 error = 1;
inline void FriendListReponse::clear_error() {
  error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendListReponse::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendListReponse::error() const {
  // @@protoc_insertion_point(field_get:msg.FriendListReponse.error)
  return _internal_error();
}
inline void FriendListReponse::_internal_set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  error_ = value;
}
inline void FriendListReponse::set_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:msg.FriendListReponse.error)
}

// string message = 2;
inline void FriendListReponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FriendListReponse::message() const {
  // @@protoc_insertion_point(field_get:msg.FriendListReponse.message)
  return _internal_message();
}
inline void FriendListReponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:msg.FriendListReponse.message)
}
inline std::string* FriendListReponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:msg.FriendListReponse.message)
  return _internal_mutable_message();
}
inline const std::string& FriendListReponse::_internal_message() const {
  return message_.Get();
}
inline void FriendListReponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FriendListReponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg.FriendListReponse.message)
}
inline void FriendListReponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:msg.FriendListReponse.message)
}
inline void FriendListReponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg.FriendListReponse.message)
}
inline std::string* FriendListReponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FriendListReponse::release_message() {
  // @@protoc_insertion_point(field_release:msg.FriendListReponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FriendListReponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg.FriendListReponse.message)
}
inline std::string* FriendListReponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:msg.FriendListReponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FriendListReponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.FriendListReponse.message)
}

// .msg.FriendListReponse.Data data = 3;
inline bool FriendListReponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool FriendListReponse::has_data() const {
  return _internal_has_data();
}
inline void FriendListReponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::msg::FriendListReponse_Data& FriendListReponse::_internal_data() const {
  const ::msg::FriendListReponse_Data* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::msg::FriendListReponse_Data*>(
      &::msg::_FriendListReponse_Data_default_instance_);
}
inline const ::msg::FriendListReponse_Data& FriendListReponse::data() const {
  // @@protoc_insertion_point(field_get:msg.FriendListReponse.data)
  return _internal_data();
}
inline void FriendListReponse::unsafe_arena_set_allocated_data(
    ::msg::FriendListReponse_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.FriendListReponse.data)
}
inline ::msg::FriendListReponse_Data* FriendListReponse::release_data() {
  auto temp = unsafe_arena_release_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg::FriendListReponse_Data* FriendListReponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:msg.FriendListReponse.data)
  
  ::msg::FriendListReponse_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::msg::FriendListReponse_Data* FriendListReponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::FriendListReponse_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::msg::FriendListReponse_Data* FriendListReponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:msg.FriendListReponse.data)
  return _internal_mutable_data();
}
inline void FriendListReponse::set_allocated_data(::msg::FriendListReponse_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:msg.FriendListReponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payload_2eproto
