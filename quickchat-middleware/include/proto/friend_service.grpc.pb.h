// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: friend_service.proto
#ifndef GRPC_friend_5fservice_2eproto__INCLUDED
#define GRPC_friend_5fservice_2eproto__INCLUDED

#include "friend_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace srv {

class FriendService final {
 public:
  static constexpr char const* service_full_name() {
    return "srv.FriendService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::srv::ListUserFriendsReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserFriendsReponse>> AsyncListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserFriendsReponse>>(AsyncListUserFriendsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserFriendsReponse>> PrepareAsyncListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserFriendsReponse>>(PrepareAsyncListUserFriendsRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::srv::BaseReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>> AsyncCreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>>(AsyncCreateFriendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>> PrepareAsyncCreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>>(PrepareAsyncCreateFriendRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::srv::BaseReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>> AsyncDeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>>(AsyncDeleteFriendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>> PrepareAsyncDeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>>(PrepareAsyncDeleteFriendRaw(context, request, cq));
    }
    virtual ::grpc::Status ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::srv::BaseReponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>> AsyncChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>>(AsyncChangeFriendStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>> PrepareAsyncChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>>(PrepareAsyncChangeFriendStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListUserFriends(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserFriendsReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListUserFriends(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserFriendsReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListUserFriends(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserFriendsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeFriendStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ChangeFriendStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ChangeFriendStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserFriendsReponse>* AsyncListUserFriendsRaw(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::ListUserFriendsReponse>* PrepareAsyncListUserFriendsRaw(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>* AsyncCreateFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>* PrepareAsyncCreateFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>* AsyncDeleteFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>* PrepareAsyncDeleteFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>* AsyncChangeFriendStatusRaw(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srv::BaseReponse>* PrepareAsyncChangeFriendStatusRaw(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::srv::ListUserFriendsReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::ListUserFriendsReponse>> AsyncListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::ListUserFriendsReponse>>(AsyncListUserFriendsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::ListUserFriendsReponse>> PrepareAsyncListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::ListUserFriendsReponse>>(PrepareAsyncListUserFriendsRaw(context, request, cq));
    }
    ::grpc::Status CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::srv::BaseReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>> AsyncCreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>>(AsyncCreateFriendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>> PrepareAsyncCreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>>(PrepareAsyncCreateFriendRaw(context, request, cq));
    }
    ::grpc::Status DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::srv::BaseReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>> AsyncDeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>>(AsyncDeleteFriendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>> PrepareAsyncDeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>>(PrepareAsyncDeleteFriendRaw(context, request, cq));
    }
    ::grpc::Status ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::srv::BaseReponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>> AsyncChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>>(AsyncChangeFriendStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>> PrepareAsyncChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>>(PrepareAsyncChangeFriendStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response, std::function<void(::grpc::Status)>) override;
      void ListUserFriends(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserFriendsReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListUserFriends(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListUserFriends(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserFriendsReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListUserFriends(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::ListUserFriendsReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) override;
      void CreateFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteFriend(::grpc::ClientContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteFriend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) override;
      void ChangeFriendStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ChangeFriendStatus(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ChangeFriendStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ChangeFriendStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::BaseReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::srv::ListUserFriendsReponse>* AsyncListUserFriendsRaw(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::ListUserFriendsReponse>* PrepareAsyncListUserFriendsRaw(::grpc::ClientContext* context, const ::srv::ListUserFriendsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* AsyncCreateFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* PrepareAsyncCreateFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* AsyncDeleteFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* PrepareAsyncDeleteFriendRaw(::grpc::ClientContext* context, const ::srv::BaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* AsyncChangeFriendStatusRaw(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srv::BaseReponse>* PrepareAsyncChangeFriendStatusRaw(::grpc::ClientContext* context, const ::srv::ChangeFriendStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListUserFriends_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFriend_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFriend_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeFriendStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListUserFriends(::grpc::ServerContext* context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response);
    virtual ::grpc::Status CreateFriend(::grpc::ServerContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response);
    virtual ::grpc::Status DeleteFriend(::grpc::ServerContext* context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response);
    virtual ::grpc::Status ChangeFriendStatus(::grpc::ServerContext* context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListUserFriends() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserFriends(::grpc::ServerContext* /*context*/, const ::srv::ListUserFriendsRequest* /*request*/, ::srv::ListUserFriendsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUserFriends(::grpc::ServerContext* context, ::srv::ListUserFriendsRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::ListUserFriendsReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateFriend() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFriend(::grpc::ServerContext* context, ::srv::BaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::BaseReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteFriend() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFriend(::grpc::ServerContext* context, ::srv::BaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::BaseReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeFriendStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChangeFriendStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ChangeFriendStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeFriendStatus(::grpc::ServerContext* /*context*/, const ::srv::ChangeFriendStatusRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeFriendStatus(::grpc::ServerContext* context, ::srv::ChangeFriendStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::srv::BaseReponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListUserFriends<WithAsyncMethod_CreateFriend<WithAsyncMethod_DeleteFriend<WithAsyncMethod_ChangeFriendStatus<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListUserFriends() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::ListUserFriendsRequest, ::srv::ListUserFriendsReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::ListUserFriendsRequest* request, ::srv::ListUserFriendsReponse* response) { return this->ListUserFriends(context, request, response); }));}
    void SetMessageAllocatorFor_ListUserFriends(
        ::grpc::experimental::MessageAllocator< ::srv::ListUserFriendsRequest, ::srv::ListUserFriendsReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::ListUserFriendsRequest, ::srv::ListUserFriendsReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserFriends(::grpc::ServerContext* /*context*/, const ::srv::ListUserFriendsRequest* /*request*/, ::srv::ListUserFriendsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListUserFriends(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::ListUserFriendsRequest* /*request*/, ::srv::ListUserFriendsReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListUserFriends(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::ListUserFriendsRequest* /*request*/, ::srv::ListUserFriendsReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateFriend() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::BaseRequest, ::srv::BaseReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response) { return this->CreateFriend(context, request, response); }));}
    void SetMessageAllocatorFor_CreateFriend(
        ::grpc::experimental::MessageAllocator< ::srv::BaseRequest, ::srv::BaseReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::BaseRequest, ::srv::BaseReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateFriend(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateFriend(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteFriend() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::BaseRequest, ::srv::BaseReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::BaseRequest* request, ::srv::BaseReponse* response) { return this->DeleteFriend(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteFriend(
        ::grpc::experimental::MessageAllocator< ::srv::BaseRequest, ::srv::BaseReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::BaseRequest, ::srv::BaseReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteFriend(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteFriend(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ChangeFriendStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ChangeFriendStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::srv::ChangeFriendStatusRequest, ::srv::BaseReponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srv::ChangeFriendStatusRequest* request, ::srv::BaseReponse* response) { return this->ChangeFriendStatus(context, request, response); }));}
    void SetMessageAllocatorFor_ChangeFriendStatus(
        ::grpc::experimental::MessageAllocator< ::srv::ChangeFriendStatusRequest, ::srv::BaseReponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::srv::ChangeFriendStatusRequest, ::srv::BaseReponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ChangeFriendStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeFriendStatus(::grpc::ServerContext* /*context*/, const ::srv::ChangeFriendStatusRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ChangeFriendStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::srv::ChangeFriendStatusRequest* /*request*/, ::srv::BaseReponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ChangeFriendStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srv::ChangeFriendStatusRequest* /*request*/, ::srv::BaseReponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListUserFriends<ExperimentalWithCallbackMethod_CreateFriend<ExperimentalWithCallbackMethod_DeleteFriend<ExperimentalWithCallbackMethod_ChangeFriendStatus<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListUserFriends<ExperimentalWithCallbackMethod_CreateFriend<ExperimentalWithCallbackMethod_DeleteFriend<ExperimentalWithCallbackMethod_ChangeFriendStatus<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListUserFriends() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserFriends(::grpc::ServerContext* /*context*/, const ::srv::ListUserFriendsRequest* /*request*/, ::srv::ListUserFriendsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateFriend() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteFriend() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeFriendStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChangeFriendStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ChangeFriendStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeFriendStatus(::grpc::ServerContext* /*context*/, const ::srv::ChangeFriendStatusRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListUserFriends() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserFriends(::grpc::ServerContext* /*context*/, const ::srv::ListUserFriendsRequest* /*request*/, ::srv::ListUserFriendsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUserFriends(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateFriend() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFriend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteFriend() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFriend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeFriendStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChangeFriendStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ChangeFriendStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeFriendStatus(::grpc::ServerContext* /*context*/, const ::srv::ChangeFriendStatusRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeFriendStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListUserFriends() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListUserFriends(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUserFriends(::grpc::ServerContext* /*context*/, const ::srv::ListUserFriendsRequest* /*request*/, ::srv::ListUserFriendsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListUserFriends(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListUserFriends(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateFriend() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateFriend(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateFriend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateFriend(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteFriend() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteFriend(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteFriend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteFriend(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ChangeFriendStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ChangeFriendStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChangeFriendStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ChangeFriendStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeFriendStatus(::grpc::ServerContext* /*context*/, const ::srv::ChangeFriendStatusRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ChangeFriendStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ChangeFriendStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListUserFriends : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListUserFriends() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::ListUserFriendsRequest, ::srv::ListUserFriendsReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::ListUserFriendsRequest, ::srv::ListUserFriendsReponse>* streamer) {
                       return this->StreamedListUserFriends(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListUserFriends() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListUserFriends(::grpc::ServerContext* /*context*/, const ::srv::ListUserFriendsRequest* /*request*/, ::srv::ListUserFriendsReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListUserFriends(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::ListUserFriendsRequest,::srv::ListUserFriendsReponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateFriend() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::BaseRequest, ::srv::BaseReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::BaseRequest, ::srv::BaseReponse>* streamer) {
                       return this->StreamedCreateFriend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFriend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::BaseRequest,::srv::BaseReponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFriend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteFriend() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::BaseRequest, ::srv::BaseReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::BaseRequest, ::srv::BaseReponse>* streamer) {
                       return this->StreamedDeleteFriend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteFriend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFriend(::grpc::ServerContext* /*context*/, const ::srv::BaseRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFriend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::BaseRequest,::srv::BaseReponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeFriendStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChangeFriendStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srv::ChangeFriendStatusRequest, ::srv::BaseReponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::srv::ChangeFriendStatusRequest, ::srv::BaseReponse>* streamer) {
                       return this->StreamedChangeFriendStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChangeFriendStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeFriendStatus(::grpc::ServerContext* /*context*/, const ::srv::ChangeFriendStatusRequest* /*request*/, ::srv::BaseReponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeFriendStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srv::ChangeFriendStatusRequest,::srv::BaseReponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListUserFriends<WithStreamedUnaryMethod_CreateFriend<WithStreamedUnaryMethod_DeleteFriend<WithStreamedUnaryMethod_ChangeFriendStatus<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListUserFriends<WithStreamedUnaryMethod_CreateFriend<WithStreamedUnaryMethod_DeleteFriend<WithStreamedUnaryMethod_ChangeFriendStatus<Service > > > > StreamedService;
};

}  // namespace srv


#endif  // GRPC_friend_5fservice_2eproto__INCLUDED
