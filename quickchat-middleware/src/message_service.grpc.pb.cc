// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message_service.proto

#include "message_service.pb.h"
#include "message_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace srv {

static const char* MessageService_method_names[] = {
  "/srv.MessageService/GetMessages",
  "/srv.MessageService/GetLastMessage",
};

std::unique_ptr< MessageService::Stub> MessageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MessageService::Stub> stub(new MessageService::Stub(channel));
  return stub;
}

MessageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMessages_(MessageService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastMessage_(MessageService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MessageService::Stub::GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::srv::GetMessagesReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMessages_, context, request, response);
}

void MessageService::Stub::experimental_async::GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, std::move(f));
}

void MessageService::Stub::experimental_async::GetMessages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessagesReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, std::move(f));
}

void MessageService::Stub::experimental_async::GetMessages(::grpc::ClientContext* context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, reactor);
}

void MessageService::Stub::experimental_async::GetMessages(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetMessagesReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srv::GetMessagesReponse>* MessageService::Stub::AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::GetMessagesReponse>::Create(channel_.get(), cq, rpcmethod_GetMessages_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::srv::GetMessagesReponse>* MessageService::Stub::PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::srv::GetMessagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::GetMessagesReponse>::Create(channel_.get(), cq, rpcmethod_GetMessages_, context, request, false);
}

::grpc::Status MessageService::Stub::GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::srv::GetLastMessageReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLastMessage_, context, request, response);
}

void MessageService::Stub::experimental_async::GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastMessage_, context, request, response, std::move(f));
}

void MessageService::Stub::experimental_async::GetLastMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetLastMessageReponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastMessage_, context, request, response, std::move(f));
}

void MessageService::Stub::experimental_async::GetLastMessage(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastMessage_, context, request, response, reactor);
}

void MessageService::Stub::experimental_async::GetLastMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::srv::GetLastMessageReponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srv::GetLastMessageReponse>* MessageService::Stub::AsyncGetLastMessageRaw(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::GetLastMessageReponse>::Create(channel_.get(), cq, rpcmethod_GetLastMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::srv::GetLastMessageReponse>* MessageService::Stub::PrepareAsyncGetLastMessageRaw(::grpc::ClientContext* context, const ::srv::GetLastMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::srv::GetLastMessageReponse>::Create(channel_.get(), cq, rpcmethod_GetLastMessage_, context, request, false);
}

MessageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessageService::Service, ::srv::GetMessagesRequest, ::srv::GetMessagesReponse>(
          [](MessageService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::GetMessagesRequest* req,
             ::srv::GetMessagesReponse* resp) {
               return service->GetMessages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessageService::Service, ::srv::GetLastMessageRequest, ::srv::GetLastMessageReponse>(
          [](MessageService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::GetLastMessageRequest* req,
             ::srv::GetLastMessageReponse* resp) {
               return service->GetLastMessage(ctx, req, resp);
             }, this)));
}

MessageService::Service::~Service() {
}

::grpc::Status MessageService::Service::GetMessages(::grpc::ServerContext* context, const ::srv::GetMessagesRequest* request, ::srv::GetMessagesReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessageService::Service::GetLastMessage(::grpc::ServerContext* context, const ::srv::GetLastMessageRequest* request, ::srv::GetLastMessageReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace srv

