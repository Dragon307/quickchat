// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: money_service.proto

#include "money_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_history_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_History_history_2eproto;
namespace srv {
class CreateAccountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAccountRequest> _instance;
} _CreateAccountRequest_default_instance_;
class DepositRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepositRequest> _instance;
} _DepositRequest_default_instance_;
class WithDrawRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WithDrawRequest> _instance;
} _WithDrawRequest_default_instance_;
class GetBalanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBalanceRequest> _instance;
} _GetBalanceRequest_default_instance_;
class TransferRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransferRequest> _instance;
} _TransferRequest_default_instance_;
class HistoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryRequest> _instance;
} _HistoryRequest_default_instance_;
class HistoryReponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoryReponse> _instance;
} _HistoryReponse_default_instance_;
}  // namespace srv
static void InitDefaultsscc_info_CreateAccountRequest_money_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_CreateAccountRequest_default_instance_;
    new (ptr) ::srv::CreateAccountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::CreateAccountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAccountRequest_money_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateAccountRequest_money_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_DepositRequest_money_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_DepositRequest_default_instance_;
    new (ptr) ::srv::DepositRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::DepositRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DepositRequest_money_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DepositRequest_money_5fservice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetBalanceRequest_money_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_GetBalanceRequest_default_instance_;
    new (ptr) ::srv::GetBalanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::GetBalanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBalanceRequest_money_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBalanceRequest_money_5fservice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_HistoryReponse_money_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_HistoryReponse_default_instance_;
    new (ptr) ::srv::HistoryReponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::HistoryReponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoryReponse_money_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistoryReponse_money_5fservice_2eproto}, {
      &scc_info_History_history_2eproto.base,}};

static void InitDefaultsscc_info_HistoryRequest_money_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_HistoryRequest_default_instance_;
    new (ptr) ::srv::HistoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::HistoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistoryRequest_money_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HistoryRequest_money_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_TransferRequest_money_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_TransferRequest_default_instance_;
    new (ptr) ::srv::TransferRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::TransferRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransferRequest_money_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransferRequest_money_5fservice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_WithDrawRequest_money_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srv::_WithDrawRequest_default_instance_;
    new (ptr) ::srv::WithDrawRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srv::WithDrawRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WithDrawRequest_money_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WithDrawRequest_money_5fservice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_money_5fservice_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_money_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_money_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_money_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::CreateAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::CreateAccountRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::srv::CreateAccountRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::DepositRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::DepositRequest, id_),
  PROTOBUF_FIELD_OFFSET(::srv::DepositRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::srv::DepositRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::srv::DepositRequest, create_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::WithDrawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::WithDrawRequest, id_),
  PROTOBUF_FIELD_OFFSET(::srv::WithDrawRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::srv::WithDrawRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::srv::WithDrawRequest, create_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::GetBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::GetBalanceRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::srv::GetBalanceRequest, create_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::TransferRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::TransferRequest, id_),
  PROTOBUF_FIELD_OFFSET(::srv::TransferRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::srv::TransferRequest, to_user_),
  PROTOBUF_FIELD_OFFSET(::srv::TransferRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::srv::TransferRequest, message_),
  PROTOBUF_FIELD_OFFSET(::srv::TransferRequest, create_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::HistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::HistoryRequest, user_id_),
  PROTOBUF_FIELD_OFFSET(::srv::HistoryRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::srv::HistoryRequest, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srv::HistoryReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srv::HistoryReponse, histories_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::srv::CreateAccountRequest)},
  { 7, -1, sizeof(::srv::DepositRequest)},
  { 16, -1, sizeof(::srv::WithDrawRequest)},
  { 25, -1, sizeof(::srv::GetBalanceRequest)},
  { 32, -1, sizeof(::srv::TransferRequest)},
  { 43, -1, sizeof(::srv::HistoryRequest)},
  { 51, -1, sizeof(::srv::HistoryReponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_CreateAccountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_DepositRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_WithDrawRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_GetBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_TransferRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_HistoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srv::_HistoryReponse_default_instance_),
};

const char descriptor_table_protodef_money_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023money_service.proto\022\003srv\032\raccount.prot"
  "o\032\rhistory.proto\032\037google/protobuf/timest"
  "amp.proto\"5\n\024CreateAccountRequest\022\017\n\007use"
  "r_id\030\001 \001(\004\022\014\n\004type\030\002 \001(\t\"l\n\016DepositReque"
  "st\022\n\n\002id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\004\022\016\n\006amoun"
  "t\030\003 \001(\004\022-\n\tcreate_at\030\004 \001(\0132\032.google.prot"
  "obuf.Timestamp\"m\n\017WithDrawRequest\022\n\n\002id\030"
  "\001 \001(\t\022\017\n\007user_id\030\002 \001(\004\022\016\n\006amount\030\003 \001(\004\022-"
  "\n\tcreate_at\030\004 \001(\0132\032.google.protobuf.Time"
  "stamp\"S\n\021GetBalanceRequest\022\017\n\007user_id\030\001 "
  "\001(\004\022-\n\tcreate_at\030\002 \001(\0132\032.google.protobuf"
  ".Timestamp\"\217\001\n\017TransferRequest\022\n\n\002id\030\001 \001"
  "(\t\022\017\n\007user_id\030\002 \001(\004\022\017\n\007to_user\030\003 \001(\004\022\016\n\006"
  "amount\030\004 \001(\004\022\017\n\007message\030\005 \001(\t\022-\n\tcreate_"
  "at\030\006 \001(\0132\032.google.protobuf.Timestamp\"@\n\016"
  "HistoryRequest\022\017\n\007user_id\030\001 \001(\004\022\r\n\005limit"
  "\030\002 \001(\005\022\016\n\006offset\030\003 \001(\005\"1\n\016HistoryReponse"
  "\022\037\n\thistories\030\001 \003(\0132\014.msg.History2\313\002\n\014Mo"
  "neyService\022:\n\rCreateAccount\022\031.srv.Create"
  "AccountRequest\032\014.msg.Account\"\000\0224\n\nGetBal"
  "ance\022\026.srv.GetBalanceRequest\032\014.msg.Accou"
  "nt\"\000\022.\n\007Deposit\022\023.srv.DepositRequest\032\014.m"
  "sg.Account\"\000\0220\n\010WithDraw\022\024.srv.WithDrawR"
  "equest\032\014.msg.Account\"\000\0220\n\010Transfer\022\024.srv"
  ".TransferRequest\032\014.msg.Account\"\000\0225\n\007Hist"
  "ory\022\023.srv.HistoryRequest\032\023.srv.HistoryRe"
  "ponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_money_5fservice_2eproto_deps[3] = {
  &::descriptor_table_account_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_history_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_money_5fservice_2eproto_sccs[7] = {
  &scc_info_CreateAccountRequest_money_5fservice_2eproto.base,
  &scc_info_DepositRequest_money_5fservice_2eproto.base,
  &scc_info_GetBalanceRequest_money_5fservice_2eproto.base,
  &scc_info_HistoryReponse_money_5fservice_2eproto.base,
  &scc_info_HistoryRequest_money_5fservice_2eproto.base,
  &scc_info_TransferRequest_money_5fservice_2eproto.base,
  &scc_info_WithDrawRequest_money_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_money_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_money_5fservice_2eproto = {
  false, false, descriptor_table_protodef_money_5fservice_2eproto, "money_service.proto", 1055,
  &descriptor_table_money_5fservice_2eproto_once, descriptor_table_money_5fservice_2eproto_sccs, descriptor_table_money_5fservice_2eproto_deps, 7, 3,
  schemas, file_default_instances, TableStruct_money_5fservice_2eproto::offsets,
  file_level_metadata_money_5fservice_2eproto, 7, file_level_enum_descriptors_money_5fservice_2eproto, file_level_service_descriptors_money_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_money_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_money_5fservice_2eproto)), true);
namespace srv {

// ===================================================================

void CreateAccountRequest::InitAsDefaultInstance() {
}
class CreateAccountRequest::_Internal {
 public:
};

CreateAccountRequest::CreateAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.CreateAccountRequest)
}
CreateAccountRequest::CreateAccountRequest(const CreateAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:srv.CreateAccountRequest)
}

void CreateAccountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAccountRequest_money_5fservice_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = PROTOBUF_ULONGLONG(0);
}

CreateAccountRequest::~CreateAccountRequest() {
  // @@protoc_insertion_point(destructor:srv.CreateAccountRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAccountRequest::ArenaDtor(void* object) {
  CreateAccountRequest* _this = reinterpret_cast< CreateAccountRequest* >(object);
  (void)_this;
}
void CreateAccountRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAccountRequest& CreateAccountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAccountRequest_money_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CreateAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.CreateAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAccountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.CreateAccountRequest.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAccountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.CreateAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "srv.CreateAccountRequest.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.CreateAccountRequest)
  return target;
}

size_t CreateAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.CreateAccountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAccountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.CreateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAccountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.CreateAccountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.CreateAccountRequest)
    MergeFrom(*source);
  }
}

void CreateAccountRequest::MergeFrom(const CreateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.CreateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void CreateAccountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.CreateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccountRequest::CopyFrom(const CreateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.CreateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountRequest::IsInitialized() const {
  return true;
}

void CreateAccountRequest::InternalSwap(CreateAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepositRequest::InitAsDefaultInstance() {
  ::srv::_DepositRequest_default_instance_._instance.get_mutable()->create_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class DepositRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_at(const DepositRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
DepositRequest::_Internal::create_at(const DepositRequest* msg) {
  return *msg->create_at_;
}
void DepositRequest::clear_create_at() {
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
}
DepositRequest::DepositRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.DepositRequest)
}
DepositRequest::DepositRequest(const DepositRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_create_at()) {
    create_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_at_);
  } else {
    create_at_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:srv.DepositRequest)
}

void DepositRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DepositRequest_money_5fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&create_at_)) + sizeof(amount_));
}

DepositRequest::~DepositRequest() {
  // @@protoc_insertion_point(destructor:srv.DepositRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepositRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_at_;
}

void DepositRequest::ArenaDtor(void* object) {
  DepositRequest* _this = reinterpret_cast< DepositRequest* >(object);
  (void)_this;
}
void DepositRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepositRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepositRequest& DepositRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepositRequest_money_5fservice_2eproto.base);
  return *internal_default_instance();
}


void DepositRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.DepositRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.DepositRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepositRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.DepositRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "srv.DepositRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // .google.protobuf.Timestamp create_at = 4;
  if (this->has_create_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::create_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.DepositRequest)
  return target;
}

size_t DepositRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.DepositRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Timestamp create_at = 4;
  if (this->has_create_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_at_);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepositRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.DepositRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DepositRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepositRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.DepositRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.DepositRequest)
    MergeFrom(*source);
  }
}

void DepositRequest::MergeFrom(const DepositRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.DepositRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_create_at()) {
    _internal_mutable_create_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void DepositRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.DepositRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositRequest::CopyFrom(const DepositRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.DepositRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositRequest::IsInitialized() const {
  return true;
}

void DepositRequest::InternalSwap(DepositRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DepositRequest, amount_)
      + sizeof(DepositRequest::amount_)
      - PROTOBUF_FIELD_OFFSET(DepositRequest, create_at_)>(
          reinterpret_cast<char*>(&create_at_),
          reinterpret_cast<char*>(&other->create_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WithDrawRequest::InitAsDefaultInstance() {
  ::srv::_WithDrawRequest_default_instance_._instance.get_mutable()->create_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class WithDrawRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_at(const WithDrawRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
WithDrawRequest::_Internal::create_at(const WithDrawRequest* msg) {
  return *msg->create_at_;
}
void WithDrawRequest::clear_create_at() {
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
}
WithDrawRequest::WithDrawRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.WithDrawRequest)
}
WithDrawRequest::WithDrawRequest(const WithDrawRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_create_at()) {
    create_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_at_);
  } else {
    create_at_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:srv.WithDrawRequest)
}

void WithDrawRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WithDrawRequest_money_5fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&create_at_)) + sizeof(amount_));
}

WithDrawRequest::~WithDrawRequest() {
  // @@protoc_insertion_point(destructor:srv.WithDrawRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WithDrawRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_at_;
}

void WithDrawRequest::ArenaDtor(void* object) {
  WithDrawRequest* _this = reinterpret_cast< WithDrawRequest* >(object);
  (void)_this;
}
void WithDrawRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WithDrawRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WithDrawRequest& WithDrawRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WithDrawRequest_money_5fservice_2eproto.base);
  return *internal_default_instance();
}


void WithDrawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.WithDrawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WithDrawRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.WithDrawRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WithDrawRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.WithDrawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "srv.WithDrawRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amount(), target);
  }

  // .google.protobuf.Timestamp create_at = 4;
  if (this->has_create_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::create_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.WithDrawRequest)
  return target;
}

size_t WithDrawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.WithDrawRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Timestamp create_at = 4;
  if (this->has_create_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_at_);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 amount = 3;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WithDrawRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.WithDrawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WithDrawRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WithDrawRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.WithDrawRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.WithDrawRequest)
    MergeFrom(*source);
  }
}

void WithDrawRequest::MergeFrom(const WithDrawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.WithDrawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_create_at()) {
    _internal_mutable_create_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void WithDrawRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.WithDrawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WithDrawRequest::CopyFrom(const WithDrawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.WithDrawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WithDrawRequest::IsInitialized() const {
  return true;
}

void WithDrawRequest::InternalSwap(WithDrawRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WithDrawRequest, amount_)
      + sizeof(WithDrawRequest::amount_)
      - PROTOBUF_FIELD_OFFSET(WithDrawRequest, create_at_)>(
          reinterpret_cast<char*>(&create_at_),
          reinterpret_cast<char*>(&other->create_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WithDrawRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBalanceRequest::InitAsDefaultInstance() {
  ::srv::_GetBalanceRequest_default_instance_._instance.get_mutable()->create_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetBalanceRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_at(const GetBalanceRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetBalanceRequest::_Internal::create_at(const GetBalanceRequest* msg) {
  return *msg->create_at_;
}
void GetBalanceRequest::clear_create_at() {
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
}
GetBalanceRequest::GetBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.GetBalanceRequest)
}
GetBalanceRequest::GetBalanceRequest(const GetBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_create_at()) {
    create_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_at_);
  } else {
    create_at_ = nullptr;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:srv.GetBalanceRequest)
}

void GetBalanceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBalanceRequest_money_5fservice_2eproto.base);
  ::memset(&create_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&create_at_)) + sizeof(user_id_));
}

GetBalanceRequest::~GetBalanceRequest() {
  // @@protoc_insertion_point(destructor:srv.GetBalanceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBalanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete create_at_;
}

void GetBalanceRequest::ArenaDtor(void* object) {
  GetBalanceRequest* _this = reinterpret_cast< GetBalanceRequest* >(object);
  (void)_this;
}
void GetBalanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBalanceRequest& GetBalanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBalanceRequest_money_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.GetBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
  user_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBalanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBalanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.GetBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // .google.protobuf.Timestamp create_at = 2;
  if (this->has_create_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.GetBalanceRequest)
  return target;
}

size_t GetBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.GetBalanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp create_at = 2;
  if (this->has_create_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_at_);
  }

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBalanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.GetBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBalanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.GetBalanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.GetBalanceRequest)
    MergeFrom(*source);
  }
}

void GetBalanceRequest::MergeFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.GetBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_create_at()) {
    _internal_mutable_create_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void GetBalanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBalanceRequest::CopyFrom(const GetBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.GetBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBalanceRequest::IsInitialized() const {
  return true;
}

void GetBalanceRequest::InternalSwap(GetBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBalanceRequest, user_id_)
      + sizeof(GetBalanceRequest::user_id_)
      - PROTOBUF_FIELD_OFFSET(GetBalanceRequest, create_at_)>(
          reinterpret_cast<char*>(&create_at_),
          reinterpret_cast<char*>(&other->create_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBalanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransferRequest::InitAsDefaultInstance() {
  ::srv::_TransferRequest_default_instance_._instance.get_mutable()->create_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TransferRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_at(const TransferRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TransferRequest::_Internal::create_at(const TransferRequest* msg) {
  return *msg->create_at_;
}
void TransferRequest::clear_create_at() {
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
}
TransferRequest::TransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.TransferRequest)
}
TransferRequest::TransferRequest(const TransferRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_create_at()) {
    create_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_at_);
  } else {
    create_at_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(amount_));
  // @@protoc_insertion_point(copy_constructor:srv.TransferRequest)
}

void TransferRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransferRequest_money_5fservice_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&create_at_)) + sizeof(amount_));
}

TransferRequest::~TransferRequest() {
  // @@protoc_insertion_point(destructor:srv.TransferRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransferRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_at_;
}

void TransferRequest::ArenaDtor(void* object) {
  TransferRequest* _this = reinterpret_cast< TransferRequest* >(object);
  (void)_this;
}
void TransferRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransferRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransferRequest& TransferRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransferRequest_money_5fservice_2eproto.base);
  return *internal_default_instance();
}


void TransferRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.TransferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && create_at_ != nullptr) {
    delete create_at_;
  }
  create_at_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(amount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.TransferRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to_user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          to_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srv.TransferRequest.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransferRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.TransferRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "srv.TransferRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // uint64 to_user = 3;
  if (this->to_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_to_user(), target);
  }

  // uint64 amount = 4;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_amount(), target);
  }

  // string message = 5;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "srv.TransferRequest.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp create_at = 6;
  if (this->has_create_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::create_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.TransferRequest)
  return target;
}

size_t TransferRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.TransferRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string message = 5;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp create_at = 6;
  if (this->has_create_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_at_);
  }

  // uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // uint64 to_user = 3;
  if (this->to_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_to_user());
  }

  // uint64 amount = 4;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.TransferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransferRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.TransferRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.TransferRequest)
    MergeFrom(*source);
  }
}

void TransferRequest::MergeFrom(const TransferRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.TransferRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_create_at()) {
    _internal_mutable_create_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_at());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.to_user() != 0) {
    _internal_set_to_user(from._internal_to_user());
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void TransferRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.TransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRequest::CopyFrom(const TransferRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.TransferRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRequest::IsInitialized() const {
  return true;
}

void TransferRequest::InternalSwap(TransferRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferRequest, amount_)
      + sizeof(TransferRequest::amount_)
      - PROTOBUF_FIELD_OFFSET(TransferRequest, create_at_)>(
          reinterpret_cast<char*>(&create_at_),
          reinterpret_cast<char*>(&other->create_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HistoryRequest::InitAsDefaultInstance() {
}
class HistoryRequest::_Internal {
 public:
};

HistoryRequest::HistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.HistoryRequest)
}
HistoryRequest::HistoryRequest(const HistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:srv.HistoryRequest)
}

void HistoryRequest::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(offset_));
}

HistoryRequest::~HistoryRequest() {
  // @@protoc_insertion_point(destructor:srv.HistoryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HistoryRequest::ArenaDtor(void* object) {
  HistoryRequest* _this = reinterpret_cast< HistoryRequest* >(object);
  (void)_this;
}
void HistoryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryRequest& HistoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryRequest_money_5fservice_2eproto.base);
  return *internal_default_instance();
}


void HistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.HistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.HistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_user_id(), target);
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_limit(), target);
  }

  // int32 offset = 3;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.HistoryRequest)
  return target;
}

size_t HistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.HistoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_user_id());
  }

  // int32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  // int32 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.HistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.HistoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.HistoryRequest)
    MergeFrom(*source);
  }
}

void HistoryRequest::MergeFrom(const HistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.HistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
}

void HistoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.HistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRequest::CopyFrom(const HistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.HistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRequest::IsInitialized() const {
  return true;
}

void HistoryRequest::InternalSwap(HistoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryRequest, offset_)
      + sizeof(HistoryRequest::offset_)
      - PROTOBUF_FIELD_OFFSET(HistoryRequest, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HistoryReponse::InitAsDefaultInstance() {
}
class HistoryReponse::_Internal {
 public:
};

void HistoryReponse::clear_histories() {
  histories_.Clear();
}
HistoryReponse::HistoryReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  histories_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srv.HistoryReponse)
}
HistoryReponse::HistoryReponse(const HistoryReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      histories_(from.histories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:srv.HistoryReponse)
}

void HistoryReponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoryReponse_money_5fservice_2eproto.base);
}

HistoryReponse::~HistoryReponse() {
  // @@protoc_insertion_point(destructor:srv.HistoryReponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoryReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HistoryReponse::ArenaDtor(void* object) {
  HistoryReponse* _this = reinterpret_cast< HistoryReponse* >(object);
  (void)_this;
}
void HistoryReponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoryReponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoryReponse& HistoryReponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoryReponse_money_5fservice_2eproto.base);
  return *internal_default_instance();
}


void HistoryReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:srv.HistoryReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  histories_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryReponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.History histories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoryReponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srv.HistoryReponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.History histories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_histories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_histories(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srv.HistoryReponse)
  return target;
}

size_t HistoryReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srv.HistoryReponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.History histories = 1;
  total_size += 1UL * this->_internal_histories_size();
  for (const auto& msg : this->histories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoryReponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srv.HistoryReponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoryReponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoryReponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srv.HistoryReponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srv.HistoryReponse)
    MergeFrom(*source);
  }
}

void HistoryReponse::MergeFrom(const HistoryReponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srv.HistoryReponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  histories_.MergeFrom(from.histories_);
}

void HistoryReponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srv.HistoryReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryReponse::CopyFrom(const HistoryReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srv.HistoryReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryReponse::IsInitialized() const {
  return true;
}

void HistoryReponse::InternalSwap(HistoryReponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  histories_.InternalSwap(&other->histories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryReponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace srv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::srv::CreateAccountRequest* Arena::CreateMaybeMessage< ::srv::CreateAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::CreateAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::DepositRequest* Arena::CreateMaybeMessage< ::srv::DepositRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::DepositRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::WithDrawRequest* Arena::CreateMaybeMessage< ::srv::WithDrawRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::WithDrawRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::GetBalanceRequest* Arena::CreateMaybeMessage< ::srv::GetBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::GetBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::TransferRequest* Arena::CreateMaybeMessage< ::srv::TransferRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::TransferRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::HistoryRequest* Arena::CreateMaybeMessage< ::srv::HistoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::HistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::srv::HistoryReponse* Arena::CreateMaybeMessage< ::srv::HistoryReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srv::HistoryReponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
