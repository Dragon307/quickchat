// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: user_service.proto

#include "user_service.pb.h"
#include "user_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace srv {

static const char* UserService_method_names[] = {
  "/srv.UserService/GetUser",
  "/srv.UserService/CreateUser",
  "/srv.UserService/UpdateUser",
  "/srv.UserService/DeleteUser",
  "/srv.UserService/Login",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetUser_(UserService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateUser_(UserService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUser_(UserService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUser_(UserService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(UserService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::GetUser(::grpc::ClientContext* context, const ::srv::GetUserRequest& request, ::msg::User* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetUser_, context, request, response);
}

void UserService::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::srv::GetUserRequest* request, ::msg::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::srv::GetUserRequest* request, ::msg::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

void UserService::Stub::experimental_async::GetUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::User>* UserService::Stub::AsyncGetUserRaw(::grpc::ClientContext* context, const ::srv::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::User>::Create(channel_.get(), cq, rpcmethod_GetUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::User>* UserService::Stub::PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::srv::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::User>::Create(channel_.get(), cq, rpcmethod_GetUser_, context, request, false);
}

::grpc::Status UserService::Stub::CreateUser(::grpc::ClientContext* context, const ::srv::CreateUserRequest& request, ::msg::User* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateUser_, context, request, response);
}

void UserService::Stub::experimental_async::CreateUser(::grpc::ClientContext* context, const ::srv::CreateUserRequest* request, ::msg::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::CreateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::CreateUser(::grpc::ClientContext* context, const ::srv::CreateUserRequest* request, ::msg::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, reactor);
}

void UserService::Stub::experimental_async::CreateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::User>* UserService::Stub::AsyncCreateUserRaw(::grpc::ClientContext* context, const ::srv::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::User>::Create(channel_.get(), cq, rpcmethod_CreateUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::User>* UserService::Stub::PrepareAsyncCreateUserRaw(::grpc::ClientContext* context, const ::srv::CreateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::User>::Create(channel_.get(), cq, rpcmethod_CreateUser_, context, request, false);
}

::grpc::Status UserService::Stub::UpdateUser(::grpc::ClientContext* context, const ::srv::UpdateUserRequest& request, ::msg::User* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateUser_, context, request, response);
}

void UserService::Stub::experimental_async::UpdateUser(::grpc::ClientContext* context, const ::srv::UpdateUserRequest* request, ::msg::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::UpdateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::UpdateUser(::grpc::ClientContext* context, const ::srv::UpdateUserRequest* request, ::msg::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, reactor);
}

void UserService::Stub::experimental_async::UpdateUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::User>* UserService::Stub::AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::srv::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::User>::Create(channel_.get(), cq, rpcmethod_UpdateUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::User>* UserService::Stub::PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::srv::UpdateUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::User>::Create(channel_.get(), cq, rpcmethod_UpdateUser_, context, request, false);
}

::grpc::Status UserService::Stub::DeleteUser(::grpc::ClientContext* context, const ::srv::DeleteUserRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteUser_, context, request, response);
}

void UserService::Stub::experimental_async::DeleteUser(::grpc::ClientContext* context, const ::srv::DeleteUserRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::DeleteUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::DeleteUser(::grpc::ClientContext* context, const ::srv::DeleteUserRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, reactor);
}

void UserService::Stub::experimental_async::DeleteUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::AsyncDeleteUserRaw(::grpc::ClientContext* context, const ::srv::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserService::Stub::PrepareAsyncDeleteUserRaw(::grpc::ClientContext* context, const ::srv::DeleteUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DeleteUser_, context, request, false);
}

::grpc::Status UserService::Stub::Login(::grpc::ClientContext* context, const ::srv::LoginRequest& request, ::msg::User* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

void UserService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::srv::LoginRequest* request, ::msg::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::User* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void UserService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::srv::LoginRequest* request, ::msg::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

void UserService::Stub::experimental_async::Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::msg::User* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::msg::User>* UserService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::srv::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::User>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::msg::User>* UserService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::srv::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::msg::User>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::srv::GetUserRequest, ::msg::User>(
          [](UserService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::GetUserRequest* req,
             ::msg::User* resp) {
               return service->GetUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::srv::CreateUserRequest, ::msg::User>(
          [](UserService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::CreateUserRequest* req,
             ::msg::User* resp) {
               return service->CreateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::srv::UpdateUserRequest, ::msg::User>(
          [](UserService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::UpdateUserRequest* req,
             ::msg::User* resp) {
               return service->UpdateUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::srv::DeleteUserRequest, ::google::protobuf::Empty>(
          [](UserService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::DeleteUserRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::srv::LoginRequest, ::msg::User>(
          [](UserService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::srv::LoginRequest* req,
             ::msg::User* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::GetUser(::grpc::ServerContext* context, const ::srv::GetUserRequest* request, ::msg::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::CreateUser(::grpc::ServerContext* context, const ::srv::CreateUserRequest* request, ::msg::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::UpdateUser(::grpc::ServerContext* context, const ::srv::UpdateUserRequest* request, ::msg::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::DeleteUser(::grpc::ServerContext* context, const ::srv::DeleteUserRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::Login(::grpc::ServerContext* context, const ::srv::LoginRequest* request, ::msg::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace srv

